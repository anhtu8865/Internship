{"version":3,"sources":["components/DialogModal.jsx","components/User/UpdateUserModal.jsx","components/User/UserItem.jsx","pages/UsersManager.jsx","components/Permission/PermissionItem.jsx","pages/PermissionManager.jsx","components/Permission/PermissionRoleItem.jsx","components/Form/FormInput.jsx","components/Permission/UpdateRolePermission.jsx","components/Role/UpdateRoleModal.jsx","components/Role/RoleItem.jsx","pages/RolesManager.jsx","components/ProjectUser/ProjectUserItems.jsx","components/ProjectUser/AddUserToProject.jsx","components/Transition/TransitionItem.jsx","components/Transition/TransitionItemForProject.jsx","pages/TransitionManagerForProject.jsx","components/Issue/UpdateIssueForm.js","pages/Issues.js","pages/IssuesByProject.js","components/Screen/AddScreenForm.js","components/Screen/UpdateScreenForm.js","pages/Screens.js","pages/ScreenCustomFields.js","pages/UpdateWorkflow.jsx","components/Workflow/WorkflowItem.jsx","pages/Workflows.jsx","components/CustomField/AddCustomFieldForm.js","components/CustomField/UpdateCustomFieldForm.js","pages/CustomFields.js","components/IssueType/AddIssueTypeForm.js","components/IssueType/UpdateIssueTypeForm.js","pages/IssueTypes.js","components/Status/UpdateStatusModal.jsx","components/Status/StatusItem.jsx","pages/StatusManager.jsx","components/Workflow/WorkflowProjectItem.jsx","components/Workflow/UpdateWorkflowModal.jsx","pages/TransitionManager.jsx","pages/ProjectIssueTypeScreens.js","components/Project/UpdateProjectModal.jsx","components/Project/ViewProject.jsx","components/Project/ProjectItem.jsx","components/Project/CreateProjectModal.jsx","pages/Projects.jsx","pages/initial-elements.jsx","pages/viewDiagram.jsx","routes/index.js","pages/DetailPermission.jsx","pages/CreateRole.jsx","pages/ProjectUserRole.jsx","pages/AddTransition.jsx","pages/CreateStatus.jsx","pages/AddWorkflow.jsx","pages/CreateWorkflow.jsx","pages/Profile.jsx","routes/sidebar.js","components/Sidebar/SidebarSubmenu.js","components/Sidebar/SidebarContent.js","components/Sidebar/DesktopSidebar.js","components/Sidebar/MobileSidebar.js","components/Sidebar/index.js","components/Issue/AddIssueForm.js","components/Header2.js","containers/Layout.js"],"names":["DialogTitle","withStyles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","props","children","classes","onClose","other","disableTypography","className","Typography","variant","IconButton","onClick","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","DialogModal","title","modalDialog","open","handleSubmit","handleClose","Dialog","fullWidth","maxWidth","id","UpdateUserModal","dispatch","useAppDispatch","addToast","useToasts","useForm","register","useSelector","usersSelector","userUpdate","updateMess","updateSuccess","onSubmit","data","updateUser","User_Id","appearance","autoDismiss","dividers","type","r","name","label","value","User_Full_Name","required","layout","colours","blue","orange","purple","red","lime","blueGrey","useStyles","makeStyles","backgroundColor","Math","floor","random","length","UserItem","user","globalrole","React","useState","openUpdate","setOpenUpdate","handleOpenUpdate","e","preventDefault","setUserUpdate","modalUpdate","handleOpen","Is_Admin","result","User_Name","split","forEach","letter","push","Avatar","Ava","User_Email","userId","confirm","deleteUser","deleteConfirm","Users","users","loading","hasErrors","useEffect","fetchUsers","setState","searchTerm","setSearchTerm","searchResults","setSearchResults","selectTerm","setSelectTerm","results","filter","person","toLowerCase","indexOf","resultsSelect","onChange","target","selected","viewBox","d","placeholder","to","map","PermissionItem","permission","history","useHistory","permissionroles_temp","setResult","permissionApi","getPrmissionRole","Permission_Id","then","Data","Permission_Name","Permission_Description","temp","RoleName","RoleId","setPermissionUpdate","PermissionManager","permissionsSelector","permissions","fetchPermissions","PermissionRoleItem","permission_role","PermissionId","deleteRoleInPermission","FormInput","defaultValue","htmlFor","displayName","UpdateRolePermission","fulldata","data_permission","rolesSelector","roles","fetchRoles","options","item1","some","item2","Role_Id","option","Role_Name","role_name","idrole","postdata","idpermission","toString","AddRoleToPermission","UpdateRoleModal","roleUpdate","updateRole","Role_Description","RoleItem","role","setRoleUpdate","rolenamesub","roledescription","roleId","deleteRole","Roles","ProjectUserItems","dataItem","projectkey","setroleId","UserName","UserMail","projectKey","UserId","roleIdNew","ProjectUserRoleApi","updateRoleUserInProject","res","Msg","catch","err","response","dataDelete","ProjectKey","AddUserProject","listUser","options_user","arrUser","setarrUser","AddUserToProject","components","IndicatorSeparator","isMulti","item","styles","dropdownIndicator","base","control","provided","state","boxShadow","border","menuPortal","zIndex","TransitionItem","transition","axios","method","url","TransitionId","responseType","console","log","isModalOpen","setIsModalOpen","closeModal","TransitionName","Status1Name","Status2Name","isOpen","deleteTransition","block","size","TransitionItemForProject","TransitionManagerForProject","project","workflowUpdate","workflowsSelector","localStorage","setItem","JSON","stringify","parse","getItem","fullData","a","WorkflowId","axiosGet","transitionsSelector","transitions","getDataByIdWorkflow","pageTable1","setPageTable1","dataTable1","setDataTable1","totalResults","slice","dispatch1","worklfows","loading1","hasErrors1","getDataNameByIdWorkflow","WorkflowName","WorkflowDescription","resultsPerPage","p","modules","toolbar","header","font","background","align","list","indent","clipboard","matchVisual","formats","UpdateIssueForm","issue","useDispatch","reset","Name","setName","Key","key","Project","Project_Name","projectName","Issue_Type_Name","issueTypeName","Status","status","setStatus","Description","description","setDescription","editRequestStatus","setEditRequestStatus","userList","selectUserList","fetchUserList","canSave","every","Boolean","onSaveIssueClicked","newIssue","Fields","Value","updateIssue","resultAction","unwrapResult","error","inputFields","userOptions","transitionOptions","Transitions","Name_Status2","Name_Transition","Id_Transition","Field_Type","class","disabled","IssueExcerpt","openModal","find","Id","AddScreenForm","addRequestStatus","setAddRequestStatus","onSaveScreenClicked","addNewScreen","rows","UpdateScreenForm","screen","updateRequestStatus","setUpdateRequestStatus","updateScreen","ScreenExcerpt","listCustomFields","customField","pathname","ScreenCustomFieldExcerpt","screenCustomField","UpdateWorkflowModal","updateWorkflow","WorkflowItem","workflow","workflowprojects_temp","workflowApi","getWorkflowProject","handleOpenUpdateWorkflow","setWorkflowUpdate","ProjectName","handleOpenTransition","deleteWorkflow","WorkflowManager","updateWor","workflows","fetchWorkflows","fieldTypes","AddCustomFieldForm","fieldType","setFieldType","onSaveCustomFieldClicked","addNewCustomField","fieldTypesOptions","UpdateCustomFieldForm","updateCustomField","CustomFieldExcerpt","AddIssueTypeForm","icon","setIcon","onSaveIssueTypeClicked","addNewIssueType","Icon","UpdateIssueTypeForm","issueType","updateIssueType","IssueTypeExcerpt","projectIssueTypeScreensHaveName","UpdateStatusModal","statusUpdate","statussSelector","updateStatus","StatusId","StatusName","StatusDescription","Button","StatusItem","setStatusUpdate","statusId","deleteStatus","Statuss","statuss","fetchStatuss","WorkflowProjectItem","workflow_project","deleteProjectInWorkflow","UpdateProjectWorkflow","data_workflow","projectsSelector","projects","fetchProjects","id_project","project_name","idproject","idworkflow","AddProjectToWorkflow","TransitionManager","ProjectIssueTypeScreenExcerpt","projectIssueTypeScreen","ScreenName","UpdateProjectModal","projectUpdate","formData","Object","assign","updateProject","ProjectUrl","ProjectDescription","ViewProject","handleCloseViewProject","alert","ProjectLead","ProjectItem","WorkflowNa","temp1","issues","selectAllIssues","setProjectUpdate","openView","setOpenView","modalView","handleOpenViewProject","src","alt","ProjectLeadName","project_key","bool","deleteProject","CreateProjectModal","bool1","createProject","Projects","option1s","openCreate","setOpenCreate","handleOpenCreate","modalCreate","x","y","style","width","source","animated","arrowHeadType","stroke","labelStyle","fill","fontWeight","onLoad","reactFlowInstance","fitView","arrayInput","OverviewFlow","initialElements","elements","setElements","arrTran","arrStatus","i","Status1Id","Status2Id","arr","concat","onElementsRemove","elementsToRemove","els","removeElements","onConnect","params","addEdge","snapToGrid","snapGrid","nodeStrokeColor","n","nodeColor","nodeBorderRadius","gap","routes","path","component","UsersManager","globalRole","CreateUser","permissionUpdate","permissionRolesSelector","permissionroles","fetchPermissionRoles","temp_role","RolesManager","roleApi","createRole","goBack","window","location","projectname","projectUserRolesSelector","projectUserRoles","fetchProjectUserRole","openAddUser","setopenAddUser","handleAddUser","projectUserRole","temp2","fil","option2s","statusname1","statusname2","postData","TransitionApi","createTransition","viewDiagram","issueStatus","setId","selectAllProjects","projectStatus","projectsOptions","setProject","issueTypes","selectAllIssueTypes","issueTypeStatus","issueTypesOptions","setIssueType","statuses","statusesLoading","statusesOptions","usersLoading","usersOptions","setUser","fromDate","setFromDate","toDate","setToDate","content","page","setPage","setData","setTotalResults","fetchIssues","fetchIssueTypes","filteredIssues","date","Date","date2","tbody","deleteIssue","match","screens","selectAllScreens","screenCustomFields","selectAllScreenCustomFields","customFields","selectAllCustomFields","screenStatus","customFieldStatus","screenCustomFieldStatus","success","errorCustomFields","fetchScreens","fetchScreenCustomFields","fetchCustomFields","setErrorNull","setSuccessNull","listCustomFieldsId","row","Screen","Custom_Field","element","ele","deleteScreen","useLocation","setListCustomFields","onFieldTypeChanged","addNewScreenCustomField","Number","payload","oldArray","deleteScreenCustomField","deleteRow","deleteCustomField","projectIssueTypeScreens","selectAllProjectIssueTypeScreens","projectIssueTypeScreenStatus","fetchProjectIssueTypeScreens","Issue_Type","deleteIssueType","setRows","filteredProjects","filteredScreensOptions","filteredProjectsOptions","setScreen","onSaveClicked","addNewProjectIssueTypeScreen","deleteProjectIssueTypeScreen","statusApi","createStatus","Workflows","WorkflowApi","createWorkflow","workflowProjectsSelector","workflowprojects","fetchWorkflowProjects","temp_project","Transition","inforUserSelector","inforUser","Box","sx","minHeight","py","Container","Grid","container","lg","md","xs","Card","CardContent","alignItems","display","flexDirection","height","gutterBottom","Divider","autoComplete","CardHeader","subheader","justifyContent","Icons","SidebarSubmenu","route","isDropdownMenuOpen","setIsDropdownMenuOpen","show","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","SidebarContent","routesAdmin","exact","activeClassName","DesktopSidebar","MobileSidebar","useContext","SidebarContext","isSidebarOpen","closeSidebar","Sidebar","AddIssueForm","setKey","setProjectName","setIssueTypeName","index","self","filteredIssueTypes","statusAddIssue","found","Issue","addNewIssue","Issue_Type_Icon","Header","WindmillContext","mode","toggleMode","toggleSidebar","isNotificationsMenuOpen","setIsNotificationsMenuOpen","isProfileMenuOpen","setIsProfileMenuOpen","isLogged","setIsLogged","Logout","userApi","logout","removeItem","href","tag","Page404","lazy","Layout","getMe","sidebar","router_temp","Header2","fallback","ThemedSuspense","render","from"],"mappings":"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","file":"static/js/4.dcdb8abc.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport React from 'react'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle'\r\nimport MuiDialogContent from '@material-ui/core/DialogContent'\r\nimport MuiDialogActions from '@material-ui/core/DialogActions'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n})\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n\r\n  const { children, classes, onClose, ...other } = props\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          className={classes.closeButton}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  )\r\n})\r\n\r\nexport const DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent)\r\n\r\nexport const DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions)\r\n\r\nfunction DialogModal({children, title, modalDialog, handleSubmit}) {\r\n  const { open, handleClose } = modalDialog\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        fullWidth={true}\r\n        maxWidth=\"sm\"\r\n        onClose={handleClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={open}\r\n      >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          {title}\r\n        </DialogTitle>\r\n        {children}\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\nexport default DialogModal\r\n","import React from 'react'\r\nimport DialogModal from '../DialogModal'\r\nimport FormInput from '../Form/FormInputNew'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from '../../store'\r\nimport { usersSelector, updateUser } from '../../slices/users'\r\nimport { DialogActions, DialogContent } from '../DialogModal'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport {\r\n  Button,\r\n} from '@windmill/react-ui'\r\n\r\n\r\nfunction UpdateUserModal({ modalDialog }) {\r\n  const dispatch = useAppDispatch()\r\n  const { addToast } = useToasts()\r\n  const { register, handleSubmit } = useForm()\r\n  const { userUpdate, updateMess, updateSuccess } = useSelector(usersSelector)\r\n  const { handleClose } = modalDialog\r\n  const onSubmit = (data) => {\r\n    dispatch(updateUser({ id: userUpdate.User_Id, data }))\r\n    if (updateSuccess) {\r\n      addToast(updateMess, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n    }\r\n    handleClose()\r\n  }\r\n  return (\r\n    <>\r\n      <DialogModal\r\n        title=\"Details\"\r\n        modalDialog={modalDialog}\r\n        // handleSubmit={handleSubmit(onSubmit)}\r\n      >\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <DialogContent dividers className=\"mx-12\">\r\n            <FormInput\r\n              type=\"text\"\r\n              r={register}\r\n              name=\"User_Full_Name\"\r\n              label={'Name'}\r\n              value={userUpdate.User_Full_Name}\r\n              required\r\n            />\r\n            <FormInput\r\n              r={register}\r\n              name=\"User_Password\"\r\n              label={'Password (Để trống nếu không thay đổi)'}\r\n            />\r\n            <div className=\"grid grid-cols-1 my-4\">\r\n              <label className=\"uppercase md:text-sm text-xs text-gray-500 text-light\">\r\n                Global Role\r\n              </label>\r\n              <select\r\n                className=\"py-2 px-3 rounded-md border border-purple-500 mt-2 focus:outline-none focus:ring-1 focus:ring-purple-700 focus:border-transparent\"\r\n                {...register('globalrole')}\r\n              >\r\n                <option value=\"0\">Admin</option>\r\n                <option value=\"1\">Trusted</option>\r\n                <option value=\"2\">Member</option>\r\n              </select>\r\n            </div>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <div className=\"hidden sm:block m-2\">\r\n              <Button layout=\"outline\" onClick={handleClose}>\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n            <div className=\"hidden sm:block m-2\">\r\n              <Button type=\"submit\" color=\"primary\">\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </DialogActions>\r\n        </form>\r\n      </DialogModal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UpdateUserModal\r\n","import React from 'react'\r\n// import { Link } from 'react-router-dom'\r\nimport { useAppDispatch } from '../../store'\r\nimport {\r\n  usersSelector,\r\n  deleteUser,\r\n  setUserUpdate,\r\n  \r\n} from '../../slices/users'\r\nimport UpdateUserModal from './UpdateUserModal';\r\nimport { useSelector } from 'react-redux'\r\nimport { TableCell, TableRow, Button, Badge } from '@windmill/react-ui'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport {\r\n  orange,\r\n  purple,\r\n  red,\r\n  blue,\r\n  lime,\r\n  blueGrey,\r\n} from '@material-ui/core/colors'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { EditIcon, TrashIcon } from '../../icons'\r\nimport { useToasts } from 'react-toast-notifications'\r\n\r\n//list colour\r\nconst colours = [\r\n  blue[800],\r\n  orange[500],\r\n  purple[800],\r\n  red[800],\r\n  lime[500],\r\n  blueGrey[800],\r\n]\r\n//random color\r\nconst getColour = () => colours[Math.floor(Math.random() * colours.length)]\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  backgroundColor: {\r\n    color: '#fff',\r\n    backgroundColor: getColour(),\r\n  },\r\n}))\r\n\r\nconst UserItem = ({ user }) => {\r\n  const dispatch = useAppDispatch()\r\n  const {  updateMess, updateSuccess } = useSelector(usersSelector)\r\n  const { addToast } = useToasts()\r\n\r\n  //delete user from list user\r\n  function deleteConfirm(e, userId) {\r\n    e.preventDefault()\r\n    if (confirm('Delete?')) {\r\n      dispatch(deleteUser(userId))\r\n    }\r\n  }\r\n  //update user\r\n  const [openUpdate, setOpenUpdate] = React.useState(false)\r\n  const handleOpenUpdate = (e, user) => {\r\n    e.preventDefault()\r\n    dispatch(setUserUpdate(user))\r\n    setOpenUpdate(true)\r\n  }\r\n  const handleCloseUpdate = () => {\r\n    setOpenUpdate(false)\r\n  }\r\n  const modalUpdate = {\r\n    open: openUpdate,\r\n    handleOpen: handleOpenUpdate,\r\n    handleClose: handleCloseUpdate,\r\n  }\r\n  //load role\r\n  let globalrole\r\n  if (user.Is_Admin == '0' || user.globalrole == '0') {\r\n    globalrole = 'Admin'\r\n  }\r\n  if (user.Is_Admin == '1' || user.globalrole == '1') {\r\n    globalrole = 'Trusted'\r\n  }\r\n  if (user.Is_Admin == '2' || user.globalrole == '2') {\r\n    globalrole = 'Member'\r\n  }\r\n\r\n  ////get avatar user\r\n  const classes = useStyles()\r\n  const Ava = () => {\r\n      let result = []\r\n      user.User_Name.split('').forEach((letter) => {\r\n        result.push(letter)\r\n      })\r\n      return <Avatar className={classes.backgroundColor}>{result[0]}</Avatar>\r\n    }\r\n  \r\n\r\n  return (\r\n    <>\r\n      <UpdateUserModal modalDialog={modalUpdate} />\r\n      <TableRow key={user.User_Id}>\r\n        <TableCell>\r\n          <div className=\"flex items-center\">\r\n            <div >{Ava()}</div>\r\n            <div className=\"ml-3\">\r\n              <p >\r\n                {user.User_Full_Name}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </TableCell>\r\n        <TableCell>\r\n          <span>{user.User_Name}</span>\r\n        </TableCell>\r\n        <TableCell>\r\n          <span>{user.User_Email}</span>\r\n        </TableCell>\r\n        <TableCell>\r\n          <span>{globalrole}</span>\r\n        </TableCell>\r\n        <TableCell>\r\n          <Badge\r\n            className=\"hover:bg-green-200 cursor-pointer\"\r\n            type={'success'}\r\n            onClick={(e) => handleOpenUpdate(e, user)}\r\n          >\r\n            Edit\r\n          </Badge>\r\n          <Badge\r\n            className=\"ml-1 hover:bg-red-200 cursor-pointer\"\r\n            type={'danger'}\r\n            onClick={(e) => deleteConfirm(e, user.User_Id)}\r\n          >\r\n            Delete\r\n          </Badge>\r\n\r\n          {/* <Badge className=\"relative inline-block px-3 py-1 font-semibold text-green-900 leading-tight\">\r\n            <Badge\r\n              aria-hidden\r\n              className=\"absolute inset-0 bg-green-200 opacity-50 rounded-full\"\r\n            />\r\n            <a\r\n              onClick={(e) => handleOpenUpdate(e, user)}\r\n              className=\"relative cursor-pointer\"\r\n            >\r\n              Edit\r\n            </a>\r\n          </Badge>\r\n          <Badge className=\"relative inline-block px-3 py-1 ml-1.5 font-semibold text-green-900 leading-tight\">\r\n            <Badge\r\n              aria-hidden\r\n              className=\"absolute inset-0 bg-red-400 opacity-50 rounded-full\"\r\n            />\r\n            <a\r\n              onClick={(e) => deleteConfirm(e, user.User_Id)}\r\n              className=\"relative cursor-pointer text-red-900\"\r\n            >\r\n              Delete\r\n            </a>\r\n          </Badge> */}\r\n        </TableCell>\r\n      </TableRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserItem\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { fetchUsers, usersSelector, setState } from '../slices/users'\r\nimport { Link } from 'react-router-dom'\r\nimport UserItem from '../components/User/UserItem'\r\nimport { useAppDispatch } from '../store'\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableBody,\r\n  TableRow,\r\n  TableFooter,\r\n  TableContainer,\r\n  Button,\r\n  Pagination,\r\n  Select\r\n} from '@windmill/react-ui'\r\nimport { useToasts } from 'react-toast-notifications'\r\n\r\nconst Users = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { addToast } = useToasts()\r\n\r\n  const { users, loading, hasErrors, updateMess, updateSuccess } =\r\n    useSelector(usersSelector)\r\n\r\n  //get data user\r\n  useEffect(() => {\r\n    dispatch(fetchUsers())\r\n  }, [dispatch])\r\n  //notification delete,update\r\n  useEffect(() => {\r\n    if (updateSuccess) {\r\n      addToast(updateMess, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setState())\r\n    }\r\n  }, [updateSuccess])\r\n\r\n  //search user\r\n  //setup search\r\n  const [searchTerm, setSearchTerm] = React.useState('')\r\n  const [searchResults, setSearchResults] = React.useState([])\r\n  //setup select \r\n  const [selectTerm, setSelectTerm] = React.useState('')\r\n  const handleChange = (e) => {\r\n    setSearchTerm(e.target.value)\r\n  }\r\n  const handleSelect = (e) =>{\r\n    setSelectTerm(e.target.value)\r\n  }\r\n  useEffect(() => {\r\n    const results = users.filter(\r\n      (person) =>\r\n        person.User_Name.toLowerCase().indexOf(searchTerm.toLowerCase()) !=\r\n          -1 ||\r\n        person.User_Email.toLowerCase().indexOf(searchTerm.toLowerCase()) !=\r\n          -1 ||\r\n        person.User_Full_Name.toLowerCase().indexOf(searchTerm.toLowerCase()) !=\r\n          -1\r\n    )\r\n    setSearchResults(results)\r\n  }, [searchTerm])\r\n  useEffect(() => {\r\n    const resultsSelect = users.filter(\r\n      (person) => person.Is_Admin == selectTerm\r\n    )\r\n    setSearchResults(resultsSelect)\r\n  }, [selectTerm])\r\n  //render user\r\n  const renderUsers = () => {\r\n    if (\r\n      (searchTerm == '' && selectTerm == 'All') ||\r\n      (searchTerm == '' && selectTerm == '')\r\n    ) {\r\n      return users.map((user) => <UserItem key={user.User_Id} user={user} />)\r\n    } else {\r\n      return searchResults.map((user) => (\r\n        <UserItem key={user.User_Id} user={user} />\r\n      ))\r\n    }\r\n  }\r\n  if (loading) {\r\n    return (\r\n      <tr>\r\n        <div className=\"loader\">Loading...</div>\r\n      </tr>\r\n    )\r\n  }\r\n  if (hasErrors) return <p>Unable to get Users.</p>\r\n  return (\r\n    <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n      <div className=\"py-8\">\r\n        <div>\r\n          <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">\r\n            Users Manager\r\n          </h1>\r\n        </div>\r\n        <div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n          <div className=\"flex flex-row mb-1 sm:mb-0\">\r\n            <div className=\"relative\">\r\n              <Select\r\n                value={selectTerm}\r\n                onChange={handleSelect}\r\n                className=\"appearance-none h-full rounded-r border-t sm:rounded-r-none sm:border-r-0 border-r border-b block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none focus:border-l focus:border-r focus:bg-white focus:border-gray-500\"\r\n              >\r\n                <option selected >All</option>\r\n                <option value=\"0\">User Admin</option>\r\n                <option value=\"1\">User Trusted</option>\r\n                <option value=\"2\">User Member</option>\r\n              </Select>\r\n            </div>\r\n            {/* Ô search */}\r\n            <div className=\"flex relative\">\r\n              <span className=\"h-full absolute inset-y-0 right-2 flex items-center pl-2\">\r\n                <svg\r\n                  viewBox=\"0 0 24 24\"\r\n                  className=\"h-4 w-4 fill-current text-gray-500\"\r\n                >\r\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\r\n                </svg>\r\n              </span>\r\n              <input\r\n                placeholder=\"Search\"\r\n                className=\"appearance-none rounded-r rounded-l sm:rounded-l-none border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\r\n                value={searchTerm}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex\">\r\n            <Link to=\"user-manager/create-user\">\r\n              <Button>Create User</Button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\r\n          <div className=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\r\n            <TableContainer className=\"mb-8\">\r\n              <Table className=\"min-w-full leading-normal\">\r\n                <TableHeader>\r\n                  <tr>\r\n                    <TableCell>Full name</TableCell>\r\n                    <TableCell>Username</TableCell>\r\n                    <TableCell>Email</TableCell>\r\n                    <TableCell>Role</TableCell>\r\n                    <TableCell>Action</TableCell>\r\n                  </tr>\r\n                </TableHeader>\r\n                <TableBody>{renderUsers()}</TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Users\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAppDispatch } from '../../store'\r\nimport { useSelector } from 'react-redux'\r\nimport axios from 'axios'\r\nimport {\r\n  fetchPermissionRoles,\r\n  permissionRolesSelector,\r\n} from '../../slices/per-role'\r\nimport { TableCell, TableRow, Button, Badge } from '@windmill/react-ui'\r\n\r\nimport { useHistory } from 'react-router-dom'\r\nimport { setPermissionUpdate } from '../../slices/permission'\r\nimport permissionApi from '../../api/permissionApi'\r\nconst PermissionItem = ({ permission }) => {\r\n  const dispatch = useAppDispatch()\r\n  const history = useHistory()\r\n\r\n  const [permissionroles_temp, setResult] = useState([])\r\n  useEffect(() => {\r\n    if (permission) {\r\n      permissionApi.getPrmissionRole(permission.Permission_Id).then((data) => {\r\n        setResult(data.Data)\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  //get permission to detail\r\n  const handleOpenUpdate = (e, permission) => {\r\n    e.preventDefault()\r\n    dispatch(setPermissionUpdate(permission))\r\n    history.push('permission-manager/detail-permission')\r\n  }\r\n\r\n  const renderPermissionRole = () => {\r\n    if (permissionroles_temp != null) {\r\n      return permissionroles_temp.map((temp) => (\r\n        <li key={temp.RoleId}>{temp.RoleName}</li>\r\n      ))\r\n    } else {\r\n      return <li></li>\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      {/* <RoleModal modalDialog={modalUpdate} /> */}\r\n      <TableRow key={permission.Permission_Id}>\r\n        <TableCell>\r\n          <span>{permission.Permission_Name}</span>\r\n        </TableCell>\r\n        <TableCell>\r\n          <span>{permission.Permission_Description}</span>\r\n        </TableCell>\r\n        <TableCell>\r\n          <ul>{renderPermissionRole()}</ul>\r\n        </TableCell>\r\n\r\n        <TableCell >\r\n          {/* <span className=\"relative inline-block px-3 py-1 font-semibold text-green-900 leading-tight\">\r\n            <span\r\n              aria-hidden\r\n              className=\"absolute inset-0 bg-green-200 opacity-50 rounded-full\"\r\n            />\r\n            <a\r\n              onClick={(e) => handleOpenUpdate(e, permission)}\r\n              className=\"relative cursor-pointer\"\r\n            >\r\n              Edit\r\n            </a>\r\n          </span> */}\r\n          <Badge\r\n            className=\"hover:bg-green-200 cursor-pointer\"\r\n            type={'success'}\r\n            onClick={(e) => handleOpenUpdate(e, permission)}\r\n          >\r\n            Edit\r\n          </Badge>\r\n        </TableCell>\r\n      </TableRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PermissionItem\r\n","import React, { useEffect } from 'react'\r\nimport { fetchPermissions, permissionsSelector } from '../slices/permission'\r\nimport {\r\n  fetchPermissionRoles,\r\n  permissionRolesSelector,\r\n} from '../slices/per-role'\r\nimport { useAppDispatch } from '../store'\r\nimport { useSelector } from 'react-redux'\r\nimport PermissionItem from '../components/Permission/PermissionItem'\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableBody,\r\n  TableRow,\r\n  TableFooter,\r\n  TableContainer,\r\n  Button,\r\n  Pagination,\r\n} from '@windmill/react-ui'\r\nconst PermissionManager = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { permissions, loading, hasErrors } = useSelector(permissionsSelector)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPermissions())\r\n  }, [dispatch])\r\n\r\n  const renderPermission = () => {\r\n    return permissions.map((permission) => (\r\n      <PermissionItem key={permission.Permission_Id} permission={permission} />\r\n    ))\r\n  }\r\n  if (loading) {\r\n    return (\r\n      <tr>\r\n        <div className=\"loader\">Loading...</div>\r\n      </tr>\r\n    )\r\n  }\r\n  if (hasErrors) return <p>Unable to get Permission.</p>\r\n  return (\r\n    <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n      <div className=\"py-8\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-semibold leading-tight\">Permission</h2>\r\n        </div>\r\n        <div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n          <div className=\"flex\"></div>\r\n        </div>\r\n        <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\r\n          <div className=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\r\n            <TableContainer className=\"mb-8\">\r\n              <Table className=\"min-w-full leading-normal\">\r\n                <TableHeader>\r\n                  <tr>\r\n                    <TableCell>Name Permission</TableCell>\r\n                    <TableCell>Description</TableCell>\r\n                    <TableCell>Grant to</TableCell>\r\n                    <TableCell>Action</TableCell>\r\n                  </tr>\r\n                </TableHeader>\r\n                <TableBody>{renderPermission()}</TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default PermissionManager\r\n","import React from 'react'\r\nimport { useAppDispatch } from '../../store'\r\nimport { deleteRoleInPermission } from '../../slices/per-role'\r\nimport { TableCell, TableRow, Badge } from '@windmill/react-ui'\r\n\r\nexport default function PermissionRoleItem({ permission_role }) {\r\n\r\n  const dispatch = useAppDispatch()\r\n\r\n  function deleteConfirm(e, PermissionId, RoleId) {\r\n    e.preventDefault()\r\n    if (confirm('Delete?')) {\r\n      dispatch(deleteRoleInPermission(PermissionId,RoleId))\r\n    }\r\n  }\r\n\r\n\r\n  \r\n  return (\r\n    <>\r\n      {/* <RoleModal modalDialog={modalUpdate} /> */}\r\n      <TableRow>\r\n        <TableCell>\r\n          <span>{permission_role.RoleName}</span>\r\n        </TableCell>\r\n        <TableCell>\r\n          <Badge\r\n            className=\"ml-1 hover:bg-red-200 cursor-pointer\"\r\n            type={'danger'}\r\n            onClick={(e) =>\r\n              deleteConfirm(\r\n                e,\r\n                permission_role.PermissionId,\r\n                permission_role.RoleId\r\n              )\r\n            }\r\n          >\r\n            Delete\r\n          </Badge>\r\n        </TableCell>\r\n      </TableRow>\r\n    </>\r\n  )\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport React from 'react';\r\n\r\n// class FormInput extends Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   //Chá»‰ Ä‘á»‹nh má»™t state\r\n  //   // this.state = { data: \"\" }\r\n  // }\r\n\r\n  // onChangeVal = (event) => {\r\n  //   // this.setState({data:event.target.value}, () => console.log(this.state.data))\r\n  //   this.setState({data:event.target.value})\r\n  //   // console.log(this.state.data)\r\n  // }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div className=\"mb-5 w-full relative z-0\">\r\n//         <input className=\"pt-3 pb-2 block w-full px-0 mt-0 bg-transparent border-0 \r\n//       border-b-2 appearance-none focus:outline-none focus:ring-0 focus:border-black border-gray-200\"\r\n//           type={this.props.type} onChange={this.props.onChangeVal} placeholder=\" \" required />\r\n//         <label htmlFor=\"name\" className=\"absolute duration-300 \r\n//       top-3 origin-0 text-gray-500 -z-1\">{this.props.text}</label>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\nconst FormInput = ({r, name, label, required, type, value}) => (\r\n  <div className=\"mb-5 w-full relative z-0\">\r\n    <input className=\"pt-3 pb-2 block w-full px-0 mt-0 bg-transparent border-0 \r\n    border-b-2 appearance-none focus:outline-none focus:ring-0 focus:border-green-800 border-gray-200\" \r\n    type={type}\r\n    defaultValue={value}\r\n    placeholder=\" \" {...r(name, { required })}/>\r\n    <label htmlFor=\"name\" className=\"absolute duration-300 \r\n    top-3 origin-0 text-gray-500 -z-1\">{label}</label>\r\n  </div>\r\n);\r\n\r\nFormInput.displayName = 'FormInput'\r\n\r\nexport default FormInput","import React, { useEffect } from 'react'\r\nimport DialogModal from '../DialogModal'\r\nimport { DialogActions, DialogContent } from '../DialogModal'\r\nimport FormInput from '../Form/FormInput'\r\nimport { Button } from '@windmill/react-ui'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useAppDispatch } from '../../store'\r\nimport { AddRoleToPermission } from '../../slices/per-role'\r\nimport { fetchRoles, rolesSelector } from '../../slices/roles'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport default function UpdateRolePermission({ modalDialog }) {\r\n  const { handleClose, fulldata, data_permission } = modalDialog\r\n  const dispatch = useAppDispatch()\r\n\r\n  const { register, handleSubmit } = useForm()\r\n  const { roles, loading, hasErrors } = useSelector(rolesSelector)\r\n  useEffect(() => {\r\n    dispatch(fetchRoles())\r\n  }, [dispatch])\r\n\r\n  const onSubmit = (data) => {\r\n    let role_name\r\n    roles.map((temp) => {\r\n      if (temp.Role_Id == data.idrole) {\r\n        role_name = temp.Role_Name\r\n      }\r\n    })\r\n    //data gửi qua slice\r\n    const postdata = {\r\n      idpermission: data_permission.Permission_Id.toString(), //props\r\n      idrole: data.idrole,\r\n      RoleName: role_name,\r\n      RoleId: data.idrole,\r\n      PermissionId: data_permission.Permission_Id.toString(),\r\n    }\r\n    dispatch(AddRoleToPermission(postdata))\r\n    handleClose()\r\n  }\r\n  //filter role which permission don't aleardy\r\n\r\n   \r\n   const temp = roles.filter(\r\n     (item1) => !fulldata.some((item2) => item1.Role_Id === item2.RoleId)\r\n   )\r\n  var options = temp.map((option) => {\r\n    return (\r\n      <option key={option.Role_Id} value={option.Role_Id}>\r\n        {option.Role_Name}\r\n      </option>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <DialogModal\r\n        title=\"Grant Permission\"\r\n        modalDialog={modalDialog}\r\n        // handleSubmit={handleSubmit(onSubmit)}\r\n      >\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <DialogContent dividers className=\"mx-12\">\r\n            <div className=\"grid grid-cols-1 my-4\">\r\n              <label className=\"uppercase md:text-sm text-xs text-gray-500 text-light\">\r\n                Project Role\r\n              </label>\r\n              <select\r\n                className=\"py-2 px-3 rounded-md border border-purple-500 mt-2 focus:outline-none focus:ring-1 focus:ring-purple-700 focus:border-transparent\"\r\n                {...register('idrole')}\r\n              >\r\n                {options}\r\n              </select>\r\n            </div>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <div className=\"hidden sm:block m-2\">\r\n              <Button layout=\"outline\" onClick={handleClose}>\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n            <div className=\"hidden sm:block m-2\">\r\n              <Button type=\"submit\" color=\"primary\">\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </DialogActions>\r\n        </form>\r\n      </DialogModal>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport DialogModal from '../DialogModal'\r\nimport FormInput from '../Form/FormInputNew'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from '../../store'\r\nimport { rolesSelector,updateRole } from '../../slices/roles'\r\nimport { DialogActions, DialogContent } from '../DialogModal'\r\nimport { Button } from '@windmill/react-ui'\r\n\r\nfunction UpdateRoleModal({ modalDialog }) {\r\n\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { register, handleSubmit } = useForm()\r\n  const { roleUpdate } = useSelector(rolesSelector)\r\n\r\n  const { handleClose } = modalDialog\r\n  const onSubmit = (data) => {\r\n    dispatch(updateRole({ id: roleUpdate.Role_Id, data }))\r\n    handleClose()\r\n  }\r\n  return (\r\n    <>\r\n      <DialogModal\r\n        title=\"Role\"\r\n        modalDialog={modalDialog}\r\n        handleSubmit={handleSubmit(onSubmit)}\r\n      >\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <DialogContent dividers className=\"mx-12\">\r\n            <FormInput\r\n              r={register}\r\n              name=\"rolenamesub\"\r\n              label={'Role Name'}\r\n              value={roleUpdate.Role_Name}\r\n              required\r\n            />\r\n            <FormInput\r\n              r={register}\r\n              name=\"roledescription\"\r\n              label={'Description'}\r\n              value={roleUpdate.Role_Description}\r\n              placeholder=\"Type ...\"\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <div className=\"hidden sm:block m-2\">\r\n              <Button layout=\"outline\" onClick={handleClose}>\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n            <div className=\"hidden sm:block m-2\">\r\n              <Button type=\"submit\" color=\"primary\">\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </DialogActions>\r\n        </form>\r\n      </DialogModal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UpdateRoleModal\r\n","import React, { useEffect, useCallback } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAppDispatch } from '../../store'\r\nimport {\r\n  deleteRole,\r\n  setRoleUpdate,\r\n} from '../../slices/roles'\r\nimport RoleModal from './UpdateRoleModal';\r\nimport { TableCell, TableRow, Badge } from '@windmill/react-ui'\r\n\r\n\r\nconst RoleItem = ({ role }) => {\r\n  const dispatch = useAppDispatch()\r\n  const deleteConfirm = ((e, roleId) => {\r\n      e.preventDefault()\r\n      if (confirm('Delete?')) {\r\n        dispatch(deleteRole(roleId)) \r\n      }\r\n    }\r\n  )\r\n   \r\n  \r\n  const [openUpdate, setOpenUpdate] = React.useState(false)\r\n\r\n  const handleOpenUpdate = (e, role) => {\r\n    e.preventDefault()\r\n    dispatch(setRoleUpdate(role))\r\n    setOpenUpdate(true)\r\n  }\r\n  const handleCloseUpdate = () => {\r\n    setOpenUpdate(false)\r\n  }\r\n  const modalUpdate = {\r\n    open: openUpdate,\r\n    handleOpen: handleOpenUpdate,\r\n    handleClose: handleCloseUpdate,\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <RoleModal modalDialog={modalUpdate} />\r\n      <TableRow key={role.Role_Id}>\r\n        <TableCell>\r\n          <span>{role.Role_Name || role.rolenamesub}</span>\r\n        </TableCell>\r\n        <TableCell>\r\n          <span>{role.Role_Description || role.roledescription}</span>\r\n        </TableCell>\r\n\r\n        <TableCell>\r\n          <Badge\r\n            className=\"hover:bg-green-200 cursor-pointer\"\r\n            type={'success'}\r\n            onClick={(e) => handleOpenUpdate(e, role)}\r\n          >\r\n            Edit\r\n          </Badge>\r\n          {/* <span className=\"relative inline-block px-3 py-1 font-semibold text-green-900 leading-tight\">\r\n            <span\r\n              aria-hidden\r\n              className=\"absolute inset-0 bg-green-200 opacity-50 rounded-full\"\r\n            />\r\n            <a\r\n              onClick={(e) => handleOpenUpdate(e, role)}\r\n              className=\"relative cursor-pointer\"\r\n            >\r\n              Edit\r\n            </a>\r\n          </span> */}\r\n          <Badge\r\n            className=\"ml-1 hover:bg-red-200 cursor-pointer\"\r\n            type={'danger'}\r\n            onClick={(e) => deleteConfirm(e, role.Role_Id)}\r\n          >\r\n            Delete\r\n          </Badge>\r\n          {/* <span className=\"relative inline-block px-3 ml-1.5 py-1 font-semibold text-green-900 leading-tight\">\r\n            <span\r\n              aria-hidden\r\n              className=\"absolute inset-0 bg-red-400 opacity-50 rounded-full\"\r\n            />\r\n            <a\r\n              onClick={(e) => deleteConfirm(e, role.Role_Id)}\r\n              className=\"relative cursor-pointer text-red-900\"\r\n            >\r\n              Delete\r\n            </a>\r\n          </span> */}\r\n        </TableCell>\r\n      </TableRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RoleItem\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { fetchRoles, rolesSelector, setState } from '../slices/roles'\r\nimport { Link } from 'react-router-dom'\r\nimport RoleItem from '../components/Role/RoleItem'\r\nimport { useAppDispatch } from '../store'\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableBody,\r\n  TableRow,\r\n  TableFooter,\r\n  TableContainer,\r\n  Button,\r\n  Pagination,\r\n} from '@windmill/react-ui'\r\nimport { useToasts } from 'react-toast-notifications'\r\n\r\nconst Roles = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { addToast } = useToasts()\r\n  //roles\r\n  const { updateMess, updateSuccess, roles, loading, hasErrors } =\r\n    useSelector(rolesSelector)\r\n  useEffect(() => {\r\n    dispatch(fetchRoles())\r\n  }, [dispatch])\r\n  //notification delete,update\r\n  useEffect(() => {\r\n    if (updateSuccess) {\r\n      addToast(updateMess, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setState())\r\n    }\r\n  }, [updateSuccess])\r\n  //search role\r\n  //setup search\r\n  const [searchTerm, setSearchTerm] = React.useState('')\r\n  const [searchResults, setSearchResults] = React.useState([])\r\n  const handleChange = (e) => {\r\n    setSearchTerm(e.target.value)\r\n  }\r\n  useEffect(() => {\r\n    const results = roles.filter(\r\n      (role) =>\r\n        role.Role_Name.toLowerCase().indexOf(searchTerm.toLowerCase()) != -1\r\n    )\r\n    setSearchResults(results)\r\n  }, [searchTerm])\r\n  //render roles\r\n  const renderRole = () => {\r\n    if (searchTerm == '') { //get full data\r\n      return roles.map((role) => <RoleItem key={role.Role_Id} role={role} />)\r\n    } else {//after using search \r\n      return searchResults.map((role) => (\r\n        <RoleItem key={role.Role_Id} role={role} />\r\n      ))\r\n    }\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <tr>\r\n        <div className=\"loader\">Loading...</div>\r\n      </tr>\r\n    )\r\n  }\r\n  if (hasErrors) return <p>Unable to get Roles.</p>\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n      <div className=\"py-8\">\r\n        <div>\r\n          <div>\r\n            <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">\r\n              Project Role\r\n            </h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n          <div className=\"flex flex-row mb-1 sm:mb-0\">\r\n        \r\n            {/* Ô search */}\r\n            <div className=\"flex relative\">\r\n              <span className=\"h-full absolute inset-y-0 right-2 flex items-center pl-2\">\r\n                <svg\r\n                  viewBox=\"0 0 24 24\"\r\n                  className=\"h-4 w-4 fill-current text-gray-500\"\r\n                >\r\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\r\n                </svg>\r\n              </span>\r\n              <input\r\n                placeholder=\"Search\"\r\n                className=\"appearance-none rounded-r rounded-l sm:rounded-l-none border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\r\n                value={searchTerm}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex flex-row mb-1 sm:mb-0\"></div>\r\n          <div className=\"flex\">\r\n            <Link to=\"role-manager/create-role\">\r\n              <Button>Create role</Button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\r\n          <div className=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\r\n            <TableContainer className=\"mb-8\">\r\n              <Table className=\"min-w-full leading-normal\">\r\n                <TableHeader>\r\n                  <tr>\r\n                    <TableCell >\r\n                      Role Name\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      Description\r\n                    </TableCell>\r\n                    <TableCell >\r\n                      Action\r\n                    </TableCell>\r\n                  </tr>\r\n                </TableHeader>\r\n                <TableBody>{renderRole()}</TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Roles\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useAppDispatch } from '../../store'\r\nimport { deleteUser, setRoleUpdate } from '../../slices/pro-user-role'\r\nimport { fetchRoles, rolesSelector } from '../../slices/roles'\r\nimport { useSelector } from 'react-redux'\r\nimport ProjectUserRoleApi from '../../api/pro-user-roleApi'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport {\r\n  orange,\r\n  purple,\r\n  red,\r\n  blue,\r\n  lime,\r\n  blueGrey,\r\n} from '@material-ui/core/colors'\r\nimport { TableCell, TableRow, Button } from '@windmill/react-ui'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport { Select } from '@windmill/react-ui'\r\n\r\n//list colour\r\nconst colours = [\r\n  blue[800],\r\n  orange[500],\r\n  purple[800],\r\n  red[800],\r\n  lime[500],\r\n  blueGrey[800],\r\n]\r\n//random color\r\nconst getColour = () => colours[Math.floor(Math.random() * colours.length)]\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  backgroundColor: {\r\n    color: '#fff',\r\n    backgroundColor: getColour(),\r\n  },\r\n}))\r\nexport default function ProjectUserItems({ dataItem, projectkey }) {\r\n  const dispatch = useAppDispatch()\r\n  const { addToast } = useToasts()\r\n\r\n  //delete user project\r\n  function deleteConfirm(e, userId) {\r\n    let dataDelete = {\r\n      UserId: userId,\r\n      ProjectKey: projectkey,\r\n    }\r\n    e.preventDefault()\r\n    if (confirm('Delete?')) {\r\n      dispatch(deleteUser(dataDelete))\r\n    }\r\n  }\r\n  const [roleId, setroleId] = useState(dataItem.RoleId)\r\n  //load role\r\n  const { roles, loading, hasErrors } = useSelector(rolesSelector)\r\n  useEffect(() => {\r\n    dispatch(fetchRoles())\r\n  }, [dispatch])\r\n  //render role\r\n  var options = roles.map((option) => {\r\n    return (\r\n      <option key={option.Role_Id} value={option.Role_Id}>\r\n        {option.Role_Name}\r\n      </option>\r\n    )\r\n  })\r\n  //update role for user\r\n  const handleChange = (e) => {\r\n    setroleId(e.target.value)\r\n    let data = {\r\n      projectKey: projectkey,\r\n      userId: dataItem.UserId.toString(),\r\n      roleIdNew: e.target.value,\r\n    }\r\n    ProjectUserRoleApi.updateRoleUserInProject(data)\r\n      .then((res) => {\r\n        addToast(res.Msg, {\r\n          appearance: 'success',\r\n          autoDismiss: true,\r\n        })\r\n        \r\n      })\r\n      .catch((err) => {\r\n         addToast(err.response.data.Msg, {\r\n           appearance: 'error',\r\n           autoDismiss: true,\r\n         })\r\n      })\r\n  }\r\n\r\n  ////get avatar user\r\n  const classes = useStyles()\r\n  const Ava = () => {\r\n    let result = []\r\n    dataItem.UserName.split('').forEach((letter) => {\r\n      result.push(letter)\r\n    })\r\n    return <Avatar className={classes.backgroundColor}>{result[0]}</Avatar>\r\n  }\r\n  return (\r\n    <>\r\n      {/* <UpdateUserModal modalDialog={modalUpdate} /> */}\r\n      <TableRow key={dataItem.UserId}>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"flex-shrink-0 w-10 h-10\">{Ava()}</div>\r\n            <div className=\"ml-3\">\r\n              <p className=\"text-gray-900 whitespace-no-wrap\">\r\n                {dataItem.UserName}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </TableCell>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          <p className=\"text-gray-900 whitespace-no-wrap\">\r\n            {dataItem.UserMail}\r\n          </p>\r\n        </TableCell>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          <p className=\"text-gray-900 whitespace-no-wrap\">\r\n            <Select\r\n              className=\"py-2 px-3 rounded-md border border-purple-500 mt-1\"\r\n              value={roleId}\r\n              onChange={handleChange}\r\n            >\r\n              {options}\r\n            </Select>\r\n          </p>\r\n        </TableCell>\r\n        <td className=\"px-5 py-5 border-b text-center border-gray-200 bg-white text-sm\">\r\n          <span className=\"relative inline-block px-3 py-1 ml-1.5 font-semibold text-green-900 leading-tight\">\r\n            <span\r\n              aria-hidden\r\n              className=\"absolute inset-0 bg-red-400 opacity-50 rounded-full\"\r\n            />\r\n            <a\r\n              onClick={(e) => deleteConfirm(e, dataItem.UserId)}\r\n              className=\"relative cursor-pointer text-red-900\"\r\n            >\r\n              Delete\r\n            </a>\r\n          </span>\r\n        </td>\r\n      </TableRow>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport DialogModal from '../DialogModal'\r\nimport { DialogActions, DialogContent } from '../DialogModal'\r\nimport { Button } from '@windmill/react-ui'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useAppDispatch } from '../../store'\r\nimport { AddUserToProject } from '../../slices/pro-user-role'\r\nimport { fetchRoles, rolesSelector } from '../../slices/roles'\r\nimport { fetchUsers, usersSelector } from '../../slices/users'\r\nimport { useSelector } from 'react-redux'\r\nimport FormInput from '../Form/FormInput'\r\nimport React_Select from 'react-select'\r\nimport {  Select } from '@windmill/react-ui'\r\n\r\nexport default function AddUserProject({ modalDialog }) {\r\n  const { handleClose, projectkey, listUser } = modalDialog\r\n  const { register, handleSubmit } = useForm()\r\n  const dispatch = useAppDispatch()\r\n  //load user\r\n  const { users } = useSelector(usersSelector)\r\n  useEffect(() => {\r\n    dispatch(fetchUsers())\r\n  }, [dispatch])\r\n  const temp = users.filter(\r\n    (item1) => !listUser.some((item2) => item1.User_Id === item2.UserId)\r\n  )\r\n  //options user\r\n  const options_user = temp.map((user) => ({\r\n    value: user.User_Id,\r\n    label: user.User_Name,\r\n  }))\r\n\r\n  //load role\r\n  const { roles } = useSelector(rolesSelector)\r\n  useEffect(() => {\r\n    dispatch(fetchRoles())\r\n  }, [dispatch])\r\n  //options role\r\n  const options_role = roles.map((option) => ({\r\n    value: option.Role_Id,\r\n    label: option.Role_Name,\r\n  }))\r\n  var options = roles.map((option) => {\r\n    return (\r\n      <option key={option.Role_Id} value={option.Role_Id}>\r\n        {option.Role_Name}\r\n      </option>\r\n    )\r\n  })\r\n  \r\n  //arr user selected\r\n  const [arrUser, setarrUser] = useState([])\r\n  const onchangeSelect = (item) => {\r\n    setarrUser(item)\r\n  }\r\n  //submit\r\n  const onSubmit = (data) => {\r\n    let role_name\r\n    roles.map((temp) => {\r\n      if (temp.Role_Id == data.idrole) {\r\n        role_name = temp.Role_Name\r\n      }\r\n    })\r\n    arrUser.map((user) => {\r\n      const postdata = {\r\n        userId: user.value.toString(),\r\n        roleId: data.idrole,\r\n        projectKey: projectkey,\r\n        RoleName: role_name,\r\n      }\r\n      dispatch(AddUserToProject(postdata))\r\n    })\r\n    handleClose()\r\n  }\r\n  return (\r\n    <>\r\n      <DialogModal\r\n        title=\"Grant Permission\"\r\n        modalDialog={modalDialog}\r\n        // handleSubmit={handleSubmit(onSubmit)}\r\n      >\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <DialogContent dividers className=\"mx-12\">\r\n            <div className=\"grid grid-cols-1 my-4\">\r\n              <label className=\"uppercase md:text-sm text-xs text-gray-500 text-light\">\r\n                Name\r\n              </label>\r\n              <React_Select\r\n                components={{\r\n                  IndicatorSeparator: () => null,\r\n                }}\r\n                isMulti\r\n                name=\"userId\"\r\n                options={options_user}\r\n                onChange={onchangeSelect}\r\n                className=\"py-2 px-3 rounded-md border border-purple-500 mt-1 \"\r\n                styles={{\r\n                  dropdownIndicator: (base) => ({\r\n                    ...base,\r\n                    padding: 0,\r\n                    // Custom colour\r\n                  }),\r\n                  control: (provided, state) => ({\r\n                    ...provided,\r\n                    boxShadow: 'none',\r\n                    border: 'none',\r\n                  }),\r\n                  menuPortal: (styles) => ({ ...styles, zIndex: 1000 }),\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"grid grid-cols-1 my-4\">\r\n              <label className=\"mt-4\">\r\n                <span> Project Role</span>\r\n              </label>\r\n              <Select\r\n                className=\"py-2 px-3 rounded-md border border-purple-500 mt-1\"\r\n                {...register('idrole')}\r\n              >\r\n                {options}\r\n              </Select>\r\n            </div>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <div className=\"hidden sm:block m-2\">\r\n              <Button layout=\"outline\" onClick={handleClose}>\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n            <div className=\"hidden sm:block m-2\">\r\n              <Button type=\"submit\" color=\"primary\">\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </DialogActions>\r\n        </form>\r\n      </DialogModal>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAppDispatch } from '../../store'\r\nimport { useSelector } from 'react-redux'\r\nimport axios from 'axios'\r\nimport {\r\n  fetchTransitionStatuss,\r\n  transitionStatussSelector,\r\n} from '../../slices/tra-sta'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { setTransitionUpdate } from '../../slices/transition'\r\nimport transitionApi from '../../api/transitionApi'\r\nimport { deleteTransition } from '../../slices/transition'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport { TableCell, TableRow, Button,Table, ModalHeader, ModalBody,ModalFooter,Modal,Badge } from '@windmill/react-ui'\r\n\r\nconst TransitionItem = ({ transition }) => {\r\n  const {addToast} = useToasts()\r\n  const dispatch = useAppDispatch()\r\n  const history = useHistory()\r\n\r\n  const [transitionstatuss_temp, setResult] = useState([])\r\n  useEffect(() => {\r\n    if (transition) {\r\n      // transitionApi.getTransitionStatus(transition.TransitionId).then((data) => {\r\n      //   console.log(data.Data)\r\n      //   setResult(data.Data)\r\n      axios({\r\n        method: 'get',\r\n        url: 'http://localhost:5001/api/transition/transition-status?id=' + transition.TransitionId,\r\n        responseType: 'stream'\r\n      })\r\n        .then(function (response) {\r\n          console.log(response)\r\n          setResult(response.data.Data)\r\n        });\r\n      \r\n    }\r\n  }, [])\r\n\r\n  //get transition to detail\r\n  const handleOpenUpdate = (e, transition) => {\r\n    e.preventDefault()\r\n    dispatch(setTransitionUpdate(transition))\r\n    history.push('/app/workflows-manager/transitions-manager/create-transitions')\r\n  }\r\n  const handleOpenTransition = (e, transition) => {\r\n    e.preventDefault()\r\n    \r\n    history.goBack()\r\n  }\r\n\r\n  const renderTransitionStatus = () => {\r\n    if (transitionstatuss_temp != null) {\r\n      console.log(transitionstatuss_temp)\r\n      return transitionstatuss_temp.map((temp) => (\r\n        <li key={temp.StatusId}>{temp.StatusName}</li>\r\n      ))\r\n    } else {\r\n      return <li></li>\r\n    }\r\n  }\r\n  \r\n  const [isModalOpen, setIsModalOpen, deleteP] = useState(false)\r\n\r\n  function openModal() {\r\n    setIsModalOpen(true)\r\n  }\r\n \r\n\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  function deleteConfirm(e, TransitionId) {\r\n    e.preventDefault()\r\n    \r\n      dispatch(deleteTransition(TransitionId))\r\n      addToast(\"Delete Transition Success\", {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n    \r\n  }\r\n  return (\r\n    <>\r\n      {/* <StatusModal modalDialog={modalUpdate} /> */}\r\n      <TableRow key={transition.TransitionId}>\r\n        <td className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"ml-3\">\r\n              <p className=\"text-gray-900 whitespace-no-wrap\">\r\n                <Link to=\"#\">\r\n                  <a className=\"text-black-400 whitespace-no-wrap\">\r\n                    {transition.TransitionName} \r\n                    \r\n                  </a>\r\n                  <a className=\"text-red-400 whitespace-no-wrap\">\r\n                    ({transition.TransitionId})\r\n                    \r\n                  </a>\r\n                </Link>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </td>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          \r\n          <span>{transition.Status1Name}</span>\r\n        </TableCell>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          \r\n          <span>{transition.Status2Name}</span>\r\n        </TableCell>\r\n        \r\n\r\n        <TableCell className=\"px-5 py-5 text-center border-b border-gray-200 bg-white text-sm\">\r\n          {/* <span className=\"relative inline-block px-3 py-1 font-semibold text-green-900 leading-tight\">\r\n            <span\r\n              aria-hidden\r\n              className=\"absolute inset-0 bg-green-200 opacity-50 rounded-full\"\r\n            />\r\n            <a\r\n              onClick={(e) => handleOpenUpdate(e, transition)}\r\n              className=\"relative cursor-pointer\"\r\n            >\r\n              Add Status\r\n            </a>\r\n          </span> */}\r\n          \r\n         \r\n          <Badge \r\n              className=\"hover:bg-red-200 cursor-pointer\"\r\n              type={'danger'}\r\n              onClick={openModal}\r\n          >\r\n              Delete\r\n          </Badge>\r\n          <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n        <ModalHeader>Delete Transition</ModalHeader>\r\n        <ModalBody>\r\n          Are you sure DELETE this Transition!\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          {/* I don't like this approach. Consider passing a prop to ModalFooter\r\n           * that if present, would duplicate the buttons in a way similar to this.\r\n           * Or, maybe find some way to pass something like size=\"large md:regular\"\r\n           * to Button\r\n           */}\r\n          <div className=\"hidden sm:block\">\r\n            <Button layout=\"outline\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"hidden sm:block\" onClick={(e) => deleteConfirm(e, transition.TransitionId)}>\r\n            <Button>Accept</Button>\r\n          </div>\r\n          <div className=\"block w-full sm:hidden\">\r\n            <Button block size=\"large\" layout=\"outline\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"block w-full sm:hidden\">\r\n            <Button block size=\"large\">\r\n              Accept\r\n            </Button>\r\n          </div>\r\n        </ModalFooter>\r\n      </Modal>\r\n          {/* <span className=\"relative inline-block px-3 ml-1.5 py-1 font-semibold text-green-900 leading-tight\">\r\n                <span\r\n                  aria-hidden\r\n                  className=\"absolute inset-0 bg-red-400 opacity-50 rounded-full\"\r\n                />\r\n                <a\r\n                  // onClick={(e) => deleteConfirm(e,status.Status_Id)}\r\n                  className=\"relative cursor-pointer text-red-900\"\r\n                >\r\n                  Delete\r\n                </a>\r\n              </span> */}\r\n        </TableCell>\r\n      </TableRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransitionItem\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAppDispatch } from '../../store'\r\nimport { useSelector } from 'react-redux'\r\nimport axios from 'axios'\r\nimport {\r\n  fetchTransitionStatuss,\r\n  transitionStatussSelector,\r\n} from '../../slices/tra-sta'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { setTransitionUpdate } from '../../slices/transition'\r\nimport transitionApi from '../../api/transitionApi'\r\nimport { deleteTransition } from '../../slices/transition'\r\nimport { TableCell, TableRow, Button,Table, ModalHeader, ModalBody,ModalFooter,Modal,Badge } from '@windmill/react-ui'\r\n\r\nconst TransitionItemForProject = ({ transition }) => {\r\n  const dispatch = useAppDispatch()\r\n  const history = useHistory()\r\n\r\n  const [transitionstatuss_temp, setResult] = useState([])\r\n  useEffect(() => {\r\n    if (transition) {\r\n      // transitionApi.getTransitionStatus(transition.TransitionId).then((data) => {\r\n      //   console.log(data.Data)\r\n      //   setResult(data.Data)\r\n      axios({\r\n        method: 'get',\r\n        url: 'http://localhost:5001/api/transition/transition-status?id=' + transition.TransitionId,\r\n        responseType: 'stream'\r\n      })\r\n        .then(function (response) {\r\n          console.log(response)\r\n          setResult(response.data.Data)\r\n        });\r\n      \r\n    }\r\n  }, [])\r\n\r\n  //get transition to detail\r\n  const handleOpenUpdate = (e, transition) => {\r\n    e.preventDefault()\r\n    dispatch(setTransitionUpdate(transition))\r\n    history.push('/create-transitions')\r\n  }\r\n  const handleOpenTransition = (e, transition) => {\r\n    e.preventDefault()\r\n    \r\n    history.push('/transitions-manager')\r\n  }\r\n\r\n  const renderTransitionStatus = () => {\r\n    if (transitionstatuss_temp != null) {\r\n      console.log(transitionstatuss_temp)\r\n      return transitionstatuss_temp.map((temp) => (\r\n        <li key={temp.StatusId}>{temp.StatusName}</li>\r\n      ))\r\n    } else {\r\n      return <li></li>\r\n    }\r\n  }\r\n  function deleteConfirm(e, TransitionId) {\r\n    e.preventDefault()\r\n    if (confirm('Delete?')) {\r\n      dispatch(deleteTransition(TransitionId))\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      {/* <StatusModal modalDialog={modalUpdate} /> */}\r\n      <TableRow key={transition.TransitionId}>\r\n      <TableCell className=\"px-5 py-5 font-semibold border-b border-gray-200 bg-white text-sm\">\r\n          \r\n          <span>{transition.TransitionName}({transition.TransitionId})</span>\r\n        </TableCell>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          \r\n          <span>{transition.Status1Name}</span>\r\n        </TableCell>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          \r\n          <span>{transition.Status2Name}</span>\r\n        </TableCell>\r\n        \r\n\r\n        <td className=\"px-5 py-5 text-center border-b border-gray-200 bg-white text-sm\">\r\n          {/* <span className=\"relative inline-block px-3 py-1 font-semibold text-green-900 leading-tight\">\r\n            <span\r\n              aria-hidden\r\n              className=\"absolute inset-0 bg-green-200 opacity-50 rounded-full\"\r\n            />\r\n            <a\r\n              onClick={(e) => handleOpenUpdate(e, transition)}\r\n              className=\"relative cursor-pointer\"\r\n            >\r\n              Add Status\r\n            </a>\r\n          </span> */}\r\n          \r\n        \r\n          {/* <span className=\"relative inline-block px-3 ml-1.5 py-1 font-semibold text-green-900 leading-tight\">\r\n                <span\r\n                  aria-hidden\r\n                  className=\"absolute inset-0 bg-red-400 opacity-50 rounded-full\"\r\n                />\r\n                <a\r\n                  // onClick={(e) => deleteConfirm(e,status.Status_Id)}\r\n                  className=\"relative cursor-pointer text-red-900\"\r\n                >\r\n                  Delete\r\n                </a>\r\n              </span> */}\r\n        </td>\r\n      </TableRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransitionItemForProject\r\n","import React, { useEffect, useState } from 'react'\r\nimport { fetchTransitions,getDataByIdWorkflow,transitionsSelector } from '../slices/transition'\r\nimport { fetchTransitionStatuss,transitionStatussSelector } from '../slices/tra-sta'\r\nimport { useAppDispatch } from '../store'\r\nimport { useSelector } from 'react-redux'\r\nimport TransitionItem from '../components/Transition/TransitionItem'\r\nimport { Link } from 'react-router-dom'\r\nimport { workflowsSelector } from '../slices/workflows'\r\nimport { projectsSelector } from '../slices/projects'\r\nimport TransitionItemForProject from '../components/Transition/TransitionItemForProject'\r\nimport workflowApi from '../api/workflowApi' \r\nimport axios from 'axios'\r\nimport { getDataNameByIdWorkflow } from '../slices/workflows'\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableBody,\r\n  TableRow,\r\n  TableFooter,\r\n  TableContainer,\r\n  Button,\r\n  Pagination,\r\n  Select\r\n} from '@windmill/react-ui'\r\nconst  TransitionManagerForProject= (project) => {\r\n\r\n  const {workflowUpdate} = useSelector(workflowsSelector)\r\n\r\n    localStorage.setItem('Project', JSON.stringify(workflowUpdate))\r\n  \r\n  let temp = JSON.parse(localStorage.getItem('Project') || '[]' )\r\n  console.log(temp)\r\n  \r\n  const [fullData, setResult] = useState({})\r\n  useEffect( () => {\r\n  \r\n      // transitionApi.getTransitionStatus(transition.TransitionId).then((data) => {\r\n      //   console.log(data.Data)\r\n      //   setResult(data.Data)\r\n      console.log(\"kkkk\")      \r\n      const axiosGet = async() => axios({\r\n        method: 'get',\r\n        url: 'http://localhost:5001/api/workflows?id=' + temp.WorkflowId,\r\n        responseType: 'stream'\r\n      })\r\n        .then(function (response) {\r\n          \r\n          if(response.data.Data)\r\n          setResult(response.data.Data[0])\r\n        });\r\n      \r\n        axiosGet();\r\n  }, [])  \r\n    \r\n    const dispatch = useAppDispatch()\r\n    const { transitions,loading, hasErrors } = useSelector(transitionsSelector)\r\n   useEffect(() => {\r\n    \r\n    dispatch(getDataByIdWorkflow(temp.WorkflowId)) \r\n    }, [dispatch])\r\n    // setup pages control for every table\r\n  const [pageTable1, setPageTable1] = useState(1)\r\n  // setup data for every table \r\n  const [dataTable1, setDataTable1] = useState([])\r\n  // pagination setup\r\n  const resultsPerPage =5\r\n  const totalResults = transitions.length\r\n  // pagination change control\r\n  function onPageChangeTable1(p) {\r\n    setPageTable1(p)\r\n  }\r\n  // on page change, load new sliced data\r\n  // here you would make another server request for new data\r\n  useEffect(() => {\r\n    setDataTable1(transitions.slice((pageTable1 - 1) * resultsPerPage, pageTable1 * resultsPerPage))\r\n  }, [transitions, pageTable1])\r\n    const renderTransition = () =>\r\n       {    if(transitions)\r\n            return dataTable1.map((transition)=>\r\n            <TransitionItemForProject key={transition.TransitionId} transition={transition} />\r\n        )\r\n        else return <div>NULL</div>\r\n    }\r\n    const dispatch1 = useAppDispatch()\r\n    const{worklfows, loading1, hasErrors1} = useSelector(workflowsSelector)\r\n    useEffect(() => {\r\n      dispatch1(getDataNameByIdWorkflow(temp.WorkflowId))\r\n    }, [dispatch1])\r\n    console.log(worklfows)\r\n \r\n  \r\n  \r\n    if (loading) {\r\n      return (\r\n        <tr>\r\n          <div className=\"loader\">Loading...</div>\r\n        </tr>\r\n      )\r\n    }\r\n\r\n    if (hasErrors) return <p>Unable to get Transition.</p>\r\n    return (\r\n        <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n        <div className=\"py-8\">\r\n        <div>\r\n            <h1 className=\"text-2xl font-semibold leading-tight\">{fullData.WorkflowName}</h1>\r\n            \r\n          </div>\r\n          <div>\r\n            <h2 className=\"text-2xl font-semibold leading-tight\"> {fullData.WorkflowDescription}</h2>\r\n            \r\n          </div>\r\n          <div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n          <div className=\"flex\">\r\n            \r\n            {/* <Link to=\"/invite-user\">\r\n              <button className=\"bg-white border shadow-sm px-3 py-1.5 rounded-md hover:text-green-500 text-gray-700 ml-1\">\r\n                Invite Users\r\n              </button>\r\n            </Link> */}\r\n          </div>\r\n        </div>\r\n          <div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n            <div className=\"flex\">\r\n              {/* <Link to=\"/create-statuss\">\r\n                <button className=\"bg-white border shadow-sm px-3 py-1.5 rounded-md hover:text-green-500 text-gray-700\">\r\n                  Create status\r\n                </button>\r\n              </Link> */}\r\n              {/* <Link to=\"/invite-user\">\r\n                <button className=\"bg-white border shadow-sm px-3 py-1.5 rounded-md hover:text-green-500 text-gray-700 ml-1\">\r\n                  Invite Users\r\n                </button>\r\n              </Link> */}\r\n            </div>\r\n          </div>\r\n          <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\r\n            <div className=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\r\n              <table className=\"min-w-full leading-normal\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Name Transition (ID)\r\n                    </th>\r\n                    \r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Status 1\r\n                    </th>\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Status 2\r\n                    </th>\r\n                   \r\n                    {/* <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Group name\r\n                    </th> */}\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      {/* Action */}\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>{renderTransition()}</tbody>\r\n              </table>\r\n              <Pagination\r\n            totalResults={totalResults}\r\n            resultsPerPage={resultsPerPage}\r\n            onChange={onPageChangeTable1}\r\n            label=\"Table navigation\"\r\n          />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\nexport default TransitionManagerForProject","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\nimport { updateIssue } from '../../slices/issues'\r\nimport {\r\n  selectIssueById,\r\n  selectUserList,\r\n  fetchUserList,\r\n} from '../../slices/issues'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useHistory } from 'react-router-dom'\r\nimport {\r\n  Input,\r\n  Label,\r\n  Select,\r\n  Textarea,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  Badge,\r\n} from '@windmill/react-ui'\r\nimport ReactQuill from 'react-quill'\r\nimport 'react-quill/dist/quill.snow.css'\r\nimport 'react-quill/dist/quill.bubble.css'\r\n\r\n/*\r\n * Quill modules to attach to editor\r\n * See https://quilljs.com/docs/modules/ for complete options\r\n */\r\nconst modules = {\r\n  toolbar: [\r\n    [{ header: '1' }, { header: '2' }, { font: [] }, { size: [] }],\r\n    ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n    [\r\n      { color: [] },\r\n      { background: [] },\r\n      { align: [] },\r\n      { list: 'ordered' },\r\n      { list: 'bullet' },\r\n      { indent: '-1' },\r\n      { indent: '+1' },\r\n    ],\r\n    ['link'],\r\n    ['clean'],\r\n  ],\r\n  clipboard: {\r\n    // toggle to add extra line breaks when pasting HTML:\r\n    matchVisual: false,\r\n  },\r\n}\r\n/*\r\n * Quill editor formats\r\n * See https://quilljs.com/docs/formats/\r\n */\r\nconst formats = [\r\n  'header',\r\n  'font',\r\n  'size',\r\n  'bold',\r\n  'italic',\r\n  'underline',\r\n  'strike',\r\n  'blockquote',\r\n  'align',\r\n  'background',\r\n  'color',\r\n  'list',\r\n  'bullet',\r\n  'indent',\r\n  'link',\r\n]\r\n\r\nexport const UpdateIssueForm = ({ issue }) => {\r\n  const dispatch = useDispatch()\r\n  const { register, handleSubmit, reset } = useForm()\r\n  const [name, setName] = useState(issue.Name)\r\n  const [key, setKey] = useState(issue.Key)\r\n  const [project, setProject] = useState(issue.Project)\r\n  const [projectName, setProjectName] = useState(issue.Project_Name)\r\n  const [issueTypeName, setIssueTypeName] = useState(issue.Issue_Type_Name)\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n\r\n  const [status, setStatus] = useState(issue.Status)\r\n  const [description, setDescription] = useState(issue.Description)\r\n\r\n  const [editRequestStatus, setEditRequestStatus] = useState('idle')\r\n  const userList = useSelector(selectUserList)\r\n  useEffect(() => {\r\n    if (isModalOpen) {\r\n      dispatch(fetchUserList({ project: project }))\r\n    }\r\n  }, [dispatch, isModalOpen])\r\n  const onNameChanged = (e) => setName(e.target.value)\r\n  const onStatusChanged = (e) => setStatus(e.target.value)\r\n  const canSave =\r\n    [name, key, status].every(Boolean) && editRequestStatus === 'idle'\r\n  const history = useHistory()\r\n  const onSaveIssueClicked = async (data) => {\r\n    if (canSave) {\r\n      try {\r\n        const newIssue = {\r\n          ...issue,\r\n          Key: key,\r\n          Name: name,\r\n          Status: status,\r\n          Description: description,\r\n        }\r\n        newIssue.Fields = newIssue.Fields\r\n          ? newIssue.Fields.map((item) => ({\r\n              ...item,\r\n              Value: data[item.Name],\r\n            }))\r\n          : []\r\n        setEditRequestStatus('pending')\r\n        const resultAction = await dispatch(updateIssue(newIssue))\r\n        unwrapResult(resultAction)\r\n      } catch (err) {\r\n        console.error('Failed to save the issue: ', err)\r\n        setName(issue.Name)\r\n        reset({})\r\n      } finally {\r\n        setEditRequestStatus('idle')\r\n        closeModal()\r\n      }\r\n    }\r\n  }\r\n  function openModal() {\r\n    setIsModalOpen(true)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  const userOptions = userList.map((item) => (\r\n    <option key={item.User_Id} value={item.User_Full_Name}>\r\n      {item.User_Full_Name}\r\n    </option>\r\n  ))\r\n  const transitionOptions = issue.Transitions?.map((item) => (\r\n    <option key={item.Id_Transition} value={item.Name_Status2}>\r\n      {`${item.Name_Transition} -> ${item.Name_Status2}`}\r\n    </option>\r\n  ))\r\n  let inputFields\r\n  if (issue.Fields && issue.Fields.length !== 0) {\r\n    inputFields = issue.Fields.map((item) => {\r\n      switch (item.Field_Type) {\r\n        case 'Text':\r\n          return (\r\n            <Label key={item.Name} className=\"m-2\">\r\n              <span>{item.Name}</span>\r\n              <Input\r\n                className=\"mt-1 w-32 md:w-48 lg:w-72\"\r\n                {...register(item.Name)}\r\n                defaultValue={item.Value}\r\n              />\r\n            </Label>\r\n          )\r\n        case 'Date':\r\n          return (\r\n            <Label key={item.Name} className=\"m-2\">\r\n              <span>{item.Name}</span>\r\n              <Input\r\n                type=\"date\"\r\n                className=\"mt-1 w-32 md:w-48 lg:w-72\"\r\n                {...register(item.Name)}\r\n                defaultValue={item.Value}\r\n              />\r\n            </Label>\r\n          )\r\n        case 'Text area':\r\n          return (\r\n            <Label key={item.Name} className=\"m-2\">\r\n              <span>{item.Name}</span>\r\n              <Textarea\r\n                className=\"mt-1 w-32 md:w-48 lg:w-72\"\r\n                {...register(item.Name)}\r\n                defaultValue={item.Value}\r\n              />\r\n            </Label>\r\n          )\r\n        case 'People':\r\n          return (\r\n            <Label key={item.Name} className=\"m-2\">\r\n              <span>{item.Name}</span>\r\n              <Select\r\n                className=\"mt-1 w-32 md:w-48 lg:w-72\"\r\n                {...register(item.Name)}\r\n                defaultValue={item.Value}\r\n              >\r\n                <option value=\"\"></option>\r\n                {userOptions}\r\n              </Select>\r\n            </Label>\r\n          )\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Badge\r\n        className=\"hover:bg-green-200 cursor-pointer\"\r\n        type={'success'}\r\n        onClick={openModal}\r\n      >\r\n        Edit\r\n      </Badge>\r\n\r\n      <Modal\r\n        className=\"w-full px-6 py-4 overflow-hidden bg-white rounded-t-lg dark:bg-gray-800 sm:rounded-lg sm:m-4 sm:max-w-6xl\"\r\n        isOpen={isModalOpen}\r\n        onClose={closeModal}\r\n      >\r\n        <ModalHeader className=\"m-2\">Edit a issue</ModalHeader>\r\n        <ModalBody class=\"overflow-auto h-80 flex\">\r\n          <div className=\"flex-auto\">\r\n            <Label className=\"m-2\">\r\n              <span>Name</span>\r\n              <Input\r\n                className=\"mt-1 w-32 md:w-48 lg:w-72\"\r\n                value={name}\r\n                onChange={onNameChanged}\r\n              />\r\n            </Label>\r\n            <Label className=\"m-2\">\r\n              <span>Key</span>\r\n              <Input\r\n                className=\"mt-1 w-32 md:w-48 lg:w-72\"\r\n                value={key}\r\n                disabled={true}\r\n              />\r\n            </Label>\r\n            <Label className=\"m-2\">\r\n              <span>Project</span>\r\n              <Input\r\n                className=\"mt-1 w-32 md:w-48 lg:w-72\"\r\n                placeholder=\"Jane Doe\"\r\n                value={projectName}\r\n                disabled={true}\r\n              />\r\n            </Label>\r\n            <Label className=\"m-2\">\r\n              <span>Issue type</span>\r\n              <Input\r\n                className=\"mt-1 w-32 md:w-48 lg:w-72\"\r\n                placeholder=\"Jane Doe\"\r\n                value={issueTypeName}\r\n                disabled={true}\r\n              />\r\n            </Label>\r\n            <Label className=\"m-2\">\r\n              <span>{status}</span>\r\n              <Select\r\n                className=\"mt-1 w-32 md:w-48 lg:w-72\"\r\n                value=\"\"\r\n                onChange={onStatusChanged}\r\n              >\r\n                <option value=\"\"></option>\r\n                {transitionOptions}\r\n              </Select>\r\n            </Label>\r\n            {inputFields}\r\n          </div>\r\n          <div className=\"m-2 mr-4 flex-auto\">\r\n            <Label className=\"mb-1\">\r\n              <span>Description</span>\r\n            </Label>\r\n            <ReactQuill\r\n              theme=\"snow\"\r\n              value={description}\r\n              onChange={setDescription}\r\n              modules={modules}\r\n              formats={formats}\r\n              placeholder={'Write something...'}\r\n            />\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <div className=\"hidden sm:block\">\r\n            <Button layout=\"outline\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"hidden sm:block\">\r\n            <Button\r\n              onClick={handleSubmit(onSaveIssueClicked)}\r\n              disabled={!canSave}\r\n            >\r\n              Accept\r\n            </Button>\r\n          </div>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { selectAllIssues, fetchIssues, deleteIssue } from '../slices/issues'\r\nimport { fetchProjects, selectAllProjects } from '../slices/projects'\r\nimport { selectAllIssueTypes, fetchIssueTypes } from '../slices/issueTypes'\r\nimport { fetchStatuss } from '../slices/statuss'\r\nimport { fetchUsers } from '../slices/users'\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  TableBody,\r\n  TableContainer,\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableRow,\r\n  TableFooter,\r\n  Avatar,\r\n  Badge,\r\n  Pagination,\r\n  Label,\r\n  Select,\r\n  Input,\r\n} from '@windmill/react-ui'\r\nimport { UpdateIssueForm } from '../components/Issue/UpdateIssueForm'\r\nimport { ViewIssueForm } from '../components/Issue/ViewIssueForm'\r\n// import ReactQuill from 'react-quill'\r\n// import 'react-quill/dist/quill.snow.css'\r\n// import 'react-quill/dist/quill.bubble.css'\r\n\r\n/*\r\n * Quill modules to attach to editor\r\n * See https://quilljs.com/docs/modules/ for complete options\r\n */\r\nconst modules = {\r\n  toolbar: [\r\n    [{ header: '1' }, { header: '2' }, { font: [] }],\r\n    [{ size: [] }],\r\n    ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n    [{ align: [] }],\r\n    [{ color: [] }, { background: [] }],\r\n    [\r\n      { list: 'ordered' },\r\n      { list: 'bullet' },\r\n      { indent: '-1' },\r\n      { indent: '+1' },\r\n    ],\r\n    ['link', 'image', 'video'],\r\n    ['clean'],\r\n  ],\r\n  clipboard: {\r\n    // toggle to add extra line breaks when pasting HTML:\r\n    matchVisual: false,\r\n  },\r\n}\r\n/*\r\n * Quill editor formats\r\n * See https://quilljs.com/docs/formats/\r\n */\r\nconst formats = [\r\n  'header',\r\n  'font',\r\n  'size',\r\n  'bold',\r\n  'italic',\r\n  'underline',\r\n  'strike',\r\n  'blockquote',\r\n  'align',\r\n  'background',\r\n  'color',\r\n  'list',\r\n  'bullet',\r\n  'indent',\r\n  'link',\r\n  'image',\r\n  'video',\r\n]\r\n\r\nconst IssueExcerpt = ({ issue, openModal }) => {\r\n  return (\r\n    <TableRow key={issue.Id}>\r\n      <TableCell>\r\n        <div className=\"flex items-center text-sm\">\r\n          <div>\r\n            <p className=\"font-semibold\">{`${issue.Name} (${issue.Key})`}</p>\r\n          </div>\r\n        </div>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">{`${issue.Project_Name} (${issue.Project})`}</span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">{issue.Issue_Type_Name}</span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">{issue.Status}</span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">\r\n          {issue.Fields?.find((item) => item.Name === 'Assignee')?.Value}\r\n        </span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">\r\n          {issue.Fields?.find((item) => item.Name === 'Due Date')?.Value}\r\n        </span>\r\n      </TableCell>\r\n      <TableCell>\r\n        {/* <ViewIssueForm issue={issue} /> */}\r\n        <UpdateIssueForm issue={issue} />\r\n        <Badge\r\n          className=\"ml-1 hover:bg-red-200 cursor-pointer\"\r\n          type={'danger'}\r\n          onClick={() => openModal(issue.Id)}\r\n        >\r\n          Delete\r\n        </Badge>\r\n      </TableCell>\r\n    </TableRow>\r\n    //  <td className=\"px-5 py-5 text-center border-b border-gray-200 bg-white text-sm\">\r\n    //   <span className=\"relative inline-block px-3 py-1 font-semibold text-green-900 leading-tight\">\r\n    //     <span\r\n    //       aria-hidden\r\n    //       className=\"absolute inset-0 bg-green-200 opacity-50 rounded-full\"\r\n    //     />\r\n    //     <Link\r\n    //       to={`/editIssue/${issue.Id}`}\r\n    //       className=\"relative cursor-pointer\"\r\n    //     >\r\n    //       Edit\r\n    //     </Link>\r\n    //   </span>\r\n  )\r\n}\r\n\r\nexport const Issues = () => {\r\n  // const [value, setValue] = useState('')\r\n  const dispatch = useDispatch()\r\n  const issues = useSelector(selectAllIssues)\r\n  const issueStatus = useSelector((state) => state.issues.status)\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [id, setId] = useState()\r\n  const error = useSelector((state) => state.issues.error)\r\n  const projects = useSelector(selectAllProjects)\r\n  const projectStatus = useSelector((state) => state.projects.loading)\r\n  const projectsOptions = projects.map((project) => (\r\n    <option key={project.ProjectKey} value={project.ProjectKey}>\r\n      {project.ProjectName}\r\n    </option>\r\n  ))\r\n  const [project, setProject] = useState('')\r\n  const onProjectChanged = (e) => setProject(e.target.value)\r\n  const issueTypes = useSelector(selectAllIssueTypes)\r\n  const issueTypeStatus = useSelector((state) => state.issueTypes.status)\r\n  const issueTypesOptions = issueTypes.map((issueType) => (\r\n    <option key={issueType.Id} value={issueType.Name}>\r\n      {issueType.Name}\r\n    </option>\r\n  ))\r\n  const [issueType, setIssueType] = useState('')\r\n  const onIssueTypeChanged = (e) => setIssueType(e.target.value)\r\n\r\n  const statuses = useSelector((state) => state.statuss.statuss)\r\n  const statusesLoading = useSelector((state) => state.statuss.loading)\r\n  const statusesOptions = statuses.map((status) => (\r\n    <option key={status.StatusId} value={status.StatusName}>\r\n      {status.StatusName}\r\n    </option>\r\n  ))\r\n  const [status, setStatus] = useState('')\r\n  const onStatusChanged = (e) => setStatus(e.target.value)\r\n\r\n  const users = useSelector((state) => state.users.users)\r\n  const usersLoading = useSelector((state) => state.users.loading)\r\n  const usersOptions = users.map((user) => (\r\n    <option key={user.User_Id} value={user.User_Full_Name}>\r\n      {user.User_Full_Name}\r\n    </option>\r\n  ))\r\n  const [user, setUser] = useState('')\r\n  const onUserChanged = (e) => setUser(e.target.value)\r\n  const [fromDate, setFromDate] = useState('')\r\n  const onFromDateChanged = (e) => setFromDate(e.target.value)\r\n  const [toDate, setToDate] = useState('')\r\n  const onToDateChanged = (e) => setToDate(e.target.value)\r\n  localStorage.setItem('IssuesAll', JSON.stringify(issues))\r\n  const [page, setPage] = useState(1)\r\n  const [data, setData] = useState([])\r\n  // pagination setup\r\n  const resultsPerPage = 10\r\n  const [totalResults, setTotalResults] = useState(issues.length)\r\n\r\n  // pagination change control\r\n  function onPageChange(p) {\r\n    setPage(p)\r\n  }\r\n  useEffect(() => {\r\n    if (issueStatus === 'idle') {\r\n      dispatch(fetchIssues())\r\n    }\r\n    if (issueTypeStatus === 'idle') {\r\n      dispatch(fetchIssueTypes())\r\n    }\r\n    if (statuses.length === 0) {\r\n      dispatch(fetchStatuss())\r\n    }\r\n    if (users.length === 0) {\r\n      dispatch(fetchUsers())\r\n    }\r\n  }, [issueStatus, issueTypeStatus, dispatch])\r\n  useEffect(() => {\r\n    if (projects.length === 0 && projectStatus === false) {\r\n      dispatch(fetchProjects())\r\n    }\r\n    let filteredIssues = issues\r\n    if (project)\r\n      filteredIssues = filteredIssues.filter((item) => item.Project === project)\r\n    if (issueType)\r\n      filteredIssues = filteredIssues.filter(\r\n        (item) => item.Issue_Type_Name === issueType\r\n      )\r\n    if (status)\r\n      filteredIssues = filteredIssues.filter((item) => item.Status === status)\r\n    if (user)\r\n      filteredIssues = filteredIssues.filter(\r\n        (item) =>\r\n          item.Fields?.find((item) => item.Name === 'Assignee')?.Value === user\r\n      )\r\n    if (fromDate) {\r\n      const date = new Date(fromDate)\r\n      filteredIssues = filteredIssues.filter((item) => {\r\n        let date2 = new Date(\r\n          item.Fields?.find((item) => item.Name === 'Due Date')?.Value\r\n        )\r\n        return date2 ? date2 >= date : false\r\n      })\r\n    }\r\n    if (toDate) {\r\n      const date = new Date(toDate)\r\n      filteredIssues = filteredIssues.filter((item) => {\r\n        let date2 = new Date(\r\n          item.Fields?.find((item) => item.Name === 'Due Date')?.Value\r\n        )\r\n        return date2 ? date2 <= date : false\r\n      })\r\n    }\r\n    setTotalResults(filteredIssues.length)\r\n    setData(\r\n      filteredIssues.slice((page - 1) * resultsPerPage, page * resultsPerPage)\r\n    )\r\n  }, [issues, page, project, issueType, status, user, fromDate, toDate])\r\n  function openModal(id) {\r\n    setIsModalOpen(true)\r\n    setId(id)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  function deleteConfirm(e, Id) {\r\n    e.preventDefault()\r\n    dispatch(deleteIssue({ Id }))\r\n    closeModal()\r\n  }\r\n  let content\r\n\r\n  if (\r\n    issueStatus === 'loading' ||\r\n    projectStatus === true ||\r\n    issueTypeStatus === 'loading' ||\r\n    statusesLoading === true ||\r\n    usersLoading === true\r\n  ) {\r\n    content = <div className=\"loader\">Loading...</div>\r\n  } else if (\r\n    issueStatus === 'succeeded' &&\r\n    projectStatus === false &&\r\n    issueTypeStatus === 'succeeded' &&\r\n    statusesLoading === false &&\r\n    usersLoading === false\r\n  ) {\r\n    let tbody = data.map((issue) => {\r\n      return <IssueExcerpt key={issue.Id} issue={issue} openModal={openModal} />\r\n    })\r\n    content = (\r\n      <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n        <div className=\"py-8\">\r\n          <div className=\"mb-5 my-2 flex justify-between sm:flex-row flex-col\">\r\n            <h2 className=\"text-2xl font-semibold leading-tight\">Issues</h2>\r\n\r\n            <div className=\"flex justify-between sm:flex-row flex-col\">\r\n              <Label className=\"m-2\">\r\n                <span className=\"text-1xl font-semibold leading-tight\">\r\n                  Project:\r\n                </span>\r\n                <Select\r\n                  className=\"mt-1\"\r\n                  value={project}\r\n                  onChange={onProjectChanged}\r\n                >\r\n                  <option value=\"\">All</option>\r\n                  {projectsOptions}\r\n                </Select>\r\n              </Label>\r\n              <Label className=\"m-2\">\r\n                <span className=\"text-1xl font-semibold leading-tight\">\r\n                  Issue type:\r\n                </span>\r\n                <Select\r\n                  className=\"mt-1\"\r\n                  value={issueType}\r\n                  onChange={onIssueTypeChanged}\r\n                >\r\n                  <option value=\"\">All</option>\r\n                  {issueTypesOptions}\r\n                </Select>\r\n              </Label>\r\n              <Label className=\"m-2\">\r\n                <span className=\"text-1xl font-semibold leading-tight\">\r\n                  Status:\r\n                </span>\r\n                <Select\r\n                  className=\"mt-1\"\r\n                  value={status}\r\n                  onChange={onStatusChanged}\r\n                >\r\n                  <option value=\"\">All</option>\r\n                  {statusesOptions}\r\n                </Select>\r\n              </Label>\r\n              <Label className=\"m-2\">\r\n                <span className=\"text-1xl font-semibold leading-tight\">\r\n                  Assignee:\r\n                </span>\r\n                <Select className=\"mt-1\" value={user} onChange={onUserChanged}>\r\n                  <option value=\"\">All</option>\r\n                  {usersOptions}\r\n                </Select>\r\n              </Label>\r\n              <Label className=\"m-2\">\r\n                <span className=\"text-1xl font-semibold leading-tight\">\r\n                  From date:\r\n                </span>\r\n                <Badge\r\n                  className=\"ml-2 bg-gray-300 hover:bg-gray-400 cursor-pointer\"\r\n                  type={'neutral'}\r\n                  onClick={() => setFromDate('')}\r\n                >\r\n                  Clear\r\n                </Badge>\r\n                <Input\r\n                  type=\"date\"\r\n                  className=\"mt-1\"\r\n                  value={fromDate}\r\n                  onChange={onFromDateChanged}\r\n                />\r\n              </Label>\r\n              <Label className=\"m-2\">\r\n                <span className=\"text-1xl font-semibold leading-tight\">\r\n                  To date:\r\n                </span>\r\n                <Badge\r\n                  className=\"ml-2 bg-gray-300 hover:bg-gray-400 cursor-pointer\"\r\n                  type={'neutral'}\r\n                  onClick={() => setToDate('')}\r\n                >\r\n                  Clear\r\n                </Badge>\r\n                <Input\r\n                  type=\"date\"\r\n                  className=\"mt-1\"\r\n                  value={toDate}\r\n                  onChange={onToDateChanged}\r\n                />\r\n              </Label>\r\n            </div>\r\n          </div>\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHeader>\r\n                <tr>\r\n                  <TableCell>Name</TableCell>\r\n                  <TableCell>Project</TableCell>\r\n                  <TableCell>Issue type</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell>Assignee</TableCell>\r\n                  <TableCell>Due Date</TableCell>\r\n                  <TableCell>Action</TableCell>\r\n                </tr>\r\n              </TableHeader>\r\n              <TableBody>{tbody}</TableBody>\r\n            </Table>\r\n            <TableFooter>\r\n              <Pagination\r\n                totalResults={totalResults}\r\n                resultsPerPage={resultsPerPage}\r\n                label=\"Table navigation\"\r\n                onChange={onPageChange}\r\n              />\r\n            </TableFooter>\r\n          </TableContainer>\r\n          {/* <ReactQuill\r\n            theme=\"snow\"\r\n            value={value}\r\n            onChange={setValue}\r\n            modules={modules}\r\n            formats={formats}\r\n            placeholder={'Write something...'}\r\n          />\r\n          <ReactQuill theme=\"bubble\" value={value} readOnly={true} /> */}\r\n          <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n            <ModalHeader>Delete ?</ModalHeader>\r\n            <ModalBody>\r\n              {\r\n                \"You're about to permanently this and all of its data. If you're not sure, you can close this instead.\"\r\n              }\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <div className=\"hidden sm:block\">\r\n                <Button layout=\"outline\" onClick={closeModal}>\r\n                  Cancel\r\n                </Button>\r\n              </div>\r\n              <div className=\"hidden sm:block\">\r\n                <Button onClick={(e) => deleteConfirm(e, id)}>Accept</Button>\r\n              </div>\r\n            </ModalFooter>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else if (issueStatus === 'failed') {\r\n    content = <div>{error}</div>\r\n  }\r\n\r\n  return <section className=\"issues-list\">{content}</section>\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { selectAllIssues, fetchIssues, deleteIssue } from '../slices/issues'\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  TableBody,\r\n  TableContainer,\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableRow,\r\n  TableFooter,\r\n  Avatar,\r\n  Badge,\r\n  Pagination,\r\n} from '@windmill/react-ui'\r\nimport { UpdateIssueForm } from '../components/Issue/UpdateIssueForm'\r\n\r\nconst IssueExcerpt = ({ issue, openModal }) => {\r\n  return (\r\n    <TableRow key={issue.Id}>\r\n      <TableCell>\r\n        <div className=\"flex items-center text-sm\">\r\n          <div>\r\n            <p className=\"font-semibold\">{`${issue.Name} (${issue.Key})`}</p>\r\n          </div>\r\n        </div>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">{`${issue.Project_Name} (${issue.Project})`}</span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">{issue.Issue_Type_Name}</span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">{issue.Status}</span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">\r\n          {issue.Fields?.find((item) => item.Name === 'Assignee')?.Value}\r\n        </span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">\r\n          {issue.Fields?.find((item) => item.Name === 'Due Date')?.Value}\r\n        </span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <UpdateIssueForm issue={issue} />\r\n        <Badge\r\n          className=\"ml-1 hover:bg-red-200 cursor-pointer\"\r\n          type={'danger'}\r\n          onClick={() => openModal(issue.Id)}\r\n        >\r\n          Delete\r\n        </Badge>\r\n      </TableCell>\r\n    </TableRow>\r\n  )\r\n}\r\n\r\nexport const IssuesByProject = ({ match }) => {\r\n  const { project } = match.params\r\n  const dispatch = useDispatch()\r\n  const issues = useSelector(selectAllIssues)\r\n\r\n  const status = useSelector((state) => state.issues.status)\r\n  const error = useSelector((state) => state.issues.error)\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [id, setId] = useState()\r\n  const [page, setPage] = useState(1)\r\n  const [data, setData] = useState([])\r\n  const resultsPerPage = 10\r\n \r\n\r\n  // pagination change control\r\n  function onPageChange(p) {\r\n    setPage(p)\r\n  }\r\n  useEffect(() => {\r\n    if (status === 'idle') {\r\n      dispatch(fetchIssues())\r\n    }\r\n  }, [status, dispatch])\r\n  const filteredIssues = issues.filter((issue) => issue.Project === project)\r\n  const totalResults = filteredIssues.length\r\n  useEffect(() => {\r\n    setData(filteredIssues.slice((page - 1) * resultsPerPage, page * resultsPerPage))\r\n  }, [issues, page])\r\n  function openModal(id) {\r\n    setIsModalOpen(true)\r\n    setId(id)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  function deleteConfirm(e, Id) {\r\n    e.preventDefault()\r\n    dispatch(deleteIssue({ Id }))\r\n    closeModal()\r\n  }\r\n  let content\r\n\r\n  if (status === 'loading') {\r\n    content = <div className=\"loader\">Loading...</div>\r\n  } else if (status === 'succeeded') {\r\n   \r\n    let tbody = data.map((issue) => {\r\n      return <IssueExcerpt key={issue.Id} issue={issue} openModal={openModal} />\r\n    })\r\n    content = (\r\n      <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n        <div className=\"py-8\">\r\n        <div className=\"mb-5 my-2 flex justify-between sm:flex-row flex-col\">\r\n            <h2 className=\"text-2xl font-semibold leading-tight\">Issues</h2>\r\n          </div>\r\n        <TableContainer>\r\n            <Table>\r\n              <TableHeader>\r\n                <tr>\r\n                  <TableCell>Name</TableCell>\r\n\r\n                  <TableCell>Project</TableCell>\r\n                  <TableCell>Issue type</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell>Assignee</TableCell>\r\n                  <TableCell>Due Date</TableCell>\r\n                  <TableCell>Action</TableCell>\r\n                </tr>\r\n              </TableHeader>\r\n              <TableBody>{tbody}</TableBody>\r\n            </Table>\r\n            <TableFooter>\r\n              <Pagination\r\n                totalResults={totalResults}\r\n                resultsPerPage={resultsPerPage}\r\n                label=\"Table navigation\"\r\n                onChange={onPageChange}\r\n              />\r\n            </TableFooter>\r\n          </TableContainer>\r\n          <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n            <ModalHeader>Delete ?</ModalHeader>\r\n            <ModalBody>\r\n              {\r\n                \"You're about to permanently this and all of its data. If you're not sure, you can close this instead.\"\r\n              }\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              {/* I don't like this approach. Consider passing a prop to ModalFooter\r\n               * that if present, would duplicate the buttons in a way similar to this.\r\n               * Or, maybe find some way to pass something like size=\"large md:regular\"\r\n               * to Button\r\n               */}\r\n              <div className=\"hidden sm:block\">\r\n                <Button layout=\"outline\" onClick={closeModal}>\r\n                  Cancel\r\n                </Button>\r\n              </div>\r\n              <div className=\"hidden sm:block\">\r\n                <Button onClick={(e) => deleteConfirm(e, id)}>Accept</Button>\r\n              </div>\r\n            </ModalFooter>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else if (status === 'failed') {\r\n    content = <div>{error}</div>\r\n  }\r\n\r\n  return <section className=\"issues-list\">{content}</section>\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { addNewScreen } from '../../slices/screens'\r\nimport {\r\n  Input,\r\n  Label,\r\n  Select,\r\n  Textarea,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n} from '@windmill/react-ui'\r\n\r\nexport const AddScreenForm = () => {\r\n  const [name, setName] = useState('')\r\n  const [description, setDescription] = useState('')\r\n  const [addRequestStatus, setAddRequestStatus] = useState('idle')\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const onNameChanged = (e) => setName(e.target.value)\r\n  const onDescriptionChanged = (e) => setDescription(e.target.value)\r\n\r\n  const canSave = [name].every(Boolean) && addRequestStatus === 'idle'\r\n\r\n  const onSaveScreenClicked = async () => {\r\n    if (canSave) {\r\n      try {\r\n        setAddRequestStatus('pending')\r\n        setName('')\r\n        setDescription('')\r\n        const resultAction = await dispatch(\r\n          addNewScreen({ Name: name, Description: description })\r\n        )\r\n        unwrapResult(resultAction)\r\n      } catch (err) {\r\n        console.error('Failed to save the screen: ', err)\r\n      } finally {\r\n        setAddRequestStatus('idle')\r\n        closeModal()\r\n      }\r\n    }\r\n  }\r\n  function openModal() {\r\n    setIsModalOpen(true)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  return (\r\n    <>\r\n      <div>\r\n        <Button onClick={openModal}>Create</Button>\r\n      </div>\r\n      <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n        <ModalHeader className=\"m-2\">Add a screen</ModalHeader>\r\n        <ModalBody>\r\n          <Label className=\"m-2\">\r\n            <span>Name</span>\r\n            <Input className=\"mt-1\" value={name} onChange={onNameChanged} />\r\n          </Label>\r\n\r\n          <Label className=\"m-2\">\r\n            <span>Description</span>\r\n            <Textarea\r\n              className=\"mt-1\"\r\n              rows=\"3\"\r\n              value={description}\r\n              onChange={onDescriptionChanged}\r\n            />\r\n          </Label>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <div className=\"hidden sm:block\">\r\n            <Button layout=\"outline\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"hidden sm:block\">\r\n            <Button onClick={onSaveScreenClicked} disabled={!canSave}>\r\n              Accept\r\n            </Button>\r\n          </div>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { updateScreen, selectScreenById } from '../../slices/screens'\r\nimport {\r\n  Input,\r\n  Label,\r\n  Select,\r\n  Textarea,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  Badge,\r\n} from '@windmill/react-ui'\r\n\r\nexport const UpdateScreenForm = ({ screen }) => {\r\n  const [name, setName] = useState(screen.Name)\r\n  const [description, setDescription] = useState(screen.Description)\r\n  const [updateRequestStatus, setUpdateRequestStatus] = useState('idle')\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const onNameChanged = (e) => setName(e.target.value)\r\n  const onDescriptionChanged = (e) => setDescription(e.target.value)\r\n\r\n  useEffect(() => {\r\n    setName(screen.Name)\r\n    setDescription(screen.Description)\r\n  }, [screen])\r\n\r\n  const canSave = [name].every(Boolean) && updateRequestStatus === 'idle'\r\n\r\n  const onSaveScreenClicked = async () => {\r\n    if (canSave) {\r\n      try {\r\n        setUpdateRequestStatus('pending')\r\n        const resultAction = await dispatch(\r\n          updateScreen({ Id: screen.Id, Name: name, Description: description })\r\n        )\r\n        unwrapResult(resultAction)\r\n      } catch (err) {\r\n        console.error('Failed to save the screen: ', err)\r\n        setName(screen.Name)\r\n        setDescription(screen.Description)\r\n      } finally {\r\n        setUpdateRequestStatus('idle')\r\n        closeModal()\r\n      }\r\n    }\r\n  }\r\n  function openModal() {\r\n    setIsModalOpen(true)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  return (\r\n    <>\r\n      <Badge\r\n        className=\"hover:bg-green-200 cursor-pointer\"\r\n        type={'success'}\r\n        onClick={openModal}\r\n      >\r\n        Edit\r\n      </Badge>\r\n      <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n        <ModalHeader className=\"m-2\">Edit a screen</ModalHeader>\r\n        <ModalBody>\r\n          <Label className=\"m-2\">\r\n            <span>Name</span>\r\n            <Input className=\"mt-1\" value={name} onChange={onNameChanged} />\r\n          </Label>\r\n\r\n          <Label className=\"m-2\">\r\n            <span>Description</span>\r\n            <Textarea\r\n              className=\"mt-1\"\r\n              rows=\"3\"\r\n              value={description}\r\n              onChange={onDescriptionChanged}\r\n            />\r\n          </Label>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <div className=\"hidden sm:block\">\r\n            <Button layout=\"outline\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"hidden sm:block\">\r\n            <Button onClick={onSaveScreenClicked} disabled={!canSave}>\r\n              Accept\r\n            </Button>\r\n          </div>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  selectAllScreens,\r\n  fetchScreens,\r\n  deleteScreen,\r\n  setErrorNull,\r\n  setSuccessNull,\r\n} from '../slices/screens'\r\nimport {\r\n  selectAllScreenCustomFields,\r\n  fetchScreenCustomFields,\r\n} from '../slices/screenCustomFields'\r\nimport {\r\n  selectAllCustomFields,\r\n  fetchCustomFields,\r\n} from '../slices/customFields'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  TableBody,\r\n  TableContainer,\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableRow,\r\n  TableFooter,\r\n  Avatar,\r\n  Badge,\r\n  Pagination,\r\n} from '@windmill/react-ui'\r\nimport { AddScreenForm } from '../components/Screen/AddScreenForm'\r\nimport { UpdateScreenForm } from '../components/Screen/UpdateScreenForm'\r\n\r\nconst ScreenExcerpt = ({ screen, listCustomFields, openModal }) => {\r\n  return (\r\n    <TableRow key={screen.Id}>\r\n      <TableCell>\r\n        <div className=\"flex items-center text-sm\">\r\n          <div>\r\n            <p className=\"font-semibold\">{screen.Name}</p>\r\n          </div>\r\n        </div>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">{screen.Description}</span>\r\n      </TableCell>\r\n      <TableCell>\r\n        {listCustomFields.map((customField) => (\r\n          <p className=\"text-sm\" key={customField.Id}>\r\n            {customField.Name}\r\n          </p>\r\n        ))}\r\n      </TableCell>\r\n      <TableCell>\r\n        <UpdateScreenForm screen={screen} />\r\n        <Badge\r\n          className=\"ml-1 hover:bg-red-200 cursor-pointer\"\r\n          type={'danger'}\r\n          onClick={() => openModal(screen.Id)}\r\n        >\r\n          Delete\r\n        </Badge>\r\n        <Badge\r\n          className=\"ml-1 hover:bg-gray-200 cursor-pointer\"\r\n          type={'neutral'}\r\n          onClick={() => openModal(screen.Id)}\r\n        >\r\n          <Link\r\n            to={{\r\n              pathname: `/app/screenCustomFields/${screen.Id}`,\r\n              state: { screen, listCustomFields },\r\n            }}\r\n          >\r\n            Configure\r\n          </Link>\r\n        </Badge>\r\n      </TableCell>\r\n    </TableRow>\r\n  )\r\n}\r\n\r\nexport const Screens = () => {\r\n  const { addToast } = useToasts()\r\n  const dispatch = useDispatch()\r\n  const screens = useSelector(selectAllScreens)\r\n  const screenCustomFields = useSelector(selectAllScreenCustomFields)\r\n  const customFields = useSelector(selectAllCustomFields)\r\n\r\n  const screenStatus = useSelector((state) => state.screens.status)\r\n  const customFieldStatus = useSelector((state) => state.customFields.status)\r\n  const screenCustomFieldStatus = useSelector(\r\n    (state) => state.screenCustomFields.status\r\n  )\r\n\r\n  const error = useSelector((state) => state.screens.error)\r\n  const success = useSelector((state) => state.screens.success)\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [id, setId] = useState()\r\n  const errorScreenCustomField = useSelector(\r\n    (state) => state.screenCustomFields.error\r\n  )\r\n  const errorCustomFields = useSelector((state) => state.customFields.error)\r\n  const [page, setPage] = useState(1)\r\n  const [data, setData] = useState([])\r\n  // pagination setup\r\n  const resultsPerPage = 2\r\n  const totalResults = screens.length\r\n\r\n  // pagination change control\r\n  function onPageChange(p) {\r\n    setPage(p)\r\n  }\r\n  useEffect(() => {\r\n    if (screenStatus === 'idle') {\r\n      dispatch(fetchScreens())\r\n    }\r\n    if (screenCustomFieldStatus === 'idle') {\r\n      dispatch(fetchScreenCustomFields())\r\n    }\r\n    if (customFieldStatus === 'idle') {\r\n      dispatch(fetchCustomFields())\r\n    }\r\n    if (error) {\r\n      addToast(error, {\r\n        appearance: 'error',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setErrorNull({ error: null }))\r\n    }\r\n    if (success) {\r\n      addToast(success, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setSuccessNull({ success: null }))\r\n    }\r\n  }, [\r\n    screenStatus,\r\n    screenCustomFieldStatus,\r\n    customFieldStatus,\r\n    dispatch,\r\n    error,\r\n    success,\r\n  ])\r\n  useEffect(() => {\r\n    setData(screens.slice((page - 1) * resultsPerPage, page * resultsPerPage))\r\n  }, [screens, page])\r\n  function openModal(id) {\r\n    setIsModalOpen(true)\r\n    setId(id)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  function deleteConfirm(e, Id) {\r\n    e.preventDefault()\r\n    dispatch(deleteScreen({ Id }))\r\n    closeModal()\r\n  }\r\n  let content\r\n\r\n  if (\r\n    screenStatus === 'loading' ||\r\n    screenCustomFieldStatus === 'loading' ||\r\n    customFieldStatus === 'loading'\r\n  ) {\r\n    content = <div className=\"loader\">Loading...</div>\r\n  } else if (\r\n    screenStatus === 'succeeded' &&\r\n    screenCustomFieldStatus === 'succeeded' &&\r\n    customFieldStatus === 'succeeded'\r\n  ) {\r\n    let tbody = data.map((screen) => {\r\n      const listCustomFieldsId = screenCustomFields.filter(\r\n        (row) => row?.Screen == screen.Id\r\n      )\r\n      const temp = customFields.filter((item1) =>\r\n        listCustomFieldsId.some((item2) => item1.Id === item2.Custom_Field)\r\n      )\r\n      const listCustomFields = []\r\n      temp.forEach((element) => {\r\n        listCustomFieldsId.forEach((ele) => {\r\n          if (element.Id === ele.Custom_Field) {\r\n            listCustomFields.push({ ...element, Id: ele.Id })\r\n          }\r\n        })\r\n      })\r\n      return (\r\n        <ScreenExcerpt\r\n          key={screen.Id}\r\n          screen={screen}\r\n          listCustomFields={listCustomFields}\r\n          openModal={openModal}\r\n        />\r\n      )\r\n    })\r\n    content = (\r\n      <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n        <div className=\"py-8\">\r\n          <div className=\"mb-5 my-2 flex justify-between sm:flex-row flex-col\">\r\n            <h2 className=\"text-2xl font-semibold leading-tight\">Screens</h2>\r\n            <AddScreenForm />\r\n          </div>\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHeader>\r\n                <tr>\r\n                  <TableCell>Name</TableCell>\r\n\r\n                  <TableCell>Description</TableCell>\r\n                  <TableCell>Custom fields</TableCell>\r\n                  <TableCell>Action</TableCell>\r\n                </tr>\r\n              </TableHeader>\r\n              <TableBody>{tbody}</TableBody>\r\n            </Table>\r\n            <TableFooter>\r\n              <Pagination\r\n                totalResults={totalResults}\r\n                resultsPerPage={resultsPerPage}\r\n                label=\"Table navigation\"\r\n                onChange={onPageChange}\r\n              />\r\n            </TableFooter>\r\n          </TableContainer>\r\n          <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n            <ModalHeader>Delete ?</ModalHeader>\r\n            <ModalBody>\r\n              {\r\n                \"You're about to permanently this and all of its data. If you're not sure, you can close this instead.\"\r\n              }\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <div className=\"hidden sm:block\">\r\n                <Button layout=\"outline\" onClick={closeModal}>\r\n                  Cancel\r\n                </Button>\r\n              </div>\r\n              <div className=\"hidden sm:block\">\r\n                <Button onClick={(e) => deleteConfirm(e, id)}>Accept</Button>\r\n              </div>\r\n            </ModalFooter>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else if (\r\n    screenStatus === 'failed' ||\r\n    screenCustomFieldStatus === 'failed' ||\r\n    customFieldStatus === 'failed'\r\n  ) {\r\n    content = <div>{(error, errorScreenCustomField, errorCustomFields)}</div>\r\n  }\r\n\r\n  return <section className=\"screens-list\">{content}</section>\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport {\r\n  addNewScreenCustomField,\r\n  deleteScreenCustomField,\r\n  setErrorNull,\r\n  setSuccessNull,\r\n} from '../slices/screenCustomFields'\r\nimport { selectAllCustomFields } from '../slices/customFields'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  Select,\r\n  Label,\r\n  TableBody,\r\n  TableContainer,\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableRow,\r\n  TableFooter,\r\n  Avatar,\r\n  Badge,\r\n  Pagination,\r\n} from '@windmill/react-ui'\r\n\r\nconst ScreenCustomFieldExcerpt = ({ screenCustomField, openModal }) => {\r\n  return (\r\n    <TableRow key={screenCustomField.Id}>\r\n      <TableCell>\r\n        <div className=\"flex items-center text-sm\">\r\n          <div>\r\n            <p className=\"font-semibold\">{screenCustomField.Name}</p>\r\n          </div>\r\n        </div>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">{screenCustomField.Field_Type}</span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">{screenCustomField.Description}</span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <Badge\r\n          className=\"ml-1 hover:bg-red-200 cursor-pointer\"\r\n          type={'danger'}\r\n          onClick={() => openModal(screenCustomField.Id)}\r\n        >\r\n          Delete\r\n        </Badge>\r\n      </TableCell>\r\n    </TableRow>\r\n  )\r\n}\r\n\r\nexport const ScreenCustomFields = () => {\r\n  const { addToast } = useToasts()\r\n  const location = useLocation()\r\n  const screen = location.state?.screen\r\n  //const listCustomFields = location.state?.listCustomFields\r\n  const [listCustomFields, setListCustomFields] = useState(\r\n    location.state?.listCustomFields\r\n  )\r\n  const dispatch = useDispatch()\r\n  const customFields = useSelector(selectAllCustomFields)\r\n  const temp = customFields.filter(\r\n    (item1) => !listCustomFields.some((item2) => item1.Name === item2.Name)\r\n  )\r\n  const fieldTypesOptions = temp.map((customField) => (\r\n    <option key={customField.Id} value={customField.Id}>\r\n      {customField.Name}\r\n    </option>\r\n  ))\r\n  const onFieldTypeChanged = async (e) => {\r\n    try {\r\n      console.log({\r\n        Screen: screen.Id,\r\n        Custom_Field: e.target.value,\r\n      })\r\n      const resultAction = await dispatch(\r\n        addNewScreenCustomField({\r\n          Screen: screen.Id,\r\n          Custom_Field: Number(e.target.value),\r\n        })\r\n      ).then((res) => {\r\n        let result = [res.payload.Data]\r\n        const temp = customFields.filter((item1) =>\r\n          result.some((item2) => item1.Id === item2.Custom_Field)\r\n        )\r\n        //console.log(res.payload.Data, customFields, temp)\r\n        temp.forEach((element) => {\r\n          result.forEach((ele) => {\r\n            if (element.Id === ele.Custom_Field) {\r\n              setListCustomFields((oldArray) => [\r\n                ...oldArray,\r\n                { ...element, Id: ele.Id },\r\n              ])\r\n            }\r\n          })\r\n        })\r\n      })\r\n      //unwrapResult(resultAction)\r\n    } catch (err) {\r\n      console.error('Failed to save the customField: ', err)\r\n    } finally {\r\n      //setAddRequestStatus('idle')\r\n    }\r\n  }\r\n  const screenCustomFieldStatus = useSelector(\r\n    (state) => state.screenCustomFields.status\r\n  )\r\n  const error = useSelector((state) => state.screenCustomFields.error)\r\n  const success = useSelector((state) => state.screenCustomFields.success)\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [id, setId] = useState()\r\n  const [page, setPage] = useState(1)\r\n  const [data, setData] = useState([])\r\n  // pagination setup\r\n  const resultsPerPage = 10\r\n  const totalResults = listCustomFields.length\r\n\r\n  // pagination change control\r\n  function onPageChange(p) {\r\n    setPage(p)\r\n  }\r\n  useEffect(() => {\r\n    // if (screenCustomFieldStatus === 'idle') {\r\n    //   dispatch(fetchScreenCustomFields())\r\n    // }\r\n    if (error) {\r\n      addToast(error, {\r\n        appearance: 'error',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setErrorNull({ error: null }))\r\n    }\r\n    if (success) {\r\n      addToast(success, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setSuccessNull({ success: null }))\r\n    }\r\n  }, [screenCustomFieldStatus, dispatch, error, success])\r\n  useEffect(() => {\r\n    setData(\r\n      listCustomFields.slice((page - 1) * resultsPerPage, page * resultsPerPage)\r\n    )\r\n  }, [listCustomFields, page])\r\n  const deleteRow = (Id) => {\r\n    const result = listCustomFields.filter((ele) => ele.Id !== Id)\r\n    setListCustomFields(result)\r\n  }\r\n\r\n  function openModal(id) {\r\n    setIsModalOpen(true)\r\n    setId(id)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  function deleteConfirm(e, id) {\r\n    e.preventDefault()\r\n    dispatch(deleteScreenCustomField({ Id: id })).then((res) =>\r\n      deleteRow(res.payload.Data.Id)\r\n    )\r\n    closeModal()\r\n    //window.location.reload(false);\r\n  }\r\n  let content\r\n\r\n  // if (screenCustomFieldStatus === 'loading') {\r\n  //   content = <div className=\"loader\">Loading...</div>\r\n  // } else if (screenCustomFieldStatus === 'succeeded') {\r\n  let tbody = data?.map((screenCustomField) => (\r\n    <ScreenCustomFieldExcerpt\r\n      key={screenCustomField.Id}\r\n      screenCustomField={screenCustomField}\r\n      openModal={openModal}\r\n    />\r\n  ))\r\n  content = (\r\n    <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n      <div className=\"py-8\">\r\n        <div className=\"mb-5 my-2 flex justify-between sm:flex-row flex-col\">\r\n          <h2 className=\"text-2xl font-semibold leading-tight\">{`Screen: ${screen.Name}`}</h2>\r\n          <Label className=\"m-2\">\r\n            <span className=\"text-1xl font-semibold leading-tight\">Add a custom field</span>\r\n            <Select className=\"mt-1\" value={''} onChange={onFieldTypeChanged}>\r\n              <option value=\"\"></option>\r\n              {fieldTypesOptions}\r\n            </Select>\r\n          </Label>\r\n        </div>\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHeader>\r\n              <tr>\r\n                <TableCell>Name</TableCell>\r\n                <TableCell>Field type</TableCell>\r\n                <TableCell>Description</TableCell>\r\n                <TableCell>Action</TableCell>\r\n              </tr>\r\n            </TableHeader>\r\n            <TableBody>{tbody}</TableBody>\r\n          </Table>\r\n          <TableFooter>\r\n            <Pagination\r\n              totalResults={totalResults}\r\n              resultsPerPage={resultsPerPage}\r\n              label=\"Table navigation\"\r\n              onChange={onPageChange}\r\n            />\r\n          </TableFooter>\r\n        </TableContainer>\r\n        <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n          <ModalHeader>Delete ?</ModalHeader>\r\n          <ModalBody>\r\n            {\r\n              \"You're about to permanently this and all of its data. If you're not sure, you can close this instead.\"\r\n            }\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            {/* I don't like this approach. Consider passing a prop to ModalFooter\r\n             * that if present, would duplicate the buttons in a way similar to this.\r\n             * Or, maybe find some way to pass something like size=\"large md:regular\"\r\n             * to Button\r\n             */}\r\n            <div className=\"hidden sm:block\">\r\n              <Button layout=\"outline\" onClick={closeModal}>\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n            <div className=\"hidden sm:block\">\r\n              <Button onClick={(e) => deleteConfirm(e, id)}>Accept</Button>\r\n            </div>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n  // } else if (screenCustomFieldStatus === 'error') {\r\n  //   content = <div>{error}</div>\r\n  // }\r\n\r\n  return <section className=\"screenCustomFields-list\">{content}</section>\r\n}\r\n","import React from 'react'\r\nimport DialogModal from '../components/DialogModal'\r\nimport FormInput from '../components/Form/FormInputNew'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from '../store'\r\nimport { workflowsSelector,updateWorkflow } from '../slices/workflows'\r\nimport { DialogActions, DialogContent } from '../components/DialogModal'\r\n\r\nimport {Textarea,Button} from '@windmill/react-ui'\r\n\r\nfunction UpdateWorkflowModal({ modalDialog }) {\r\n\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { register, handleSubmit } = useForm()\r\n  const { workflowUpdate } = useSelector(workflowsSelector)\r\n\r\n  const { handleClose } = modalDialog\r\n  const onSubmit = (data) => {\r\n    \r\n    dispatch(updateWorkflow({ id: workflowUpdate.WorkflowId, data }))\r\n    handleClose()\r\n  }\r\n  return (\r\n    <>\r\n      <DialogModal\r\n        title=\"Workflow\"\r\n        modalDialog={modalDialog}\r\n        handleSubmit={handleSubmit(onSubmit)}\r\n      >\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <DialogContent dividers className=\"mx-12\">\r\n            <FormInput\r\n              r={register}\r\n              name=\"WorkflowName\"\r\n             label={'Workflow Name'}\r\n              value={workflowUpdate.WorkflowName}\r\n              required\r\n            />\r\n            <FormInput \r\n            \r\n              r={register}\r\n              name=\"WorkflowDescription\"\r\n              label={'Description'}\r\n              value={workflowUpdate.WorkflowDescription}\r\n              placeholder={\"Description....\"}\r\n            />\r\n            \r\n          </DialogContent>\r\n          <DialogActions>\r\n            <div className=\"my-3 mx-5\">\r\n              <Button layout=\"outline\" onClick={handleClose} color=\"secondary\">\r\n                Cancel\r\n              </Button>\r\n              <Button type=\"submit\" color=\"primary\">\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </DialogActions>\r\n        </form>\r\n      </DialogModal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UpdateWorkflowModal\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAppDispatch } from '../../store'\r\nimport { useSelector } from 'react-redux'\r\nimport axios from 'axios'\r\nimport {\r\n  fetchWorkflowProjects,\r\n  workflowProjectsSelector,\r\n} from '../../slices/wor-pro'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { setWorkflowUpdate, updateWorkflow } from '../../slices/workflows'\r\nimport workflowApi from '../../api/workflowApi'\r\nimport { \r\n  deleteWorkflow,\r\n  \r\n} from '../../slices/workflows'\r\nimport WorkflowModal from '../../pages/UpdateWorkflow'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport { TableCell, TableRow, Button,Table, ModalHeader, ModalBody,ModalFooter,Modal,Badge } from '@windmill/react-ui'\r\n\r\nconst WorkflowItem = ({ workflow }) => {\r\n  const {addToast} = useToasts()\r\n  const dispatch = useAppDispatch()\r\n  const history = useHistory()\r\n\r\n  const [workflowprojects_temp, setResult] = useState([])\r\n  useEffect(() => {\r\n    if (workflow) {\r\n      workflowApi.getWorkflowProject(workflow.WorkflowId).then((data) => {\r\n        setResult(data.Data)\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  //get workflow to detail\r\n  const handleOpenUpdate = (e, workflow) => {\r\n    e.preventDefault()\r\n    dispatch(setWorkflowUpdate(workflow))\r\n    addToast(\"Create Workflow Success\", {\r\n      appearance: 'success',\r\n      autoDismiss: true,\r\n    })\r\n    history.push('/app/workflows-manager/create-workflows')\r\n  }\r\n  const handleOpenTransition = (e, workflow) => {\r\n    e.preventDefault()\r\n    dispatch(setWorkflowUpdate(workflow))\r\n    addToast(\"Open Success\", {\r\n      appearance: 'success',\r\n      autoDismiss: true,\r\n    })\r\n    history.push('/app/workflows-manager/transitions-manager')\r\n  }\r\n  const [openUpdate, setOpenUpdate] = React.useState(false)\r\n\r\n  const handleOpenUpdateWorkflow = (e, workflow) => {\r\n    e.preventDefault()\r\n    dispatch(setWorkflowUpdate(workflow))\r\n    \r\n    setOpenUpdate(true)\r\n  }\r\n  const handleCloseUpdate = () => {\r\n    setOpenUpdate(false)\r\n  }\r\n  const modalUpdate = {\r\n    open: openUpdate,\r\n    handleOpen: handleOpenUpdateWorkflow,\r\n    handleClose: handleCloseUpdate,\r\n  }\r\n  const renderWorkflowProject = () => {\r\n    if (workflowprojects_temp != null) {\r\n      return workflowprojects_temp.map((temp) => (\r\n        <li key={temp.ProjectKey}>{temp.ProjectName}</li>\r\n      ))\r\n    } else {\r\n      return <li></li>\r\n    }\r\n  }\r\n\r\n  // DELETE\r\n  const [isModalOpen, setIsModalOpen, deleteP] = useState(false)\r\n\r\n  function openModal() {\r\n    setIsModalOpen(true)\r\n  }\r\n \r\n\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  function deleteConfirm(e, WorkflowId) {\r\n    e.preventDefault()\r\n    \r\n      dispatch(deleteWorkflow(WorkflowId))\r\n      // addToast(\"Delete Workflow Success\", {\r\n      //   appearance: 'success',\r\n      //   autoDismiss: true,\r\n      // })\r\n    \r\n  }\r\n  return (\r\n    <>\r\n      <WorkflowModal modalDialog={modalUpdate} />\r\n      <TableRow key={workflow.WorkflowId}>\r\n        <TableCell className=\"px-5 py-5 font-semibold border-b border-gray-200 bg-white text-sm\">\r\n          \r\n          <span>{workflow.WorkflowName}</span>\r\n        </TableCell>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n        \r\n          <span>{workflow.WorkflowId}</span>\r\n        </TableCell>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          \r\n          <span>{workflow.WorkflowDescription}</span>\r\n        </TableCell>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          <span>{renderWorkflowProject()}</span>\r\n        </TableCell>\r\n\r\n        <TableCell className=\"px-5 py-5 text-center border-b border-gray-200 bg-white text-sm\">\r\n          \r\n          <Badge \r\n              className=\"hover:bg-white-200 cursor-pointer\"\r\n              type={'status'}\r\n              onClick={(e) => handleOpenUpdate(e, workflow)}\r\n          >\r\n              Add Project\r\n          </Badge>\r\n          <Badge \r\n              className=\"hover:bg-blue-200 cursor-pointer\"\r\n              type={'button'}\r\n              onClick={(e) => handleOpenTransition(e, workflow)}\r\n          >\r\n              Transition\r\n          </Badge>\r\n          <Badge \r\n              className=\"hover:bg-green-200 cursor-pointer\"\r\n              type={'success'}\r\n              onClick={(e) => handleOpenUpdateWorkflow(e, workflow)}\r\n          >\r\n              Edit\r\n          </Badge>\r\n          <Badge \r\n              className=\"hover:bg-red-200 cursor-pointer\"\r\n              type={'danger'}\r\n              onClick={openModal}\r\n          >\r\n              Delete\r\n          </Badge>\r\n          \r\n          <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n        <ModalHeader>Delete Workflow</ModalHeader>\r\n        <ModalBody>\r\n          Are you sure DELETE this Workflow!\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          {/* I don't like this approach. Consider passing a prop to ModalFooter\r\n           * that if present, would duplicate the buttons in a way similar to this.\r\n           * Or, maybe find some way to pass something like size=\"large md:regular\"\r\n           * to Button\r\n           */}\r\n          <div className=\"hidden sm:block\">\r\n            <Button layout=\"outline\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"hidden sm:block\" onClick={(e) => deleteConfirm(e, workflow.WorkflowId)}>\r\n            <Button>Accept</Button>\r\n          </div>\r\n          <div className=\"block w-full sm:hidden\">\r\n            <Button block size=\"large\" layout=\"outline\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"block w-full sm:hidden\">\r\n            <Button block size=\"large\">\r\n              Accept\r\n            </Button>\r\n          </div>\r\n        </ModalFooter>\r\n      </Modal>\r\n          {/* <span className=\"relative inline-block px-3 ml-1.5 py-1 font-semibold text-green-900 leading-tight\">\r\n                <span\r\n                  aria-hidden\r\n                  className=\"absolute inset-0 bg-red-400 opacity-50 rounded-full\"\r\n                />\r\n                <a\r\n                  // onClick={(e) => deleteConfirm(e,project.Project_Id)}\r\n                  className=\"relative cursor-pointer text-red-900\"\r\n                >\r\n                  Delete\r\n                </a>\r\n              </span> */}\r\n        </TableCell>\r\n      </TableRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WorkflowItem\r\n","import React, { useEffect,useState } from 'react'\r\nimport { fetchWorkflows,workflowsSelector,setState } from '../slices/workflows'\r\nimport { fetchWorkflowProjects,workflowProjectsSelector } from '../slices/wor-pro'\r\nimport { useAppDispatch } from '../store'\r\nimport { useSelector } from 'react-redux'\r\nimport WorkflowItem from '../components/Workflow/WorkflowItem'\r\nimport { Link } from 'react-router-dom'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableBody,\r\n  TableRow,\r\n  TableFooter,\r\n  TableContainer,\r\n  Button,\r\n  Pagination,\r\n  Select\r\n} from '@windmill/react-ui'\r\n const WorkflowManager= () => {\r\n    const { addToast } = useToasts()\r\n    const dispatch = useAppDispatch()\r\n    const { updateWor, updateSuccess,workflows,loading, hasErrors } = useSelector(workflowsSelector)\r\n    localStorage.setItem('WorkflowAll', JSON.stringify(workflows))\r\n   useEffect(() => {\r\n        dispatch(fetchWorkflows()) \r\n    }, [dispatch])\r\n    useEffect(() => {\r\n           if (updateSuccess) {\r\n             addToast(\"Success\", {\r\n               appearance: 'success',\r\n               autoDismiss: true,\r\n             })\r\n             dispatch(setState())\r\n           }\r\n         }, [updateSuccess])\r\n\r\n// setup pages control for every table\r\nconst [pageTable1, setPageTable1] = useState(1)\r\n// setup data for every table \r\nconst [dataTable1, setDataTable1] = useState([])\r\n// pagination setup\r\nconst resultsPerPage = 5\r\nconst totalResults = workflows.length\r\n// pagination change control\r\nfunction onPageChangeTable1(p) {\r\n  setPageTable1(p)\r\n}\r\n// on page change, load new sliced data\r\n// here you would make another server request for new data\r\nuseEffect(() => {\r\n  setDataTable1(workflows.slice((pageTable1 - 1) * resultsPerPage, pageTable1 * resultsPerPage))\r\n}, [workflows, pageTable1])\r\n\r\n\r\n    //search user\r\n  //setup search\r\n  const [searchTerm, setSearchTerm] = React.useState('')\r\n  const [searchResults, setSearchResults] = React.useState([])\r\n  //setup select \r\n  const [selectTerm, setSelectTerm] = React.useState('')\r\n  const handleChange = (e) => {\r\n    setSearchTerm(e.target.value)\r\n  }\r\n  const handleSelect = (e) =>{\r\n    setSelectTerm(e.target.value)\r\n  }\r\n  useEffect(() => {\r\n    const results = workflows.filter(\r\n      (person) =>\r\n        person.WorkflowName.toLowerCase().indexOf(searchTerm.toLowerCase()) !=\r\n          -1 \r\n    )\r\n    setSearchResults(results)\r\n  }, [searchTerm])\r\n  \r\n  //render user\r\n  const renderWorkflow = () => {\r\n    if (\r\n      (searchTerm == '' && selectTerm == 'All') ||\r\n      (searchTerm == '' && selectTerm == '')\r\n    ) {\r\n      return dataTable1.map((workflow) => <WorkflowItem key={workflow.WorkflowId} workflow={workflow} />)\r\n    } else {\r\n      return searchResults.map((workflow) => (\r\n        <WorkflowItem key={workflow.WorkflowId} workflow={workflow} />\r\n      ))\r\n    }\r\n  }     \r\n    \r\n    if (loading) {\r\n      return (\r\n        <tr>\r\n          <div className=\"loader\">Loading...</div>\r\n        </tr>\r\n      )\r\n    }\r\n    if (hasErrors) return <p>Unable to get Workflow.</p>\r\n    return (\r\n        <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n        <div className=\"py-8\">\r\n          <div>\r\n            <h2 className=\"text-2xl font-semibold leading-tight\">Workflow</h2>\r\n          </div>\r\n          <div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n          <div className=\"flex\">\r\n            <Link to=\"/app/workflows-manager/add-workflows\">\r\n            <Button size=\"large\">Create Workflow</Button>\r\n            </Link>\r\n            {/* <Link to=\"/invite-user\">\r\n              <button className=\"bg-white border shadow-sm px-3 py-1.5 rounded-md hover:text-green-500 text-gray-700 ml-1\">\r\n                Invite Users\r\n              </button>\r\n            </Link> */}\r\n          </div>\r\n          <div className=\"flex relative\">\r\n              <span className=\"h-full absolute inset-y-0 right-2 flex items-center pl-2\">\r\n                <svg\r\n                  viewBox=\"0 0 24 24\"\r\n                  className=\"h-4 w-4 fill-current text-gray-500\"\r\n                >\r\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\r\n                </svg>\r\n              </span>\r\n              <input\r\n                placeholder=\"Search\"\r\n                className=\"appearance-none rounded-r rounded-l sm:rounded-l-none border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\r\n                value={searchTerm}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n        </div>\r\n        \r\n          <div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n            <div className=\"flex\">\r\n              {/* <Link to=\"/create-projects\">\r\n                <button className=\"bg-white border shadow-sm px-3 py-1.5 rounded-md hover:text-green-500 text-gray-700\">\r\n                  Create project\r\n                </button>\r\n              </Link> */}\r\n              {/* <Link to=\"/invite-user\">\r\n                <button className=\"bg-white border shadow-sm px-3 py-1.5 rounded-md hover:text-green-500 text-gray-700 ml-1\">\r\n                  Invite Users\r\n                </button>\r\n              </Link> */}\r\n              \r\n            </div>\r\n          </div>\r\n          <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\r\n            <div className=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\r\n              <table className=\"min-w-full leading-normal\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Name Workflow\r\n                    </th>\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      ID\r\n                    </th>\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Description\r\n                    </th>\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Project\r\n                    </th>\r\n                    {/* <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Group name\r\n                    </th> */}\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                       Action\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>{renderWorkflow()}</tbody>\r\n              </table>\r\n              <TableFooter>\r\n          <Pagination\r\n            totalResults={totalResults}\r\n            resultsPerPage={resultsPerPage}\r\n            onChange={onPageChangeTable1}\r\n            label=\"Table navigation\"\r\n          />\r\n        </TableFooter>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\nexport default WorkflowManager","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { addNewCustomField } from '../../slices/customFields'\r\nimport {\r\n  Input,\r\n  Label,\r\n  Select,\r\n  Textarea,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n} from '@windmill/react-ui'\r\n\r\nconst fieldTypes = [\r\n  { Id: '0', Name: 'Text' },\r\n  { Id: '1', Name: 'Date' },\r\n  { Id: '2', Name: 'Text area' },\r\n  { Id: '3', Name: 'People' },\r\n]\r\n\r\nexport const AddCustomFieldForm = () => {\r\n  const [name, setName] = useState('')\r\n  const [fieldType, setFieldType] = useState('')\r\n  const [description, setDescription] = useState('')\r\n  const [addRequestStatus, setAddRequestStatus] = useState('idle')\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const onNameChanged = (e) => setName(e.target.value)\r\n  const onDescriptionChanged = (e) => setDescription(e.target.value)\r\n  const onFieldTypeChanged = (e) => setFieldType(e.target.value)\r\n  const canSave =\r\n    [name, fieldType].every(Boolean) && addRequestStatus === 'idle'\r\n\r\n  const onSaveCustomFieldClicked = async () => {\r\n    if (canSave) {\r\n      try {\r\n        setAddRequestStatus('pending')\r\n        setName('')\r\n        setFieldType('')\r\n        setDescription('')\r\n        const resultAction = await dispatch(\r\n          addNewCustomField({\r\n            Name: name,\r\n            Field_Type: fieldType,\r\n            Description: description,\r\n          })\r\n        )\r\n        unwrapResult(resultAction)\r\n      } catch (err) {\r\n        console.error('Failed to save the customField: ', err)\r\n      } finally {\r\n        setAddRequestStatus('idle')\r\n        closeModal()\r\n      }\r\n    }\r\n  }\r\n  function openModal() {\r\n    setIsModalOpen(true)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  const fieldTypesOptions = fieldTypes.map((customField) => (\r\n    <option key={customField.Id} value={customField.Name}>\r\n      {customField.Name}\r\n    </option>\r\n  ))\r\n  return (\r\n    <>\r\n      <div>\r\n        <Button onClick={openModal}>Create</Button>\r\n      </div>\r\n      <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n        <ModalHeader className=\"m-2\">Add a custom field</ModalHeader>\r\n        <ModalBody>\r\n          <Label className=\"m-2\">\r\n            <span>Name</span>\r\n            <Input className=\"mt-1\" value={name} onChange={onNameChanged} />\r\n          </Label>\r\n\r\n          <Label className=\"m-2\">\r\n            <span>Type</span>\r\n            <Select\r\n              className=\"mt-1\"\r\n              value={fieldType}\r\n              onChange={onFieldTypeChanged}\r\n            >\r\n              <option value=\"\"></option>\r\n              {fieldTypesOptions}\r\n            </Select>\r\n          </Label>\r\n\r\n          <Label className=\"m-2\">\r\n            <span>Description</span>\r\n            <Textarea\r\n              className=\"mt-1\"\r\n              rows=\"3\"\r\n              value={description}\r\n              onChange={onDescriptionChanged}\r\n            />\r\n          </Label>\r\n\r\n          {/* <Label className=\"m-2\">\r\n            <span>Disabled</span>\r\n            <Input disabled className=\"mt-1\" placeholder=\"Jane Doe\" />\r\n          </Label> */}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          {/* I don't like this approach. Consider passing a prop to ModalFooter\r\n           * that if present, would duplicate the buttons in a way similar to this.\r\n           * Or, maybe find some way to pass something like size=\"large md:regular\"\r\n           * to Button\r\n           */}\r\n          <div className=\"hidden sm:block\">\r\n            <Button layout=\"outline\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"hidden sm:block\">\r\n            <Button onClick={onSaveCustomFieldClicked} disabled={!canSave}>\r\n              Accept\r\n            </Button>\r\n          </div>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\nimport { useHistory } from 'react-router-dom'\r\nimport {\r\n  updateCustomField,\r\n  selectCustomFieldById,\r\n} from '../../slices/customFields'\r\nimport {\r\n  Input,\r\n  Label,\r\n  Select,\r\n  Textarea,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  Badge,\r\n} from '@windmill/react-ui'\r\n\r\nconst fieldTypes = [\r\n  { Id: '0', Name: 'Text' },\r\n  { Id: '1', Name: 'Date' },\r\n  { Id: '2', Name: 'Text area' },\r\n  { Id: '3', Name: 'People' },\r\n]\r\n\r\nexport const UpdateCustomFieldForm = ({ customField }) => {\r\n  const [name, setName] = useState(customField.Name)\r\n  const [fieldType, setFieldType] = useState(customField.Field_Type)\r\n  const [description, setDescription] = useState(customField.Description)\r\n  const [updateRequestStatus, setUpdateRequestStatus] = useState('idle')\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const onNameChanged = (e) => setName(e.target.value)\r\n  const onDescriptionChanged = (e) => setDescription(e.target.value)\r\n  const onFieldTypeChanged = (e) => setFieldType(e.target.value)\r\n\r\n  useEffect(() => {\r\n    setName(customField.Name)\r\n    setFieldType(customField.Field_Type)\r\n    setDescription(customField.Description)\r\n  }, [customField])\r\n  const canSave =\r\n    [name, fieldType].every(Boolean) && updateRequestStatus === 'idle'\r\n\r\n  const onSaveCustomFieldClicked = async () => {\r\n    if (canSave) {\r\n      try {\r\n        console.log({\r\n          Id: customField.Id,\r\n          Name: name,\r\n          Field_Type: fieldType,\r\n          Description: description,\r\n        })\r\n        setUpdateRequestStatus('pending')\r\n        const resultAction = await dispatch(\r\n          updateCustomField({\r\n            Id: customField.Id,\r\n            Name: name,\r\n            Field_Type: fieldType,\r\n            Description: description,\r\n          })\r\n        )\r\n        unwrapResult(resultAction)\r\n      } catch (err) {\r\n        console.error('Failed to save the customField: ', err)\r\n        setName(customField.Name)\r\n        setFieldType(customField.Field_Type)\r\n        setDescription(customField.Description)\r\n      } finally {\r\n        setUpdateRequestStatus('idle')\r\n        closeModal()\r\n      }\r\n    }\r\n  }\r\n  function openModal() {\r\n    setIsModalOpen(true)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  const fieldTypesOptions = fieldTypes.map((customField) => (\r\n    <option key={customField.Id} value={customField.Name}>\r\n      {customField.Name}\r\n    </option>\r\n  ))\r\n  return (\r\n    <>\r\n      <Badge className=\"hover:bg-green-200 cursor-pointer\" type={'success'} onClick={openModal}>Edit</Badge>\r\n      <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n        <ModalHeader className=\"m-2\">Edit a custom field</ModalHeader>\r\n        <ModalBody>\r\n          <Label className=\"m-2\">\r\n            <span>Name</span>\r\n            <Input className=\"mt-1\" value={name} onChange={onNameChanged} />\r\n          </Label>\r\n\r\n          <Label className=\"m-2\">\r\n            <span>Type</span>\r\n            <Select\r\n              className=\"mt-1\"\r\n              value={fieldType}\r\n              onChange={onFieldTypeChanged}\r\n            >\r\n              <option value=\"\"></option>\r\n              {fieldTypesOptions}\r\n            </Select>\r\n          </Label>\r\n\r\n          <Label className=\"m-2\">\r\n            <span>Description</span>\r\n            <Textarea\r\n              className=\"mt-1\"\r\n              rows=\"3\"\r\n              value={description}\r\n              onChange={onDescriptionChanged}\r\n            />\r\n          </Label>\r\n\r\n          {/* <Label className=\"m-2\">\r\n            <span>Disabled</span>\r\n            <Input disabled className=\"mt-1\" placeholder=\"Jane Doe\" />\r\n          </Label> */}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          {/* I don't like this approach. Consider passing a prop to ModalFooter\r\n           * that if present, would duplicate the buttons in a way similar to this.\r\n           * Or, maybe find some way to pass something like size=\"large md:regular\"\r\n           * to Button\r\n           */}\r\n          <div className=\"hidden sm:block\">\r\n            <Button layout=\"outline\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"hidden sm:block\">\r\n            <Button onClick={onSaveCustomFieldClicked} disabled={!canSave}>\r\n              Accept\r\n            </Button>\r\n          </div>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  selectAllCustomFields,\r\n  fetchCustomFields,\r\n  deleteCustomField,\r\n  setErrorNull,\r\n  setSuccessNull,\r\n} from '../slices/customFields'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  TableBody,\r\n  TableContainer,\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableRow,\r\n  TableFooter,\r\n  Avatar,\r\n  Badge,\r\n  Pagination,\r\n} from '@windmill/react-ui'\r\nimport { AddCustomFieldForm } from '../components/CustomField/AddCustomFieldForm'\r\nimport { UpdateCustomFieldForm } from '../components/CustomField/UpdateCustomFieldForm'\r\n\r\nconst CustomFieldExcerpt = ({ customField, openModal }) => {\r\n  return (\r\n    <TableRow key={customField.Id}>\r\n      <TableCell>\r\n        <div className=\"flex items-center text-sm\">\r\n          {/* <Avatar\r\n                className=\"hidden mr-3 md:block\"\r\n                src={user.avatar}\r\n                alt=\"User image\"\r\n              /> */}\r\n          <div>\r\n            <p className=\"font-semibold\">{customField.Name}</p>\r\n            {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                  {user.job}\r\n                </p> */}\r\n          </div>\r\n        </div>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">{customField.Field_Type}</span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">{customField.Description}</span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <UpdateCustomFieldForm customField={customField} />\r\n        <Badge className=\"ml-1 hover:bg-red-200 cursor-pointer\" type={'danger'} onClick={() => openModal(customField.Id)}>\r\n          Delete\r\n        </Badge>\r\n      </TableCell>\r\n    </TableRow>\r\n  )\r\n}\r\n\r\nexport const CustomFields = () => {\r\n  const { addToast } = useToasts()\r\n  const dispatch = useDispatch()\r\n  const customFields = useSelector(selectAllCustomFields)\r\n  const customFieldStatus = useSelector((state) => state.customFields.status)\r\n  const error = useSelector((state) => state.customFields.error)\r\n  const success = useSelector((state) => state.customFields.success)\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [id, setId] = useState()\r\n  const [page, setPage] = useState(1)\r\n  const [data, setData] = useState([])\r\n  // pagination setup\r\n  const resultsPerPage = 10\r\n  const totalResults = customFields.length\r\n\r\n  // pagination change control\r\n  function onPageChange(p) {\r\n    setPage(p)\r\n  }\r\n  useEffect(() => {\r\n    if (customFieldStatus === 'idle') {\r\n      dispatch(fetchCustomFields())\r\n    }\r\n    if (error) {\r\n      addToast(error, {\r\n        appearance: 'error',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setErrorNull({ error: null }))\r\n    }\r\n    if (success) {\r\n      addToast(success, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setSuccessNull({ success: null }))\r\n    }\r\n  }, [customFieldStatus, dispatch, error, success])\r\n  useEffect(() => {\r\n    setData(customFields.slice((page - 1) * resultsPerPage, page * resultsPerPage))\r\n  }, [customFields, page])\r\n  function openModal(id) {\r\n    setIsModalOpen(true)\r\n    setId(id)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  function deleteConfirm(e, Id) {\r\n    e.preventDefault()\r\n    dispatch(deleteCustomField({ Id }))\r\n    closeModal()\r\n  }\r\n\r\n  let content\r\n  if (customFieldStatus === 'loading') {\r\n    content = <div className=\"loader\">Loading...</div>\r\n  } else if (customFieldStatus === 'succeeded') {\r\n    console.log(data, \"hehe2\")\r\n    let tbody = data.map((customField) => (\r\n      <CustomFieldExcerpt\r\n        key={customField.Id}\r\n        customField={customField}\r\n        openModal={openModal}\r\n      />\r\n    ))\r\n    content = (\r\n      <>\r\n        <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n          <div className=\"py-8\">\r\n            <div className=\"mb-5 my-2 flex justify-between sm:flex-row flex-col\">\r\n              <h2 className=\"text-2xl font-semibold leading-tight\">\r\n                Custom fields\r\n              </h2>\r\n              <AddCustomFieldForm />\r\n            </div>\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHeader>\r\n                  <tr>\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell>Field type</TableCell>\r\n                    <TableCell>Description</TableCell>\r\n                    <TableCell>Action</TableCell>\r\n                  </tr>\r\n                </TableHeader>\r\n                <TableBody>{tbody}</TableBody>\r\n              </Table>\r\n              <TableFooter>\r\n                <Pagination\r\n                  totalResults={totalResults}\r\n                  resultsPerPage={resultsPerPage}\r\n                  label=\"Table navigation\"\r\n                  onChange={onPageChange}\r\n                />\r\n              </TableFooter>\r\n            </TableContainer>\r\n            <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n              <ModalHeader>Delete ?</ModalHeader>\r\n              <ModalBody>\r\n                {\r\n                  \"You're about to permanently this and all of its data. If you're not sure, you can close this instead.\"\r\n                }\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <div className=\"hidden sm:block\">\r\n                  <Button layout=\"outline\" onClick={closeModal}>\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n                <div className=\"hidden sm:block\">\r\n                  <Button onClick={(e) => deleteConfirm(e, id)}>Accept</Button>\r\n                </div>\r\n              </ModalFooter>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  } else if (customFieldStatus === 'failed') {\r\n    content = <div>{error}</div>\r\n  }\r\n\r\n  return <section className=\"customFields-list\">{content}</section>\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { addNewIssueType } from '../../slices/issueTypes'\r\nimport {\r\n  Input,\r\n  Label,\r\n  Select,\r\n  Textarea,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n} from '@windmill/react-ui'\r\n\r\nexport const AddIssueTypeForm = () => {\r\n  const [name, setName] = useState('')\r\n  const [icon, setIcon] = useState('')\r\n  const [description, setDescription] = useState('')\r\n  const [addRequestStatus, setAddRequestStatus] = useState('idle')\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const onNameChanged = (e) => setName(e.target.value)\r\n  const onDescriptionChanged = (e) => setDescription(e.target.value)\r\n  const onIconChanged = (e) => setIcon(e.target.value)\r\n  const canSave = [name, icon].every(Boolean) && addRequestStatus === 'idle'\r\n\r\n  const onSaveIssueTypeClicked = async () => {\r\n    if (canSave) {\r\n      try {\r\n        setAddRequestStatus('pending')\r\n        setName('')\r\n        setIcon('')\r\n        setDescription('')\r\n        const resultAction = await dispatch(\r\n          addNewIssueType({\r\n            Name: name,\r\n            Icon: icon,\r\n            Description: description,\r\n          })\r\n        )\r\n        unwrapResult(resultAction)\r\n      } catch (err) {\r\n        console.error('Failed to save the issueType: ', err)\r\n      } finally {\r\n        setAddRequestStatus('idle')\r\n        closeModal()\r\n      }\r\n    }\r\n  }\r\n  function openModal() {\r\n    setIsModalOpen(true)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Button onClick={openModal}>Create</Button>\r\n      </div>\r\n      <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n        <ModalHeader className=\"m-2\">Add a issue type</ModalHeader>\r\n        <ModalBody class=\"overflow-auto h-80\">\r\n          <Label className=\"m-2\">\r\n            <span>Name</span>\r\n            <Input className=\"mt-1\" value={name} onChange={onNameChanged} />\r\n          </Label>\r\n          <Label className=\"m-2\">\r\n            <span>Icon</span>\r\n            <Input className=\"mt-1\" value={icon} onChange={onIconChanged} />\r\n          </Label>\r\n          <Label className=\"m-2\">\r\n            <span>Description</span>\r\n            <Textarea\r\n              className=\"mt-1\"\r\n              rows=\"3\"\r\n              value={description}\r\n              onChange={onDescriptionChanged}\r\n            />\r\n          </Label>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <div className=\"hidden sm:block\">\r\n            <Button layout=\"outline\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"hidden sm:block\">\r\n            <Button onClick={onSaveIssueTypeClicked} disabled={!canSave}>\r\n              Accept\r\n            </Button>\r\n          </div>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { updateIssueType, selectIssueTypeById } from '../../slices/issueTypes'\r\nimport {\r\n  Input,\r\n  Label,\r\n  Select,\r\n  Textarea,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  Badge,\r\n} from '@windmill/react-ui'\r\n\r\nexport const UpdateIssueTypeForm = ({ issueType }) => {\r\n  const [name, setName] = useState(issueType.Name)\r\n  const [icon, setIcon] = useState(issueType.Icon)\r\n  const [description, setDescription] = useState(issueType.Description)\r\n  const [updateRequestStatus, setUpdateRequestStatus] = useState('idle')\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const onNameChanged = (e) => setName(e.target.value)\r\n  const onDescriptionChanged = (e) => setDescription(e.target.value)\r\n  const onIconChanged = (e) => setIcon(e.target.value)\r\n  useEffect(() => {\r\n    setName(issueType.Name)\r\n    setIcon(issueType.Icon)\r\n    setDescription(issueType.Description)\r\n  }, [issueType])\r\n  const canSave = [name, icon].every(Boolean) && updateRequestStatus === 'idle'\r\n\r\n  const onSaveIssueTypeClicked = async () => {\r\n    if (canSave) {\r\n      try {\r\n        setUpdateRequestStatus('pending')\r\n        const resultAction = await dispatch(\r\n          updateIssueType({\r\n            Id: issueType.Id,\r\n            Name: name,\r\n            Icon: icon,\r\n            Description: description,\r\n          })\r\n        )\r\n        unwrapResult(resultAction)\r\n      } catch (err) {\r\n        console.error('Failed to save the issueType: ', err)\r\n        setName(issueType.Name)\r\n        setIcon(issueType.Icon)\r\n        setDescription(issueType.Description)\r\n      } finally {\r\n        setUpdateRequestStatus('idle')\r\n        closeModal()\r\n      }\r\n    }\r\n  }\r\n  function openModal() {\r\n    setIsModalOpen(true)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  return (\r\n    <>\r\n      <Badge\r\n        className=\"hover:bg-green-200 cursor-pointer\"\r\n        type={'success'}\r\n        onClick={openModal}\r\n      >\r\n        Edit\r\n      </Badge>\r\n      <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n        <ModalHeader className=\"m-2\">Edit a issue type</ModalHeader>\r\n        <ModalBody class=\"overflow-auto h-80\">\r\n          <Label className=\"m-2\">\r\n            <span>Name</span>\r\n            <Input className=\"mt-1\" value={name} onChange={onNameChanged} />\r\n          </Label>\r\n          <Label className=\"m-2\">\r\n            <span>Icon</span>\r\n            <Input className=\"mt-1\" value={icon} onChange={onIconChanged} />\r\n          </Label>\r\n\r\n          <Label className=\"m-2\">\r\n            <span>Description</span>\r\n            <Textarea\r\n              className=\"mt-1\"\r\n              rows=\"3\"\r\n              value={description}\r\n              onChange={onDescriptionChanged}\r\n            />\r\n          </Label>\r\n\r\n          {/* <Label className=\"m-2\">\r\n            <span>Disabled</span>\r\n            <Input disabled className=\"mt-1\" placeholder=\"Jane Doe\" />\r\n          </Label> */}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          {/* I don't like this approach. Consider passing a prop to ModalFooter\r\n           * that if present, would duplicate the buttons in a way similar to this.\r\n           * Or, maybe find some way to pass something like size=\"large md:regular\"\r\n           * to Button\r\n           */}\r\n          <div className=\"hidden sm:block\">\r\n            <Button layout=\"outline\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"hidden sm:block\">\r\n            <Button onClick={onSaveIssueTypeClicked} disabled={!canSave}>\r\n              Accept\r\n            </Button>\r\n          </div>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  selectAllIssueTypes,\r\n  fetchIssueTypes,\r\n  deleteIssueType,\r\n  setErrorNull,\r\n  setSuccessNull,\r\n} from '../slices/issueTypes'\r\nimport {\r\n  selectAllProjectIssueTypeScreens,\r\n  fetchProjectIssueTypeScreens,\r\n} from '../slices/projectIssueTypeScreens'\r\nimport { selectAllScreens, fetchScreens } from '../slices/screens'\r\nimport { fetchProjects, selectAllProjects } from '../slices/projects'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  TableBody,\r\n  TableContainer,\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableRow,\r\n  TableFooter,\r\n  Avatar,\r\n  Badge,\r\n  Pagination,\r\n} from '@windmill/react-ui'\r\nimport { AddIssueTypeForm } from '../components/IssueType/AddIssueTypeForm'\r\nimport { UpdateIssueTypeForm } from '../components/IssueType/UpdateIssueTypeForm'\r\n\r\nconst IssueTypeExcerpt = ({\r\n  issueType,\r\n  projectIssueTypeScreensHaveName,\r\n  openModal,\r\n}) => {\r\n  return (\r\n    <TableRow key={issueType.Id}>\r\n      <TableCell>\r\n        <div className=\"flex items-center text-sm\">\r\n          <div>\r\n            <p className=\"font-semibold\">{issueType.Name}</p>\r\n          </div>\r\n        </div>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">{issueType.Icon}</span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span className=\"text-sm\">{issueType.Description}</span>\r\n      </TableCell>\r\n      <TableCell>\r\n        <UpdateIssueTypeForm issueType={issueType} />\r\n        <Badge\r\n          className=\"ml-1 hover:bg-red-200 cursor-pointer\"\r\n          type={'danger'}\r\n          onClick={() => openModal(issueType.Id)}\r\n        >\r\n          Delete\r\n        </Badge>\r\n        <Badge\r\n          className=\"ml-1 hover:bg-gray-200 cursor-pointer\"\r\n          type={'neutral'}\r\n          onClick={() => openModal(issueType.Id)}\r\n        >\r\n          <Link\r\n            to={{\r\n              pathname: `/app/issueTypes/projectIssueTypeScreens/${issueType.Id}`,\r\n              state: { issueType, projectIssueTypeScreensHaveName },\r\n            }}\r\n          >\r\n            Configure\r\n          </Link>\r\n        </Badge>\r\n      </TableCell>\r\n    </TableRow>\r\n  )\r\n}\r\n\r\nexport const IssueTypes = () => {\r\n  const { addToast } = useToasts()\r\n  const dispatch = useDispatch()\r\n  const issueTypes = useSelector(selectAllIssueTypes)\r\n  const projectIssueTypeScreens = useSelector(selectAllProjectIssueTypeScreens)\r\n  const screens = useSelector(selectAllScreens)\r\n  const projects = useSelector(selectAllProjects)\r\n\r\n  const issueTypeStatus = useSelector((state) => state.issueTypes.status)\r\n  const projectIssueTypeScreenStatus = useSelector(\r\n    (state) => state.projectIssueTypeScreens.status\r\n  )\r\n  const screenStatus = useSelector((state) => state.screens.status)\r\n  const projectStatus = useSelector((state) => state.projects.loading)\r\n\r\n  const error = useSelector((state) => state.issueTypes.error)\r\n  const success = useSelector((state) => state.issueTypes.success)\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [id, setId] = useState()\r\n  const errorProjectIssueTypeScreen = useSelector(\r\n    (state) => state.projectIssueTypeScreens.error\r\n  )\r\n  const errorScreens = useSelector((state) => state.screens.error)\r\n  const [page, setPage] = useState(1)\r\n  const [data, setData] = useState([])\r\n  // pagination setup\r\n  const resultsPerPage = 10\r\n  const totalResults = issueTypes.length\r\n\r\n  // pagination change control\r\n  function onPageChange(p) {\r\n    setPage(p)\r\n  }\r\n  useEffect(() => {\r\n    if (issueTypeStatus === 'idle') {\r\n      dispatch(fetchIssueTypes())\r\n    }\r\n    if (projectIssueTypeScreenStatus === 'idle') {\r\n      dispatch(fetchProjectIssueTypeScreens())\r\n    }\r\n    if (screenStatus === 'idle') {\r\n      dispatch(fetchScreens())\r\n    }\r\n    if (projects.length === 0 && projectStatus === false) {\r\n      dispatch(fetchProjects())\r\n    }\r\n    if (error) {\r\n      addToast(error, {\r\n        appearance: 'error',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setErrorNull({ error: null }))\r\n    }\r\n    if (success) {\r\n      addToast(success, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setSuccessNull({ success: null }))\r\n    }\r\n  }, [\r\n    issueTypeStatus,\r\n    projectIssueTypeScreenStatus,\r\n    screenStatus,\r\n    dispatch,\r\n    error,\r\n    success,\r\n  ])\r\n  useEffect(() => {\r\n    setData(\r\n      issueTypes.slice((page - 1) * resultsPerPage, page * resultsPerPage)\r\n    )\r\n  }, [issueTypes, page])\r\n  function openModal(id) {\r\n    setIsModalOpen(true)\r\n    setId(id)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  function deleteConfirm(e, Id) {\r\n    e.preventDefault()\r\n    dispatch(deleteIssueType({ Id }))\r\n    closeModal()\r\n  }\r\n  let content\r\n  //console.log(issueTypeStatus, projectIssueTypeScreenStatus, screenStatus, projectStatus, \"lllllllllllllllll\")\r\n  if (\r\n    issueTypeStatus === 'loading' ||\r\n    projectIssueTypeScreenStatus === 'loading' ||\r\n    screenStatus === 'loading' ||\r\n    projectStatus === true\r\n  ) {\r\n    content = <div className=\"loader\">Loading...</div>\r\n  } else if (\r\n    issueTypeStatus === 'succeeded' &&\r\n    projectIssueTypeScreenStatus === 'succeeded' &&\r\n    screenStatus === 'succeeded' &&\r\n    projectStatus === false\r\n  ) {\r\n    // gan ten cua screen va project vao danh sach\r\n    const projectIssueTypeScreensHaveName = []\r\n    projectIssueTypeScreens.forEach((element) => {\r\n      screens.forEach((ele) => {\r\n        if (element.Screen === ele.Id) {\r\n          projectIssueTypeScreensHaveName.push({\r\n            ...element,\r\n            ScreenName: ele.Name,\r\n          })\r\n        }\r\n      })\r\n    })\r\n    projectIssueTypeScreensHaveName.forEach((element) => {\r\n      projects.forEach((ele) => {\r\n        if (element.Project === ele.ProjectKey) {\r\n          element.ProjectName = ele.ProjectName\r\n        }\r\n      })\r\n    })\r\n\r\n    let tbody = data.map((issueType) => {\r\n      const temp = projectIssueTypeScreensHaveName.filter(\r\n        (item1) => item1.Issue_Type === issueType.Id\r\n      )\r\n      return (\r\n        <IssueTypeExcerpt\r\n          key={issueType.Id}\r\n          issueType={issueType}\r\n          projectIssueTypeScreensHaveName={temp}\r\n          openModal={openModal}\r\n        />\r\n      )\r\n    })\r\n    content = (\r\n      <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n        <div className=\"py-8\">\r\n          <div className=\"mb-5 my-2 flex justify-between sm:flex-row flex-col\">\r\n            <h2 className=\"text-2xl font-semibold leading-tight\">Issue types</h2>\r\n            <AddIssueTypeForm />\r\n          </div>\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHeader>\r\n                <tr>\r\n                  <TableCell>Name</TableCell>\r\n                  <TableCell>Icon</TableCell>\r\n                  <TableCell>Description</TableCell>\r\n\r\n                  <TableCell>Action</TableCell>\r\n                </tr>\r\n              </TableHeader>\r\n              <TableBody>{tbody}</TableBody>\r\n            </Table>\r\n            <TableFooter>\r\n              <Pagination\r\n                totalResults={totalResults}\r\n                resultsPerPage={resultsPerPage}\r\n                label=\"Table navigation\"\r\n                onChange={onPageChange}\r\n              />\r\n            </TableFooter>\r\n          </TableContainer>\r\n          <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n            <ModalHeader>Delete ?</ModalHeader>\r\n            <ModalBody>\r\n              {\r\n                \"You're about to permanently this and all of its data. If you're not sure, you can close this instead.\"\r\n              }\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <div className=\"hidden sm:block\">\r\n                <Button layout=\"outline\" onClick={closeModal}>\r\n                  Cancel\r\n                </Button>\r\n              </div>\r\n              <div className=\"hidden sm:block\">\r\n                <Button onClick={(e) => deleteConfirm(e, id)}>Accept</Button>\r\n              </div>\r\n            </ModalFooter>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else if (issueTypeStatus === 'failed') {\r\n    content = <div>{error}</div>\r\n  }\r\n\r\n  return <section className=\"issueTypes-list\">{content}</section>\r\n}\r\n","import React from 'react'\r\nimport DialogModal from '../DialogModal'\r\nimport FormInput from '../Form/FormInputNew'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from '../../store'\r\nimport { statussSelector,updateStatus } from '../../slices/statuss'\r\nimport { DialogActions, DialogContent } from '../DialogModal'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nfunction UpdateStatusModal({ modalDialog }) {\r\n\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { register, handleSubmit } = useForm()\r\n  const { statusUpdate } = useSelector(statussSelector)\r\n\r\n  const { handleClose } = modalDialog\r\n  const onSubmit = (data) => {\r\n    \r\n    dispatch(updateStatus({ id: statusUpdate.StatusId, data }))\r\n    handleClose()\r\n  }\r\n  return (\r\n    <>\r\n      <DialogModal\r\n        title=\"Status\"\r\n        modalDialog={modalDialog}\r\n        handleSubmit={handleSubmit(onSubmit)}\r\n      >\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <DialogContent dividers className=\"mx-12\">\r\n            <FormInput\r\n              r={register}\r\n              name=\"StatusName\"\r\n             label={'Status Name'}\r\n              value={statusUpdate.StatusName}\r\n              required\r\n            />\r\n            <FormInput \r\n              r={register}\r\n              name=\"StatusDescription\"\r\n              label={'Description'}\r\n              value={statusUpdate.StatusDescription}\r\n              \r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <div className=\"my-3 mx-5\">\r\n              <Button onClick={handleClose} color=\"secondary\">\r\n                Cancel\r\n              </Button>\r\n              <Button type=\"submit\" color=\"primary\">\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </DialogActions>\r\n        </form>\r\n      </DialogModal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UpdateStatusModal\r\n","import React, {useState} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAppDispatch } from '../../store'\r\nimport { deleteStatus,setStatusUpdate} from '../../slices/statuss'\r\nimport StatusModal from './UpdateStatusModal';\r\nimport { TableCell, TableRow, Button, ModalHeader, ModalBody,ModalFooter,Modal,Badge } from '@windmill/react-ui'\r\nimport { useToasts } from 'react-toast-notifications'\r\n\r\nconst StatusItem = ({ status }) => {\r\n  const {addToast} = useToasts()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const [isModalOpen, setIsModalOpen, deleteP] = useState(false)\r\n\r\n  function openModal() {\r\n    setIsModalOpen(true)\r\n  }\r\n \r\n\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  function deleteConfirm(e, statusId) {\r\n    e.preventDefault()\r\n    \r\n      dispatch(deleteStatus(statusId))\r\n      // addToast(\"Delete Status Success\", {\r\n      //   appearance: 'success',\r\n      //   autoDismiss: true,\r\n      // })\r\n    \r\n  }\r\n\r\n  const [openUpdate, setOpenUpdate] = React.useState(false)\r\n\r\n  const handleOpenUpdate = (e, status) => {\r\n    e.preventDefault()\r\n    dispatch(setStatusUpdate(status))\r\n    setOpenUpdate(true)\r\n  }\r\n  const handleCloseUpdate = () => {\r\n    setOpenUpdate(false)\r\n  }\r\n  const modalUpdate = {\r\n    open: openUpdate,\r\n    handleOpen: handleOpenUpdate,\r\n    handleClose: handleCloseUpdate,\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <StatusModal modalDialog={modalUpdate} />\r\n      <TableRow key={status.StatusId}>\r\n            <TableCell className=\"px-5 py-5 font-semibold border-b border-gray-200 bg-white text-sm\">\r\n              \r\n              <span>{status.StatusName}</span>\r\n            </TableCell>\r\n            <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n             \r\n              <span>{status.StatusDescription}</span>\r\n            </TableCell>\r\n           \r\n            <TableCell className=\"px-5 py-5 text-center border-b border-gray-200 bg-white text-sm\">\r\n              <Badge \r\n                className=\"ml-1 hover:bg-green-200 cursor-pointer\"\r\n                onClick={(e) => handleOpenUpdate(e, status)} \r\n                    type={'success'} >\r\n              \r\n              \r\n                \r\n                Edit\r\n              </Badge>\r\n              <Badge \r\n                    className=\"ml-1 hover:bg-red-200 cursor-pointer\"\r\n                    onClick={openModal}\r\n                    type={'danger'} >\r\n                  \r\n                \r\n                  \r\n                  Delete\r\n                \r\n              </Badge>\r\n              <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n                <ModalHeader>Delete Status</ModalHeader>\r\n                  <ModalBody>\r\n                    Are you sure DELETE this Status!\r\n                  </ModalBody>\r\n                <ModalFooter>\r\n          {/* I don't like this approach. Consider passing a prop to ModalFooter\r\n           * that if present, would duplicate the buttons in a way similar to this.\r\n           * Or, maybe find some way to pass something like size=\"large md:regular\"\r\n           * to Button\r\n           */}\r\n              <div className=\"hidden sm:block\">\r\n                <Button layout=\"outline\" onClick={closeModal}>\r\n                  Cancel\r\n                </Button>\r\n              </div>\r\n              <div className=\"hidden sm:block\" onClick={(e) => deleteConfirm(e, status.StatusId)}>\r\n                <Button>Accept</Button>\r\n              </div>\r\n              <div className=\"block w-full sm:hidden\">\r\n                <Button block size=\"large\" layout=\"outline\" onClick={closeModal}>\r\n                  Cancel\r\n                </Button>\r\n              </div>\r\n              <div className=\"block w-full sm:hidden\">\r\n                <Button block size=\"large\">\r\n                  Accept\r\n                </Button>\r\n              </div>\r\n                </ModalFooter>\r\n      </Modal>\r\n            </TableCell>\r\n          </TableRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StatusItem\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { fetchStatuss, statussSelector,setState  } from '../slices/statuss'\r\nimport { Link } from 'react-router-dom'\r\nimport StatusItem from '../components/Status/StatusItem'\r\nimport { useAppDispatch } from '../store'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableBody,\r\n  TableRow,\r\n  TableFooter,\r\n  TableContainer,\r\n  Button,\r\n  Pagination,\r\n  Select\r\n} from '@windmill/react-ui'\r\nconst Statuss = () => {\r\n  \r\n  \r\n  const { addToast } = useToasts()\r\n  const dispatch = useAppDispatch()\r\n  const { updateMess, updateSuccess,statuss, loading, hasErrors } = useSelector(statussSelector)\r\n  useEffect(() => {\r\n    dispatch(fetchStatuss())\r\n  }, [dispatch])\r\n  useEffect(() => {\r\n         if (updateSuccess) {\r\n           addToast(\" Success\", {\r\n               appearance: 'success',\r\n               autoDismiss: true,\r\n           })\r\n           dispatch(setState())\r\n         }\r\n       }, [updateSuccess])\r\n\r\n  \r\n    // setup pages control for every table\r\n  const [pageTable1, setPageTable1] = useState(1)\r\n  // setup data for every table \r\n  const [dataTable1, setDataTable1] = useState([])\r\n  // pagination setup\r\n  const resultsPerPage = 5\r\n  const totalResults = statuss.length\r\n  // pagination change control\r\n  function onPageChangeTable1(p) {\r\n    setPageTable1(p)\r\n  }\r\n  // on page change, load new sliced data\r\n  // here you would make another server request for new data\r\n  useEffect(() => {\r\n    setDataTable1(statuss.slice((pageTable1 - 1) * resultsPerPage, pageTable1 * resultsPerPage))\r\n  }, [statuss,pageTable1])\r\n\r\n\r\n\r\n  //search user\r\n  //setup search\r\n  const [searchTerm, setSearchTerm] = React.useState('')\r\n  const [searchResults, setSearchResults] = React.useState([])\r\n  //setup select \r\n  const [selectTerm, setSelectTerm] = React.useState('')\r\n  const handleChange = (e) => {\r\n    setSearchTerm(e.target.value)\r\n  }\r\n  const handleSelect = (e) =>{\r\n    setSelectTerm(e.target.value)\r\n  }\r\n  useEffect(() => {\r\n    const results = statuss.filter(\r\n      (person) =>\r\n        person.StatusName.toLowerCase().indexOf(searchTerm.toLowerCase()) !=\r\n          -1 \r\n        // person.User_Full_Name.toLowerCase().indexOf(searchTerm.toLowerCase()) !=\r\n        //   -1\r\n    )\r\n    setSearchResults(results)\r\n  }, [searchTerm])\r\n  useEffect(() => {\r\n    const resultsSelect = statuss.filter(\r\n      (person) => person.WorkflowId == selectTerm\r\n    )\r\n    setSearchResults(resultsSelect)\r\n  }, [selectTerm])\r\n  //render user\r\n  const renderStatus = () => {\r\n    if (\r\n      (searchTerm == '' && selectTerm == 'All') ||\r\n      (searchTerm == '' && selectTerm == '')\r\n    ) {\r\n      if(statuss){\r\n      return dataTable1.map((status) => <StatusItem key={status.StatusId} status={status} />)\r\n      }\r\n      else return <div> NULL STATUS </div>\r\n    } else {\r\n      return searchResults.map((status) => (\r\n        <StatusItem key={status.StatusId} status={status} />\r\n      ))\r\n    }\r\n  }\r\n  \r\n  \r\n\r\n  if (loading) {\r\n    return (\r\n      <tr>\r\n        <div className=\"loader\">Loading...</div>\r\n      </tr>\r\n    )\r\n  }\r\n  if (hasErrors) return <p>Unable to get Projects.</p>\r\n  return (\r\n    <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n      <div className=\"py-8\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-semibold leading-tight\"> Status</h2>\r\n        </div>\r\n<div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n          <div className=\"flex\">\r\n            <Link to=\"/app/status-manager/create-status\">\r\n              <Button >\r\n                Create status\r\n              </Button>\r\n            </Link>\r\n            {/* <Link to=\"/invite-user\">\r\n              <button className=\"bg-white border shadow-sm px-3 py-1.5 rounded-md hover:text-green-500 text-gray-700 ml-1\">\r\n                Invite Users\r\n              </button        ton>\r\n            </Link> */}\r\n          </div>\r\n          <div className=\"flex relative\">\r\n              <span className=\"h-full absolute inset-y-0 right-2 flex items-center pl-2\">\r\n                <svg\r\n                  viewBox=\"0 0 24 24\"\r\n                  className=\"h-4 w-4 fill-current text-gray-500\"\r\n                >\r\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\r\n                </svg>\r\n              </span>\r\n              <input\r\n                placeholder=\"Search\"\r\n                className=\"appearance-none rounded-r rounded-l sm:rounded-l-none border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\r\n                value={searchTerm}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n        </div>\r\n        <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\r\n          <div className=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\r\n            <table className=\"min-w-full leading-normal\">\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    Status Name\r\n                  </th>\r\n                  <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    Description\r\n                  </th>\r\n                  {/* <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    Email\r\n                  </th> */}\r\n                  {/* <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    Group name\r\n                  </th> */}\r\n                  <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    Action\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>{renderStatus()}</tbody>\r\n            </table>\r\n            <TableFooter>\r\n          <Pagination\r\n            totalResults={totalResults}\r\n            resultsPerPage={resultsPerPage}\r\n            onChange={onPageChangeTable1}\r\n            label=\"Table navigation\"\r\n          />\r\n        </TableFooter>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Statuss\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAppDispatch } from '../../store'\r\nimport { deleteProjectInWorkflow } from '../../slices/wor-pro'\r\nimport { TableCell, TableRow, Badge } from '@windmill/react-ui'\r\nimport { useToasts } from 'react-toast-notifications'\r\nexport default function WorkflowProjectItem({ workflow_project }) {\r\n\r\n  const dispatch = useAppDispatch()\r\n  const {addToast} = useToasts()\r\n  function deleteConfirm(e, WorkflowId, ProjectKey) {\r\n    e.preventDefault()\r\n    \r\n      dispatch(deleteProjectInWorkflow(WorkflowId,ProjectKey))\r\n      addToast(\"Delete Status Success\", {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n    \r\n  }\r\n\r\n\r\n  \r\n  return (\r\n    <>\r\n      {/* <ProjectModal modalDialog={modalUpdate} /> */}\r\n      <tr>\r\n        <td className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          <div className=\"flex items-center\">\r\n            <TableCell className=\"ml-3\">\r\n             \r\n                {workflow_project.ProjectName}\r\n                    \r\n                 \r\n            </TableCell>\r\n          </div>\r\n        </td>\r\n        {/* <td className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n            <Link to=\"#\">\r\n              <a className=\"text-blue-400 whitespace-no-wrap\">\r\n                {workflow.Workflow_Description}\r\n              </a>\r\n            </Link>\r\n          </td> */}\r\n        {/* <td className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n            <Link to=\"#\">\r\n              <ul className=\"text-blue-400 whitespace-no-wrap\">\r\n                {renderWorkflowProject()}\r\n              </ul>\r\n            </Link>\r\n          </td> */}\r\n\r\n        <td className=\"px-5 py-5 text-center border-b border-gray-200 bg-white text-sm\">\r\n          {/* <span className=\"relative inline-block px-3 py-1 font-semibold text-green-900 leading-tight\">\r\n              <span\r\n                aria-hidden\r\n                className=\"absolute inset-0 bg-green-200 opacity-50 rounded-full\"\r\n              />\r\n               <a \r\n                // onClick={(e) => handleOpenUpdate(e,workflow)}\r\n                className=\"relative cursor-pointer\"\r\n              >\r\n                Edit\r\n              </a>\r\n            </span> */}\r\n           <Badge\r\n              className=\"hover:bg-green-200 cursor-pointer\"\r\n              type={'success'}\r\n              onClick={(e) => deleteConfirm(e, workflow_project.WorkflowId,workflow_project.ProjectKey)}\r\n             \r\n              >\r\n            \r\n            \r\n              Delete\r\n              </Badge>\r\n          \r\n        </td>\r\n      </tr>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport DialogModal from '../DialogModal'\r\nimport { DialogActions, DialogContent } from '../DialogModal'\r\nimport FormInput from '../Form/FormInput'\r\n\r\nimport { Button } from '@windmill/react-ui'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useAppDispatch } from '../../store'\r\nimport { AddProjectToWorkflow } from '../../slices/wor-pro'\r\nimport { fetchProjects, projectsSelector } from '../../slices/projects'\r\nimport { useSelector } from 'react-redux'\r\nimport projectApi from '../../api/projectApi'\r\nimport axios from 'axios'\r\n\r\nexport default function UpdateProjectWorkflow({ modalDialog }) {\r\n  const { handleClose, data_workflow } = modalDialog\r\n  const [fullData, setResult] = useState([])\r\n  useEffect(() => {\r\n    if (modalDialog) {\r\n      // transitionApi.getTransitionStatus(transition.TransitionId).then((data) => {\r\n      //   console.log(data.Data)\r\n      //   setResult(data.Data)\r\n      console.log(modalDialog)\r\n      axios({\r\n        method: 'get',\r\n        url: 'http://localhost:5001/api/projects/projectkey',\r\n        responseType: 'stream'\r\n      })\r\n        .then(function (response) {\r\n          console.log(response)\r\n          setResult(response.data.Data)\r\n        });\r\n      \r\n    }\r\n  }, [])\r\n  const dispatch = useAppDispatch()\r\n\r\n  const { register, handleSubmit } = useForm()\r\n  const { projects, loading, hasErrors } = useSelector(projectsSelector)\r\n  useEffect(() => {\r\n    dispatch(fetchProjects())\r\n  }, [dispatch])\r\n\r\n  const onSubmit = (data) => {\r\n    let project_name\r\n    projects.map((temp) => {\r\n      if (temp.ProjectKey == data.idproject) {\r\n        project_name = temp.ProjectName\r\n      }\r\n    })\r\n    //data gửi qua slice\r\n    const postdata = {\r\n      idworkflow: data_workflow.WorkflowId.toString(), //props\r\n      idproject: data.idproject,\r\n      ProjectName: project_name,\r\n      ProjectKey: data.idproject,\r\n      WorkflowId: data_workflow.WorkflowId.toString(),\r\n    }\r\n    dispatch(AddProjectToWorkflow(postdata))\r\n    handleClose()\r\n  }\r\n  //filter project which workflow don't aleardy\r\n\r\n  let id_project = []\r\n  projects.map((temp) => {\r\n    id_project.push(temp.ProjectKey)\r\n  })\r\n  fullData?.map((temp) => {\r\n    id_project.push(temp.ProjectKey)\r\n  })\r\n  //console.log(projects)\r\n  //console.log(\"kkkk\")\r\n  //console.log(fullData)\r\n  const temp = projects.filter(\r\n    (item1) => !fullData?.some((item2) => item1.ProjectKey === item2.ProjectKey)\r\n  )\r\n\r\n  var options = temp ? temp.map((option) => {\r\n    return (\r\n      <option key={option.ProjectKey} value={option.ProjectKey}>\r\n        {option.ProjectName}\r\n      </option>\r\n    )\r\n  }) : ''\r\n\r\n  return (\r\n    <>\r\n      <DialogModal\r\n        title=\"Grant Workflow\"\r\n        modalDialog={modalDialog}\r\n        // handleSubmit={handleSubmit(onSubmit)}\r\n      >\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <DialogContent dividers className=\"mx-12\">\r\n            <div className=\"grid grid-cols-1 my-4\">\r\n              <label className=\"uppercase md:text-sm text-xs text-gray-500 text-light\">\r\n                Project\r\n              </label>\r\n              <select\r\n                className=\"py-2 px-3 rounded-md border border-green-500 mt-2 focus:outline-none focus:ring-1 focus:ring-green-700 focus:border-transparent\"\r\n                {...register('idproject')}\r\n              >\r\n                {options}\r\n              </select>\r\n            </div>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <div className=\"hidden sm:block m-2\">\r\n              <Button layout=\"outline\" onClick={handleClose} color=\"secondary\">\r\n                Cancel\r\n              </Button>\r\n              </div>\r\n            <div className=\"hidden sm:block m-2\">\r\n              <Button type=\"submit\" color=\"primary\">\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </DialogActions>\r\n        </form>\r\n      </DialogModal>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { fetchTransitions,getDataByIdWorkflow,transitionsSelector } from '../slices/transition'\r\nimport { fetchTransitionStatuss,transitionStatussSelector } from '../slices/tra-sta'\r\nimport { fetchStatuss, statussSelector,setState  } from '../slices/statuss'\r\nimport { useAppDispatch } from '../store'\r\nimport { useSelector } from 'react-redux'\r\nimport TransitionItem from '../components/Transition/TransitionItem'\r\nimport { Link } from 'react-router-dom'\r\nimport { workflowsSelector } from '../slices/workflows'\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableBody,\r\n  TableRow,\r\n  TableFooter,\r\n  TableContainer,\r\n  Button,\r\n  Pagination,\r\n  Select\r\n} from '@windmill/react-ui'\r\n const TransitionManager= () => {\r\n    const {workflowUpdate} = useSelector(workflowsSelector)\r\n    if (workflowUpdate.WorkflowId) {\r\n      localStorage.setItem('Workflow', JSON.stringify(workflowUpdate))\r\n    }\r\n    let temp = JSON.parse(localStorage.getItem('Workflow') || '[]' )\r\n    const dispatch = useAppDispatch()\r\n    \r\n    const { transitions,loading, hasErrors } = useSelector(transitionsSelector)\r\n   useEffect(() => {\r\n        dispatch(getDataByIdWorkflow(temp.WorkflowId)) \r\n    }, [dispatch])\r\n    localStorage.setItem('TransitionAll', JSON.stringify(transitions))\r\n\r\n    // setup pages control for every table\r\n  const [pageTable1, setPageTable1] = useState(1)\r\n  // setup data for every table \r\n  const [dataTable1, setDataTable1] = useState([])\r\n  // pagination setup\r\n  const resultsPerPage =5\r\n  const totalResults = transitions.length\r\n  // pagination change control\r\n  function onPageChangeTable1(p) {\r\n    setPageTable1(p)\r\n  }\r\n  // on page change, load new sliced data\r\n  // here you would make another server request for new data\r\n  useEffect(() => {\r\n    setDataTable1(transitions.slice((pageTable1 - 1) * resultsPerPage, pageTable1 * resultsPerPage))\r\n  }, [transitions, pageTable1])\r\n\r\n    const renderTransition = () =>\r\n       {    if(transitions)\r\n            return dataTable1.map((transition)=>\r\n            <TransitionItem key={transition.TransitionId} transition={transition} />\r\n        )\r\n        else return <div>NULL</div>\r\n    }\r\n    \r\n    if (loading) {\r\n      return (\r\n        <tr>\r\n          <div className=\"loader\">Loading...</div>\r\n        </tr>\r\n      )\r\n    }\r\n\r\n    if (hasErrors) return <p>Unable to get Transition.</p>\r\n    return (\r\n        <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n        <div className=\"py-8\">\r\n          <div>\r\n            <h2 className=\"text-2xl font-semibold leading-tight\">Transition</h2>\r\n          </div>\r\n          <div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n          <div className=\"flex\">\r\n            <Link to=\"/app/workflows-manager/transitions-manager/create-transitions\">\r\n              <Button >\r\n                Create Transition\r\n              </Button>\r\n            </Link>\r\n            {/* <Link to=\"/invite-user\">\r\n              <button className=\"bg-white border shadow-sm px-3 py-1.5 rounded-md hover:text-green-500 text-gray-700 ml-1\">\r\n                Invite Users\r\n              </button>\r\n            </Link> */}\r\n          </div>\r\n          <div className=\"flex\">\r\n            <Link to=\"/app/workflows-manager/transitions-manager/view-diagram\">\r\n              <Button >\r\n                View Diagram\r\n              </Button>\r\n            </Link>\r\n            {/* <Link to=\"/invite-user\">\r\n              <button className=\"bg-white border shadow-sm px-3 py-1.5 rounded-md hover:text-green-500 text-gray-700 ml-1\">\r\n                Invite Users\r\n              </button>\r\n            </Link> */}\r\n          </div>\r\n        </div>\r\n          <div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n            <div className=\"flex\">\r\n              {/* <Link to=\"/create-statuss\">\r\n                <button className=\"bg-white border shadow-sm px-3 py-1.5 rounded-md hover:text-green-500 text-gray-700\">\r\n                  Create status\r\n                </button>\r\n              </Link> */}\r\n              {/* <Link to=\"/invite-user\">\r\n                <button className=\"bg-white border shadow-sm px-3 py-1.5 rounded-md hover:text-green-500 text-gray-700 ml-1\">\r\n                  Invite Users\r\n                </button>\r\n              </Link> */}\r\n            </div>\r\n          </div>\r\n          <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\r\n            <div className=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\r\n              <table className=\"min-w-full leading-normal\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Name Transition\r\n                    </th>\r\n                    \r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Status 1\r\n                    </th>\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Status 2\r\n                    </th>\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Action\r\n                    </th>\r\n                    {/* <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Group name\r\n                    </th> */}\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      {/* Action */}\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>{renderTransition()}</tbody>\r\n              </table>\r\n              <TableFooter>\r\n          <Pagination\r\n            totalResults={totalResults}\r\n            resultsPerPage={resultsPerPage}\r\n            onChange={onPageChangeTable1}\r\n            label=\"Table navigation\"\r\n          />\r\n        </TableFooter>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\nexport default TransitionManager","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport {\r\n  addNewProjectIssueTypeScreen,\r\n  deleteProjectIssueTypeScreen,\r\n  setErrorNull,\r\n  setSuccessNull,\r\n} from '../slices/projectIssueTypeScreens'\r\nimport { selectAllScreens } from '../slices/screens'\r\nimport { selectAllProjects } from '../slices/projects'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  TableBody,\r\n  TableContainer,\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableRow,\r\n  TableFooter,\r\n  Avatar,\r\n  Badge,\r\n  Pagination,\r\n  Label,\r\n  Select,\r\n} from '@windmill/react-ui'\r\n\r\nconst ProjectIssueTypeScreenExcerpt = ({\r\n  projectIssueTypeScreen,\r\n  openModal,\r\n}) => {\r\n  return (\r\n    <TableRow key={projectIssueTypeScreen.Id}>\r\n      <TableCell>\r\n        <div className=\"flex items-center text-sm\">\r\n          <div>\r\n            <p className=\"font-semibold\">{`${projectIssueTypeScreen.ProjectName} (${projectIssueTypeScreen.Project})`}</p>\r\n          </div>\r\n        </div>\r\n      </TableCell>\r\n      <TableCell>\r\n        <div className=\"flex items-center text-sm\">\r\n          <div>\r\n            <p className=\"font-semibold\">{projectIssueTypeScreen.ScreenName}</p>\r\n          </div>\r\n        </div>\r\n      </TableCell>\r\n      <TableCell>\r\n        <Badge\r\n          className=\"ml-1 hover:bg-red-200 cursor-pointer\"\r\n          type={'danger'}\r\n          onClick={() => openModal(projectIssueTypeScreen.Id)}\r\n        >\r\n          Delete\r\n        </Badge>\r\n      </TableCell>\r\n    </TableRow>\r\n  )\r\n}\r\n\r\nexport const ProjectIssueTypeScreens = () => {\r\n  const { addToast } = useToasts()\r\n  const location = useLocation()\r\n  const issueType = location.state?.issueType\r\n  const [rows, setRows] = useState(\r\n    location.state?.projectIssueTypeScreensHaveName\r\n  )\r\n\r\n  // code below add new project issue type screen\r\n  const dispatch = useDispatch()\r\n  const screens = useSelector(selectAllScreens)\r\n  const projects = useSelector(selectAllProjects)\r\n  const filteredProjects = projects.filter(\r\n    (item1) => !rows.some((item2) => item1.ProjectKey === item2.Project)\r\n  )\r\n\r\n  const filteredScreensOptions = screens.map((screen) => (\r\n    <option key={screen.Id} value={screen.Id}>\r\n      {screen.Name}\r\n    </option>\r\n  ))\r\n  const filteredProjectsOptions = filteredProjects.map((project) => (\r\n    <option key={project.ProjectKey} value={project.ProjectKey}>\r\n      {project.ProjectName}\r\n    </option>\r\n  ))\r\n\r\n  const [screen, setScreen] = useState('')\r\n  const onScreenChanged = (e) => setScreen(e.target.value)\r\n  const [project, setProject] = useState('')\r\n  const onProjectChanged = (e) => setProject(e.target.value)\r\n  const [addRequestStatus, setAddRequestStatus] = useState('idle')\r\n  const canSave =\r\n    [screen, project].every(Boolean) && addRequestStatus === 'idle'\r\n\r\n  const onSaveClicked = async () => {\r\n    if (canSave) {\r\n      try {\r\n        setAddRequestStatus('pending')\r\n        setScreen('')\r\n        setProject('')\r\n        const resultAction = await dispatch(\r\n          addNewProjectIssueTypeScreen({\r\n            Project: project,\r\n            Issue_Type: issueType.Id,\r\n            Screen: Number(screen),\r\n          })\r\n        ).then((res) => {\r\n          let result = [res.payload.Data]\r\n          const projectIssueTypeScreensHaveName = []\r\n          result.forEach((element) => {\r\n            screens.forEach((ele) => {\r\n              if (element.Screen === ele.Id) {\r\n                projectIssueTypeScreensHaveName.push({\r\n                  ...element,\r\n                  ScreenName: ele.Name,\r\n                })\r\n              }\r\n            })\r\n          })\r\n          projectIssueTypeScreensHaveName.forEach((element) => {\r\n            projects.forEach((ele) => {\r\n              if (element.Project === ele.ProjectKey) {\r\n                element.ProjectName = ele.ProjectName\r\n              }\r\n            })\r\n          })\r\n          setRows((oldArray) => [\r\n            ...oldArray,\r\n            ...projectIssueTypeScreensHaveName,\r\n          ])\r\n        })\r\n      } catch (err) {\r\n        console.error('Failed to save the customField: ', err)\r\n      } finally {\r\n        setAddRequestStatus('idle')\r\n      }\r\n    }\r\n  }\r\n  const projectIssueTypeScreenStatus = useSelector(\r\n    (state) => state.projectIssueTypeScreens.status\r\n  )\r\n  const error = useSelector((state) => state.projectIssueTypeScreens.error)\r\n  const success = useSelector((state) => state.projectIssueTypeScreens.success)\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [id, setId] = useState()\r\n  const [page, setPage] = useState(1)\r\n  const [data, setData] = useState([])\r\n  // pagination setup\r\n  const resultsPerPage = 10\r\n  const totalResults = rows.length\r\n\r\n  // pagination change control\r\n  function onPageChange(p) {\r\n    setPage(p)\r\n  }\r\n  useEffect(() => {\r\n    if (error) {\r\n      addToast(error, {\r\n        appearance: 'error',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setErrorNull({ error: null }))\r\n    }\r\n    if (success) {\r\n      addToast(success, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setSuccessNull({ success: null }))\r\n    }\r\n  }, [projectIssueTypeScreenStatus, dispatch, error, success])\r\n  useEffect(() => {\r\n    setData(rows.slice((page - 1) * resultsPerPage, page * resultsPerPage))\r\n  }, [page, rows])\r\n  function openModal(id) {\r\n    setIsModalOpen(true)\r\n    setId(id)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  function deleteConfirm(e, id) {\r\n    e.preventDefault()\r\n    dispatch(deleteProjectIssueTypeScreen({ Id: id })).then((res) =>\r\n      deleteRow(res.payload.Data.Id)\r\n    )\r\n    closeModal()\r\n  }\r\n  const deleteRow = (Id) => {\r\n    const result = rows.filter((ele) => ele.Id !== Id)\r\n    setRows(result)\r\n  }\r\n  let content\r\n\r\n  let tbody = data?.map((projectIssueTypeScreen) => (\r\n    <ProjectIssueTypeScreenExcerpt\r\n      key={projectIssueTypeScreen.Id}\r\n      projectIssueTypeScreen={projectIssueTypeScreen}\r\n      openModal={openModal}\r\n    />\r\n  ))\r\n  content = (\r\n    <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n      <div className=\"py-8\">\r\n        <div className=\"mb-5 my-2 flex justify-between sm:flex-row flex-col\">\r\n          <h2 className=\"text-2xl font-semibold leading-tight\">{`Issue type: ${issueType.Name}`}</h2>\r\n          <div className=\"flex justify-between sm:flex-row flex-col\">\r\n            <Label className=\"m-2\">\r\n              <span className=\"text-1xl font-semibold leading-tight\">\r\n                Choose a screen:\r\n              </span>\r\n              <Select\r\n                className=\"mt-1\"\r\n                value={screen}\r\n                onChange={onScreenChanged}\r\n              >\r\n                <option value=\"\"></option>\r\n                {filteredScreensOptions}\r\n              </Select>\r\n            </Label>\r\n            <Label className=\"m-2\">\r\n              <span className=\"text-1xl font-semibold leading-tight\">\r\n                Choose a project:\r\n              </span>\r\n              <Select\r\n                className=\"mt-1\"\r\n                value={project}\r\n                onChange={onProjectChanged}\r\n              >\r\n                <option value=\"\"></option>\r\n                {filteredProjectsOptions}\r\n              </Select>\r\n            </Label>\r\n            <Label className=\"m-2\">\r\n              <Button\r\n                className=\"mt-6\"\r\n                onClick={onSaveClicked}\r\n                disabled={!canSave}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Label>\r\n          </div>\r\n        </div>\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHeader>\r\n              <tr>\r\n                <TableCell>Project</TableCell>\r\n                <TableCell>Screen</TableCell>\r\n                <TableCell>Action</TableCell>\r\n              </tr>\r\n            </TableHeader>\r\n            <TableBody>{tbody}</TableBody>\r\n          </Table>\r\n          <TableFooter>\r\n            <Pagination\r\n              totalResults={totalResults}\r\n              resultsPerPage={resultsPerPage}\r\n              label=\"Table navigation\"\r\n              onChange={onPageChange}\r\n            />\r\n          </TableFooter>\r\n        </TableContainer>\r\n        <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n          <ModalHeader>Delete ?</ModalHeader>\r\n          <ModalBody>\r\n            {\r\n              \"You're about to permanently this and all of its data. If you're not sure, you can close this instead.\"\r\n            }\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            {/* I don't like this approach. Consider passing a prop to ModalFooter\r\n             * that if present, would duplicate the buttons in a way similar to this.\r\n             * Or, maybe find some way to pass something like size=\"large md:regular\"\r\n             * to Button\r\n             */}\r\n            <div className=\"hidden sm:block\">\r\n              <Button layout=\"outline\" onClick={closeModal}>\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n            <div className=\"hidden sm:block\">\r\n              <Button onClick={(e) => deleteConfirm(e, id)}>Accept</Button>\r\n            </div>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  return <section className=\"projectIssueTypeScreens-list\">{content}</section>\r\n}\r\n","import React from 'react'\r\nimport DialogModal from '../DialogModal'\r\nimport FormInput from '../Form/FormInputNew'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from \"../../store\";\r\nimport { projectsSelector, updateProject } from '../../slices/projects'\r\nimport { DialogActions, DialogContent } from '../DialogModal';\r\nimport Button from '@material-ui/core/Button'\r\nimport {Textarea} from '@windmill/react-ui'\r\nfunction UpdateProjectModal({ modalDialog }) {\r\n  const dispatch = useAppDispatch()\r\n  const { register, handleSubmit } = useForm()\r\n  const { projectUpdate } = useSelector(projectsSelector)\r\n  const { handleClose } = modalDialog\r\n  const onSubmit = (formData) => {\r\n    const data = Object.assign({}, projectUpdate, formData)\r\n    \r\n   \r\n    dispatch(updateProject({key: projectUpdate.ProjectKey, data}))\r\n    handleClose()\r\n  }\r\n  return (\r\n    <>\r\n      <DialogModal\r\n        title=\"Details\"\r\n        modalDialog={modalDialog}\r\n        handleSubmit={handleSubmit(onSubmit)}\r\n      >\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n        <DialogContent dividers className=\"mx-12\">\r\n            {/* <FormInput\r\n              r={register}\r\n              name=\"Project_Full_Name\"\r\n              label={'Name'}\r\n              value={projectUpdate.Project_Full_Name}\r\n              required\r\n            />\r\n            <FormInput r={register} name=\"Projectname\" label={'Projectname'} value={projectUpdate.Projectname} required />\r\n            <FormInput r={register} name=\"Project_Email\" label={'Email'} value={projectUpdate.Project_Email} required />\r\n            <FormInput\r\n              r={register}\r\n              name=\"Project_Password\"\r\n              label={'Password (Để trống nếu không thay đổi)'}\r\n            />\r\n            <FormInput r={register} name=\"Is_Admin\" label={'Is Admin'} value={projectUpdate.Is_Admin} required /> */}\r\n            \r\n            <FormInput r={register} name=\"ProjectName\" label={'Name'} value={projectUpdate.ProjectName} required/>\r\n            <FormInput r={register} name=\"ProjectUrl\" label={'URL'} value={projectUpdate.ProjectUrl}/>\r\n            {/* <FormSelect label={'Project Type'}>\r\n              <option>Software</option>\r\n              <option>Option 2</option>\r\n              <option>Option 3</option>\r\n            </FormSelect> */}\r\n            <div className=\"mb-5 w-full relative z-0\">\r\n              <Textarea className=\"pt-3 pb-2 block w-full px-0 mt-0 bg-transparent border-0 \r\n              border-b-2 h-36 resize-none appearance-none focus:outline-none focus:ring-0 focus:border-green-800 border-gray-200\" \r\n              name=\"name\" placeholder=\" \" defaultValue={projectUpdate.ProjectDescription} />\r\n              <label htmlFor=\"name\" className=\"absolute duration-300 \r\n              top-3 origin-0 text-gray-500 -z-1\">Description</label>\r\n            </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <div className=\"my-3 mx-5\">\r\n            <Button onClick={handleClose} color=\"secondary\">\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" color=\"primary\">\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        </DialogActions>\r\n        </form>\r\n      </DialogModal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UpdateProjectModal\r\n","import React from 'react'\r\nimport DialogModal from '../DialogModal'\r\nimport FormInput from '../Form/FormInput'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from \"../../store\";\r\nimport { projectsSelector, updateProject } from '../../slices/projects'\r\nimport { DialogActions, DialogContent } from '../DialogModal';\r\nimport Button from '@material-ui/core/Button'\r\n\r\nfunction ViewProject({ modalDialog }) {\r\n  const dispatch = useAppDispatch()\r\n  const { register, handleSubmit } = useForm()\r\n  const { projectUpdate } = useSelector(projectsSelector)\r\n  const { handleCloseViewProject } = modalDialog\r\n  const onSubmit = (formData) => {\r\n    const data = Object.assign({}, projectUpdate, formData)\r\n    console.log(data);\r\n    alert(projectUpdate)\r\n    // dispatch(updateProject({key: projectUpdate.ProjectKey, data}))\r\n    handleCloseViewProject()\r\n  }\r\n  return (\r\n    <>\r\n      <DialogModal\r\n        title=\"Details\"\r\n        modalDialog={modalDialog}\r\n        handleSubmit={handleSubmit(onSubmit)}\r\n      >\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n        <DialogContent dividers className=\"mx-12\">\r\n            {/* <FormInput\r\n              r={register}\r\n              name=\"Project_Full_Name\"\r\n              label={'Name'}\r\n              value={projectUpdate.Project_Full_Name}\r\n              required\r\n            />\r\n            <FormInput r={register} name=\"Projectname\" label={'Projectname'} value={projectUpdate.Projectname} required />\r\n            <FormInput r={register} name=\"Project_Email\" label={'Email'} value={projectUpdate.Project_Email} required />\r\n            <FormInput\r\n              r={register}\r\n              name=\"Project_Password\"\r\n              label={'Password (Để trống nếu không thay đổi)'}\r\n            />\r\n            <FormInput r={register} name=\"Is_Admin\" label={'Is Admin'} value={projectUpdate.Is_Admin} required /> */}\r\n            \r\n            <FormInput r={register} name=\"ProjectName\" label={'Name'} value={projectUpdate.ProjectName} required />\r\n            <FormInput r={register} name=\"ProjectUrl\" label={'URL'} value={projectUpdate.ProjectUrl} required />\r\n            <FormInput r={register} name=\"ProjectLead\" label={'Project Lead'} value={projectUpdate.ProjectLead} required/>\r\n            {/* <FormSelect label={'Project Type'}>\r\n              <option>Software</option> \r\n              <option>Option 2</option>\r\n              <option>Option 3</option>\r\n            </FormSelect> */}\r\n            <div className=\"mb-5 w-full relative z-0\">\r\n              <textarea className=\"pt-3 pb-2 block w-full px-0 mt-0 bg-transparent border-0 \r\n              border-b-2 h-36 resize-none appearance-none focus:outline-none focus:ring-0 focus:border-green-800 border-gray-200\" \r\n              name=\"name\" placeholder=\" \" defaultValue={projectUpdate.ProjectDescription} required/>\r\n              <label htmlFor=\"name\" className=\"absolute duration-300 \r\n              top-3 origin-0 text-gray-500 -z-1\">Description</label>\r\n            </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <div className=\"my-3 mx-5\">\r\n            <Button onClick={handleCloseViewProject} color=\"secondary\">\r\n              Cancel\r\n            </Button>\r\n            {/* <Button type=\"submit\" color=\"primary\">\r\n              Submit\r\n            </Button> */}\r\n          </div>\r\n        </DialogActions>\r\n        </form>\r\n      </DialogModal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ViewProject\r\n","import React, {useState,useEffect} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAppDispatch } from '../../store'\r\nimport { deleteProject, setProjectUpdate } from '../../slices/projects'\r\nimport { selectAllIssues, fetchIssues, deleteIssue } from '../../slices/issues'\r\nimport { fetchWorkflows,workflowsSelector,setState } from '../../slices/workflows'\r\nimport UpdateProjectModal from './UpdateProjectModal';\r\nimport ViewProject from './ViewProject';\r\nimport { setWorkflowUpdate } from '../../slices/workflows'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { TableCell, TableRow, Button, Table, ModalHeader, ModalBody,ModalFooter,Modal,Badge } from '@windmill/react-ui';\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nconst ProjectItem = ({ project }) => {\r\n  \r\n  const {addToast} = useToasts()\r\n  const dispatch = useAppDispatch()\r\n  const history = useHistory()\r\n  \r\n  const { updateWor, updateSuccess,workflows,loading, hasErrors } = useSelector(workflowsSelector)\r\n   useEffect(() => {\r\n        dispatch(fetchWorkflows()) \r\n    }, [dispatch])\r\n    console.log(workflows)\r\n  const [isModalOpen, setIsModalOpen, deleteP] = useState(false)\r\n  let temp = JSON.parse(localStorage.getItem('WorkflowAll') || '[]' )\r\n  let temp1 = JSON.parse(localStorage.getItem('IssuesAll') || '[]' )\r\n  let WorkflowNa\r\n  workflows.map((temp1) =>{\r\n    if(temp1.WorkflowId == project.WorkflowId){\r\n      WorkflowNa = temp1.WorkflowName\r\n    }\r\n  }) \r\n  function openModal() {\r\n    setIsModalOpen(true)\r\n  }\r\n \r\n\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  function deleteConfirm(e, project_key) {\r\n    let bool\r\n    temp1.map((temp) =>{\r\n      if(temp.Project == project_key){\r\n          bool =-5\r\n      }\r\n  })\r\n  if(bool == -5){\r\n    addToast(\"Must Delete All issue in this project!\", {\r\n      appearance: 'error',\r\n      autoDismiss: true,\r\n    })\r\n\r\n  }\r\n  else{\r\n    setIsModalOpen(true)\r\n    e.preventDefault()\r\n    \r\n      dispatch(deleteProject(project_key))\r\n      //alert('Delete Success!')\r\n      addToast(\"Delete Success!\", {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n  }\r\n    \r\n    \r\n  }\r\n  const issues = useSelector(selectAllIssues)\r\n  console.log(issues)\r\n  const [openUpdate, setOpenUpdate] = React.useState(false)\r\n\r\n  const handleOpenUpdate = (e, project) => {\r\n    e.preventDefault()\r\n    dispatch(setProjectUpdate(project))\r\n    setOpenUpdate(true)\r\n  }\r\n  const handleCloseUpdate = () => {\r\n    setOpenUpdate(false)\r\n  }\r\n  const modalUpdate = {\r\n    open: openUpdate,\r\n    handleOpen: handleOpenUpdate,\r\n    handleClose: handleCloseUpdate,\r\n  }\r\n\r\n  const [openView, setOpenView] = React.useState(false)\r\n\r\n  const handleOpenView = (e, project) => {\r\n    e.preventDefault()\r\n    dispatch(setProjectUpdate(project))\r\n    setOpenView(true)\r\n  }\r\n  const handleCloseView = () => {\r\n    setOpenView(false)\r\n  }\r\n  const modalView = {\r\n    open: openView,\r\n    handleOpenViewProject: handleOpenView,\r\n    handleCloseViewProject: handleCloseView,\r\n  }\r\n  const handleOpenTransition = (e, workflow) => {\r\n    e.preventDefault()\r\n    dispatch(setWorkflowUpdate(workflow))\r\n    history.push('/app/transitionsforproject-manager')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <UpdateProjectModal modalDialog={modalUpdate} />\r\n      <ViewProject modalDialog={modalView} />\r\n      <TableRow key={project.ProjectKey}>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"flex-shrink-0 w-10 h-10\">\r\n              <img\r\n                className=\"w-full h-full rounded-full\"\r\n                src=\"https://www.vhv.rs/dpng/d/614-6141793_planning-icon-png-test-transparent-png.png\"\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n            <div className=\"ml-3\">\r\n              <p className=\"text-gray-900 whitespace-no-wrap\">\r\n                <Link\r\n                  to={`/app/IssuesByProject/${project.ProjectKey}`}\r\n                  className=\"relative cursor-pointer text-blue-400 whitespace-no-wrap\"\r\n                >\r\n                  {project.ProjectName}\r\n                </Link>\r\n              </p>\r\n            </div>  \r\n          </div>\r\n        </TableCell>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n         \r\n          <span>{project.ProjectKey}</span>\r\n        </TableCell>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n         \r\n          <span>{project.ProjectUrl}</span>\r\n        </TableCell>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          \r\n          <span>{project.ProjectLeadName}</span>\r\n        </TableCell>\r\n        <TableCell className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n          \r\n          <span>{WorkflowNa}</span>\r\n        </TableCell>\r\n        <TableCell className=\"px-5 py-5 text-center border-b border-gray-200 bg-white text-sm\">\r\n          \r\n          <Badge type={'status'}\r\n                  className=\"hover:bg-blue-200 cursor-pointer\"\r\n           >\r\n            \r\n            <Link\r\n              to={`/app/project-user/${project.ProjectKey}-${project.ProjectName}`}\r\n              className=\"relative cursor-pointer\"\r\n            >\r\n              Access\r\n            </Link>\r\n          </Badge>\r\n          \r\n          <Badge \r\n              className=\"hover:bg-blue-200 cursor-pointer\"\r\n              type={'status'}\r\n              onClick={(e) => handleOpenTransition(e, project)}\r\n          >\r\n              View Workflow\r\n          </Badge>\r\n          <Badge \r\n              className=\"hover:bg-green-200 cursor-pointer\"\r\n              type={'success'}\r\n              onClick={(e) => handleOpenUpdate(e, project)}\r\n          >\r\n              Edit\r\n          </Badge>\r\n          <Badge \r\n              className=\"hover:bg-red-200 cursor-pointer\"\r\n              type={'danger'}\r\n              onClick={openModal}\r\n          >\r\n              Delete\r\n          </Badge>\r\n          <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n            <ModalHeader>Delete Project</ModalHeader>\r\n              <ModalBody>\r\n                 Are you sure DELETE this Project !\r\n              </ModalBody>\r\n            <ModalFooter>\r\n          {/* I don't like this approach. Consider passing a prop to ModalFooter\r\n           * that if present, would duplicate the buttons in a way similar to this.\r\n           * Or, maybe find some way to pass something like size=\"large md:regular\"\r\n           * to Button\r\n           */}\r\n                <div className=\"hidden sm:block\">\r\n                  <Button layout=\"outline\" onClick={closeModal}>\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n                <div className=\"hidden sm:block\" onClick={(e) => deleteConfirm(e, project.ProjectKey)}>\r\n                  <Button>Accept</Button>\r\n                </div>\r\n                <div className=\"block w-full sm:hidden\">\r\n                  <Button block size=\"large\" layout=\"outline\" onClick={closeModal}>\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n                <div className=\"block w-full sm:hidden\">\r\n                  <Button block size=\"large\">\r\n                    Accept\r\n                  </Button>\r\n                </div>\r\n            </ModalFooter>\r\n      </Modal>\r\n          \r\n        </TableCell>\r\n      </TableRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProjectItem\r\n","import React from 'react'\r\nimport DialogModal from '../DialogModal'\r\nimport FormInput from '../Form/FormInputNew'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useAppDispatch } from \"../../store\";\r\nimport { createProject, projectsSelector } from '../../slices/projects'\r\nimport { DialogActions, DialogContent } from '../DialogModal';\r\nimport projectApi from '../../api/projectApi';\r\n// import Button from '@material-ui/core/Button'\r\nimport { Button } from '@windmill/react-ui';\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nfunction CreateProjectModal({ modalDialog }) {\r\n  const { addToast } = useToasts()\r\n  const dispatch = useAppDispatch()\r\n  const {projects} = useSelector(projectsSelector)\r\n  const { register, handleSubmit } = useForm()\r\n  const history = useHistory()\r\n  const { handleClose } = modalDialog\r\n  let temp = JSON.parse(localStorage.getItem('ProjectAll') || '[]' )\r\n  const onSubmit = (data) => {\r\n    let bool = 0\r\n    let bool1 = 0\r\n    temp.map((temp1) =>{\r\n      if(temp1.ProjectKey == data.ProjectKey){\r\n        bool = -5     \r\n      }\r\n      if(temp1.ProjectName == data.ProjectName){\r\n        bool1 = -5\r\n      }\r\n    })\r\n    if(bool == -5){\r\n      addToast(\"Key already exists, please choose another Key\", {\r\n        appearance: 'error',\r\n        autoDismiss: true,\r\n      })\r\n    }\r\n    else if(bool1 == -5){\r\n      addToast(\"Name already exists, please choose another Name\", {\r\n        appearance: 'error',\r\n        autoDismiss: true,\r\n      })\r\n    }\r\n    else{\r\n      dispatch(createProject(data))\r\n      console.log(data)\r\n      addToast(\"Create Workflow Success\", {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n      handleClose()\r\n    }\r\n    \r\n  }\r\n  return (\r\n    <>\r\n      <DialogModal\r\n        title=\"Details\"\r\n        modalDialog={modalDialog}\r\n        handleSubmit={handleSubmit(onSubmit)}\r\n      >\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n        <DialogContent dividers className=\"mx-12\">\r\n          <FormInput r={register} name=\"ProjectName\" label={'Name'} required />\r\n          <FormInput r={register} name=\"ProjectKey\" label={'Key'} required />\r\n\r\n          \r\n          {/*<input {...register('DefaultAssignee')} className=\"hidden\" defaultValue=\"22\" />*/}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <div className=\"hidden sm:block m-2\">\r\n             <Button layout=\"outline\" onClick={handleClose}>\r\n                 Cancel\r\n             </Button>\r\n          </div>\r\n          <div className=\"hidden sm:block m-2\">\r\n            <Button type=\"submit\" color=\"primary\">\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        </DialogActions>\r\n        </form>\r\n      </DialogModal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateProjectModal\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useEffect,useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport {\r\n  fetchProjects,\r\n  projectsSelector,\r\n  createProject,\r\n  setState\r\n} from '../slices/projects'\r\nimport { Link } from 'react-router-dom'\r\nimport ProjectItem from '../components/Project/ProjectItem'\r\nimport { useAppDispatch } from '../store'\r\nimport CreateProjectModal from '../components/Project/CreateProjectModal';\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableBody,\r\n  TableRow,\r\n  TableFooter,\r\n  TableContainer,\r\n  Button,\r\n  Pagination,\r\n  Select,\r\n  Input,\r\n} from '@windmill/react-ui'\r\nconst Projects = () => {\r\n  \r\n  let temp = JSON.parse(localStorage.getItem('WorkflowAll') || '[]' )\r\n  const { addToast } = useToasts()\r\n  const dispatch = useAppDispatch()\r\n  const { updateWor, updateSuccess, projects, loading, hasErrors } = useSelector(projectsSelector)\r\n  \r\n// setup pages control for every table\r\nconst [pageTable1, setPageTable1] = useState(1)\r\n// setup data for every table \r\nconst [dataTable1, setDataTable1] = useState([])\r\n// pagination setup\r\nconst resultsPerPage = 3\r\nconst totalResults = projects.length\r\n// pagination change control\r\nfunction onPageChangeTable1(p) {\r\n  setPageTable1(p)\r\n}\r\n// on page change, load new sliced data\r\n// here you would make another server request for new data\r\nuseEffect(() => {\r\n  dispatch(fetchProjects())\r\n}, [dispatch])\r\n\r\nuseEffect(() => {\r\n  if (updateSuccess) {\r\n    addToast(\"Success\", {\r\n      appearance: 'success',\r\n      autoDismiss: true,\r\n    })\r\n    dispatch(setState())\r\n  }\r\n}, [updateSuccess])\r\nlocalStorage.setItem('ProjectAll', JSON.stringify(projects))\r\nuseEffect(() => {\r\n  setDataTable1(projects.slice((pageTable1 - 1) * resultsPerPage, pageTable1 * resultsPerPage))\r\n}, [projects,pageTable1])\r\n\r\n  //search user\r\n  //setup search\r\n  const [searchTerm, setSearchTerm] = React.useState('')\r\n  const [searchResults, setSearchResults] = React.useState([])\r\n  //setup select \r\n  const [selectTerm, setSelectTerm] = React.useState('')\r\n  const handleChange = (e) => {\r\n    setSearchTerm(e.target.value)\r\n  }\r\n  const handleSelect = (e) =>{\r\n    setSelectTerm(e.target.value)\r\n  }\r\n  useEffect(() => {\r\n    const results = projects.filter(\r\n      (person) =>\r\n        person.ProjectKey.toLowerCase().indexOf(searchTerm.toLowerCase()) !=\r\n          -1 ||\r\n        person.ProjectName.toLowerCase().indexOf(searchTerm.toLowerCase()) !=\r\n          -1 \r\n        // person.User_Full_Name.toLowerCase().indexOf(searchTerm.toLowerCase()) !=\r\n        //   -1\r\n    )\r\n    setSearchResults(results)\r\n  }, [searchTerm])\r\n  useEffect(() => {\r\n    const resultsSelect = projects.filter(\r\n      (person) => person.WorkflowId == selectTerm\r\n    )\r\n    setSearchResults(resultsSelect)\r\n  }, [selectTerm])\r\n  //render user\r\n  \r\n  const renderProjects = () => {\r\n    \r\n    if (\r\n      (searchTerm == '' && selectTerm == 'All') ||\r\n      (searchTerm == '' && selectTerm == '')\r\n      \r\n    ) {\r\n      return dataTable1.map((project) => <ProjectItem key={project.ProjectKey} project={project} />)\r\n    }\r\n    \r\n    else {\r\n      return searchResults.map((project) => (\r\n        <ProjectItem key={project.ProjectKey} project={project} />\r\n      ))\r\n    }\r\n  }\r\n  // filter workflow id\r\n  var option1s = temp.map((option) => {\r\n    return (\r\n      <option key={option.WorkflowId} value={option.WorkflowId}>\r\n        {option.WorkflowName}({option.WorkflowId})\r\n      </option>\r\n    )\r\n  })\r\n  \r\n\r\n  const [openCreate, setOpenCreate] = React.useState(false)\r\n\r\n  const handleOpenCreate = () => {\r\n    setOpenCreate(true)\r\n  }\r\n  const handleCloseCreate = () => {\r\n    setOpenCreate(false)\r\n  }\r\n\r\n  const modalCreate = {\r\n    open: openCreate,\r\n    handleOpen: handleOpenCreate,\r\n    handleClose: handleCloseCreate,\r\n  }\r\n\r\n  const addPost = (e) => {\r\n    e.preventDefault()\r\n    const Project = {\r\n      id: 1,\r\n      name: 'Nacef',\r\n      projectname: 'magiko',\r\n      email: 'nacef.otay@esprit.tn',\r\n      phone: '+21629903274',\r\n      website: 'nacefotay.me',\r\n    }\r\n    dispatch(createProject(Project))\r\n  }\r\n  if (loading) {\r\n    return (\r\n      <tr>\r\n        <div className=\"loader\">Loading...</div>\r\n      </tr>\r\n    )\r\n  }\r\n  if (hasErrors) return <p>Unable to get Projects.</p>\r\n  return (\r\n    <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n      <div className=\"py-8\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-semibold leading-tight\">Projects</h2>\r\n        </div>\r\n        <div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n          <div className=\"flex flex-row mb-1 sm:mb-0\">\r\n            <div className=\"relative\">\r\n            <Select\r\n                value={selectTerm}\r\n                onChange={handleSelect}\r\n                className=\"appearance-none h-full rounded-r border-t sm:rounded-r-none sm:border-r-0 border-r border-b block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none focus:border-l focus:border-r focus:bg-white focus:border-gray-500\"\r\n              > \r\n                {/* <option selected className=\"h-4 w-4 font-semibold \">OPTION</option> */}\r\n                <option selected ></option> \r\n                <option selected className=\"h-4 w-4 fill-current text-blue-500\">All</option>\r\n                               \r\n                <option value='0' className=\"h-4 w-4 fill-current text-blue-500\">NULL</option>\r\n                \r\n              \r\n                {option1s}\r\n              </Select>\r\n            </div>\r\n            \r\n            {/* Ô search */}\r\n            <div className=\"flex relative\">\r\n              <span className=\"h-full absolute inset-y-0 right-2 flex items-center pl-2\">\r\n                <svg\r\n                  viewBox=\"0 0 24 24\"\r\n                  className=\"h-4 w-4 fill-current text-gray-500\"\r\n                >\r\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\r\n                </svg>\r\n              </span>\r\n              <Input\r\n                placeholder=\"Search for projects\"\r\n                className=\"appearance-none rounded-r rounded-l sm:rounded-l-none border border-gray-400 border-b block pl-8 pr-8 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\r\n                value={searchTerm}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex\">\r\n            <CreateProjectModal modalDialog={modalCreate} />\r\n            <Button \r\n              onClick={handleOpenCreate}\r\n              >\r\n              Create Project\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\r\n          <div className=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\r\n            <table className=\"min-w-full leading-normal\">\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"px-5 py-3 border-b-2 border-green-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    Name Project\r\n                  </th>\r\n                  <th className=\"px-5 py-3 border-b-2 border-green-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    Key\r\n                  </th>\r\n                  <th className=\"px-5 py-3 border-b-2 border-green-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    URL\r\n                  </th>\r\n                  <th className=\"px-5 py-3 border-b-2 border-green-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    Project Lead\r\n                  </th>\r\n                  <th className=\"px-5 py-3 border-b-2 border-green-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    Workflow\r\n                  </th>\r\n                  <th className=\"px-5 py-3 border-b-2 border-green-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    Action\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>{renderProjects()}</tbody>\r\n            </table>\r\n            <TableFooter>\r\n          <Pagination\r\n            totalResults={totalResults}\r\n            resultsPerPage={resultsPerPage}\r\n            onChange={onPageChangeTable1}\r\n            label=\"Table navigation\"\r\n          />\r\n        </TableFooter>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Projects\r\n","import React from 'react';\r\n\r\nexport default [\r\n  {\r\n    id: '1',\r\n    type: 'input',\r\n    data: {\r\n      label: (\r\n        <>\r\n          Welcome to <strong>React Flow!</strong>\r\n        </>\r\n      ),\r\n    },\r\n    position: { x: 250, y: 0 },\r\n  },\r\n  {\r\n    id: '2',\r\n    data: {\r\n      label: (\r\n        <>\r\n          This is a <strong>default node</strong>\r\n        </>\r\n      ),\r\n    },\r\n    position: { x: 100, y: 100 },\r\n  },\r\n  {\r\n    id: '3',\r\n    data: {\r\n      label: (\r\n        <>\r\n          This one has a <strong>custom style</strong>\r\n        </>\r\n      ),\r\n    },\r\n    position: { x: 400, y: 100 },\r\n    style: {\r\n      background: '#D6D5E6',\r\n      color: '#333',\r\n      border: '1px solid #222138',\r\n      width: 180,\r\n    },\r\n  },\r\n  {\r\n    id: '4',\r\n    position: { x: 250, y: 200 },\r\n    data: {\r\n      label: 'Another default node',\r\n    },\r\n  },\r\n  {\r\n    id: '5',\r\n    data: {\r\n      label: 'Node id: 5',\r\n    },\r\n    position: { x: 250, y: 325 },\r\n  },\r\n  {\r\n    id: '6',\r\n    type: 'output',\r\n    data: {\r\n      label: (\r\n        <>\r\n          An <strong>output node</strong>\r\n        </>\r\n      ),\r\n    },\r\n    position: { x: 100, y: 480 },\r\n  },\r\n  {\r\n    id: '7',\r\n    type: 'output',\r\n    data: { label: 'Another output node' },\r\n    position: { x: 400, y: 450 },\r\n  },\r\n  { id: 'e1-2', source: '1', target: '2', label: 'this is an edge label' },\r\n  { id: 'e1-3', source: '1', target: '3' },\r\n  {\r\n    id: 'e3-4',\r\n    source: '3',\r\n    target: '4',\r\n    animated: true,\r\n    label: 'animated edge',\r\n  },\r\n  {\r\n    id: 'e4-5',\r\n    source: '4',\r\n    target: '5',\r\n    arrowHeadType: 'arrowclosed',\r\n    label: 'edge with arrow head',\r\n  },\r\n  {\r\n    id: 'e5-6',\r\n    source: '5',\r\n    target: '6',\r\n    type: 'smoothstep',\r\n    label: 'smooth step edge',\r\n  },\r\n  {\r\n    id: 'e5-7',\r\n    source: '5',\r\n    target: '7',\r\n    type: 'step',\r\n    style: { stroke: '#f6ab6c' },\r\n    label: 'a step edge',\r\n    animated: true,\r\n    labelStyle: { fill: '#f6ab6c', fontWeight: 700 },\r\n  },\r\n];","import React, { useEffect ,useState } from 'react';\r\nimport { useAppDispatch } from '../store'\r\nimport { fetchStatuss, statussSelector,setState  } from '../slices/statuss'\r\nimport { useSelector } from 'react-redux'\r\nimport ReactFlow, {\r\n  removeElements,\r\n  addEdge,\r\n  MiniMap,\r\n  Controls,\r\n  Background,\r\n} from 'react-flow-renderer';\r\n\r\nimport initialElements from './initial-elements';\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n  console.log('flow loaded:', reactFlowInstance);\r\n  reactFlowInstance.fitView();\r\n};\r\n\r\nconst arrayInput = [{id: '',\r\ntype: 'input', \r\ndata:{\r\n  label:(\r\n    <>\r\n      Welcome to <strong>React Flow!</strong>\r\n    </>\r\n  ),\r\n},\r\nposition:{x:  100 + Math.random() * (100 - 0), y: 100 + Math.random() * (100 - 0)}\r\n}]\r\n\r\nconsole.log(arrayInput)\r\nconst OverviewFlow = () => {\r\n  const [elements, setElements] = useState(initialElements);\r\n  const onElementsRemove = (elementsToRemove) =>\r\n    setElements((els) => removeElements(elementsToRemove, els));\r\n  const onConnect = (params) => setElements((els) => addEdge(params, els));\r\n  let temp = JSON.parse(localStorage.getItem('TransitionAll') || '[]' )\r\n  console.log(elements)\r\n  console.log(temp)\r\n  const dispatch = useAppDispatch()\r\n  const { updateMess, updateSuccess,statuss, loading, hasErrors } = useSelector(statussSelector)\r\n  useEffect(() => {\r\n    dispatch(fetchStatuss())\r\n  }, [dispatch])\r\n  console.log(statuss)\r\n  \r\n  let arrTran = [] \r\n  let arrStatus = [] \r\n  temp.map((i) =>{\r\n      arrTran.push({\r\n        id: i.TransitionId,\r\n        source: i.Status1Id,\r\n        target: i.Status2Id,\r\n        type: 'step',\r\n        arrowHeadType: 'arrowclosed',\r\n        animated: true,\r\n        label: i.TransitionName,\r\n      })\r\n  })\r\n  statuss.map((i) =>{\r\n    arrStatus.push({\r\n      id: i.StatusId,\r\n      type: (i.StatusName == \"TO DO\")? 'input' : (i.StatusName == \"DONE\") ? 'output' : 'default',\r\n      data: {\r\n        label:(\r\n          <>\r\n          <strong>{i.StatusName}</strong>\r\n          </>\r\n        )\r\n      },\r\n      style: (i.StatusName == \"TO DO\")? {\r\n        background: '#D6D5E6',\r\n        color: '#333',\r\n        border: '1px solid #222138',\r\n        width: 180,\r\n        \r\n      } : (i.StatusName == \"DONE\")? { \r\n        background: '#228629',\r\n        color: '#FFFFFF',\r\n        border: '1px solid #222138',\r\n        width: 180,} : {\r\n        background: '#1F35DC',\r\n        color: '#FFFFFF',\r\n        border: '1px solid #222138',\r\n        width: 180,\r\n        },\r\n      position: (i.StatusName == \"TO DO\")? {x:10, y: 100}: (i.StatusName == \"DONE\")? {x:750,y: 300}:{x:  100 + (Math.random()) * (100 - 0), y: 100 + Math.random() * (100 - 0)}\r\n    })\r\n  })\r\n  console.log(Math.random())\r\n  console.log(arrTran)\r\n  console.log(arrStatus)\r\n  let arr = arrStatus.concat(arrTran)\r\n  return (\r\n    <ReactFlow\r\n      elements={arr}\r\n      onElementsRemove={onElementsRemove}\r\n      onConnect={onConnect}\r\n      onLoad={onLoad}\r\n      snapToGrid={true}\r\n      snapGrid={[15, 15]}\r\n    >\r\n      <MiniMap\r\n        nodeStrokeColor={(n) => {\r\n          if (n.style?.background) return n.style.background;\r\n          if (n.type === 'input') return '#1a192b';\r\n          if (n.type === 'output') return '#33FF41';\r\n          if (n.type === 'default') return '#3344FF';\r\n\r\n          return '#eee';\r\n        }}\r\n        nodeColor={(n) => {\r\n          if (n.style?.background) return n.style.background;\r\n\r\n          return '#fff';\r\n        }}\r\n        nodeBorderRadius={2}\r\n      />\r\n      <Controls />\r\n      <Background color=\"#aaa\" gap={16} />\r\n    </ReactFlow>\r\n  );\r\n};\r\n\r\nexport default OverviewFlow;","import { lazy } from 'react'\r\n\r\n// use lazy for better code splitting, a.k.a. load faster\r\nimport UsersManager from '../pages/UsersManager'\r\nimport CreateUser from '../pages/CreateUser'\r\nimport PermissionManager from '../pages/PermissionManager'\r\nimport DetailPermission from '../pages/DetailPermission'\r\nimport RolesManager from '../pages/RolesManager'\r\nimport CreateRole from '../pages/CreateRole'\r\nimport ProjectUserRole from '../pages/ProjectUserRole'\r\nimport TransitionItemForProject from '../pages/TransitionManagerForProject'\r\nimport { Issues } from '../pages/Issues'\r\nimport { IssuesByProject } from '../pages/IssuesByProject'\r\nimport { Screens } from '../pages/Screens'\r\nimport { ScreenCustomFields } from '../pages/ScreenCustomFields'\r\nimport Workflows from '../pages/Workflows'\r\nimport { CustomFields } from '../pages/CustomFields'\r\nimport { IssueTypes } from '../pages/IssueTypes'\r\nimport Status from '../pages/StatusManager'\r\nimport AddWorkflow from '../pages/AddWorkflow'\r\nimport CreateWorkflow from '../pages/CreateWorkflow'\r\nimport Transition from '../pages/TransitionManager'\r\nimport { ProjectIssueTypeScreens } from '../pages/ProjectIssueTypeScreens'\r\nimport CreateStatus from '../pages/CreateStatus'\r\nimport Profile from '../pages/Profile'\r\nimport AddTransition from '../pages/AddTransition'\r\nimport Projects from '../pages/Projects'\r\nimport viewDiagram from '../pages/viewDiagram'\r\n\r\n// const Modals = lazy(() => import('../pages/Modals'))\r\n// const Tables = lazy(() => import('../pages/Tables'))\r\n// // const Page404 = lazy(() => import('../pages/404'))\r\n// const Blank = lazy(() => import('../pages/Blank'))\r\n\r\n/**\r\n * ⚠ These are internal routes!\r\n * They will be rendered inside the app, using the default `containers/Layout`.\r\n * If you want to add a route to, let's say, a landing page, you should add\r\n * it to the `App`'s router, exactly like `Login`, `CreateAccount` and other pages\r\n * are routed.\r\n *\r\n * If you're looking for the links rendered in the SidebarContent, go to\r\n * `routes/sidebar.js`\r\n */\r\nconst routes = [\r\n  {\r\n    path: '/user-manager', // the url\r\n    component: UsersManager, // view rendered\r\n    globalRole: 'Admin',\r\n  },\r\n  {\r\n    path: '/user-manager/create-user',\r\n    component: CreateUser,\r\n    globalRole: 'Admin',\r\n  },\r\n  {\r\n    path: '/permission-manager',\r\n    component: PermissionManager,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/permission-manager/detail-permission',\r\n    component: DetailPermission,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/role-manager',\r\n    component: RolesManager,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/role-manager/create-role',\r\n    component: CreateRole,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/projects',\r\n    component: Projects,\r\n    globalRole: 'Member',\r\n  },\r\n  {\r\n    path: '/project-user/:keyProject-:nameProject',\r\n    component: ProjectUserRole,\r\n    globalRole: 'Member',\r\n  },\r\n  {\r\n    path: '/transitionsforproject-manager',\r\n    component: TransitionItemForProject,\r\n    globalRole: 'Member',\r\n  },\r\n  {\r\n    path: '/workflows-manager/transitions-manager/create-transitions',\r\n    component: AddTransition,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/workflows-manager/transitions-manager/view-diagram',\r\n    component: viewDiagram,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/issues',\r\n    component: Issues,\r\n    globalRole: 'Member',\r\n  },\r\n  {\r\n    path: '/IssuesByProject/:project',\r\n    component: IssuesByProject,\r\n    globalRole: 'Member',\r\n  },\r\n  {\r\n    path: '/Screens',\r\n    component: Screens,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/screenCustomFields/:screenId',\r\n    component: ScreenCustomFields,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/customFields',\r\n    component: CustomFields,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/issueTypes',\r\n    component: IssueTypes,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/issueTypes/projectIssueTypeScreens/:issueTypeId',\r\n    component: ProjectIssueTypeScreens,\r\n    globalRole: 'Member',\r\n  },\r\n  {\r\n    path: '/status-manager',\r\n    component: Status,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/status-manager/create-status',\r\n    component: CreateStatus,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/workflows-manager',\r\n    component: Workflows,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/workflows-manager/add-workflows',\r\n    component: AddWorkflow,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/workflows-manager/create-workflows',\r\n    component: CreateWorkflow,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/workflows-manager/transitions-manager',\r\n    component: Transition,\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/profile',\r\n    component: Profile,\r\n    globalRole: 'Member',\r\n  },\r\n]\r\n\r\nexport default routes\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { permissionsSelector } from '../slices/permission'\r\nimport {\r\n  fetchPermissionRoles,\r\n  permissionRolesSelector,\r\n  setState,\r\n} from '../slices/per-role'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAppDispatch } from '../store'\r\nimport PermissionRoleItem from '../components/Permission/PermissionRoleItem'\r\nimport UpdateRolePermission from '../components/Permission/UpdateRolePermission'\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableBody,\r\n  TableRow,\r\n  TableFooter,\r\n  TableContainer,\r\n  Button,\r\n  Pagination,\r\n} from '@windmill/react-ui'\r\nimport { useToasts } from 'react-toast-notifications'\r\n\r\nexport default function DetailPermission() {\r\n  const { permissionUpdate } = useSelector(permissionsSelector)\r\n  const { addToast } = useToasts()\r\n\r\n  //lưu vào localStorage\r\n  if (permissionUpdate.Permission_Id) {\r\n    localStorage.setItem('Permission', JSON.stringify(permissionUpdate))\r\n  }\r\n  let temp = JSON.parse(localStorage.getItem('Permission') || '[]')\r\n  const dispatch = useAppDispatch()\r\n  //permissionroles\r\n  const { permissionroles, loading, hasErrors, updateMess, updateSuccess } =\r\n    useSelector(permissionRolesSelector)\r\n  useEffect(() => {\r\n    dispatch(fetchPermissionRoles(temp.Permission_Id))\r\n  }, [dispatch])\r\n  //notification delete,update\r\n  useEffect(() => {\r\n    if (updateSuccess) {\r\n      addToast(updateMess, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setState())\r\n    }\r\n  }, [updateSuccess])\r\n\r\n  //search role\r\n  //setup search\r\n  const [searchTerm, setSearchTerm] = React.useState('')\r\n  const [searchResults, setSearchResults] = React.useState([])\r\n  const handleChange = (e) => {\r\n    setSearchTerm(e.target.value)\r\n  }\r\n  useEffect(() => {\r\n    const results = permissionroles.filter(\r\n      (role) =>\r\n        role.RoleName.toLowerCase().indexOf(searchTerm.toLowerCase()) != -1\r\n    )\r\n    setSearchResults(results)\r\n  }, [searchTerm])\r\n  //render permission role\r\n  const renderPermissionRole = () => {\r\n    if (searchTerm == '') {\r\n      //get full data\r\n      return permissionroles.map((temp_role) => (\r\n        <PermissionRoleItem\r\n          key={temp_role.RoleId}\r\n          permission_role={temp_role}\r\n        ></PermissionRoleItem>\r\n      ))\r\n    } else {\r\n      //after using search\r\n      return searchResults.map((temp_role) => (\r\n        <PermissionRoleItem\r\n          key={temp_role.RoleId}\r\n          permission_role={temp_role}\r\n        ></PermissionRoleItem>\r\n      ))\r\n    }\r\n  }\r\n  //open modalUpdate\r\n  const [openUpdate, setOpenUpdate] = React.useState(false)\r\n  const handleOpenUpdate = (e) => {\r\n    e.preventDefault()\r\n    // dispatch(setUserUpdate(user))\r\n    setOpenUpdate(true)\r\n  }\r\n  const handleCloseUpdate = () => {\r\n    setOpenUpdate(false)\r\n  }\r\n  const modalUpdate = {\r\n    open: openUpdate,\r\n    handleOpen: handleOpenUpdate,\r\n    handleClose: handleCloseUpdate,\r\n    data_permission: temp,\r\n    fulldata: permissionroles,\r\n  }\r\n  return (\r\n    <>\r\n      <UpdateRolePermission modalDialog={modalUpdate}></UpdateRolePermission>\r\n      <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n        <div className=\"py-8\">\r\n          <div>\r\n            <h2 className=\"text-2xl font-semibold leading-tight\">\r\n              {temp.Permission_Name}\r\n            </h2>\r\n            <p className=\" font-semibold leading-tight\">\r\n              {temp.Permission_Description}\r\n            </p>\r\n          </div>\r\n          <div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n            <div className=\"flex flex-row mb-1 sm:mb-0\">\r\n              {/* Ô search */}\r\n              <div className=\"flex relative\">\r\n                <span className=\"h-full absolute inset-y-0 right-2 flex items-center pl-2\">\r\n                  <svg\r\n                    viewBox=\"0 0 24 24\"\r\n                    className=\"h-4 w-4 fill-current text-gray-500\"\r\n                  >\r\n                    <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\r\n                  </svg>\r\n                </span>\r\n                <input\r\n                  placeholder=\"Search\"\r\n                  className=\"appearance-none rounded-r rounded-l sm:rounded-l-none border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\r\n                  value={searchTerm}\r\n                  onChange={handleChange}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"flex\">\r\n              <a onClick={(e) => handleOpenUpdate(e)}>\r\n                <Button>Add role</Button>\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\r\n            <div className=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\r\n              <TableContainer className=\"mb-8\">\r\n                <Table className=\"min-w-full leading-normal\">\r\n                  <TableHeader>\r\n                    <tr>\r\n                      <TableCell className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                        Role Name\r\n                      </TableCell>\r\n                      <TableCell className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                        Action\r\n                      </TableCell>\r\n                    </tr>\r\n                  </TableHeader>\r\n                  <TableBody>{renderPermissionRole()}</TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import FormInput from \"../components/Form/FormInputNew\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport roleApi from \"../api/roleApi\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport React from 'react'\r\n// import { useAppDispatch } from '../store'\r\n// import { createRole } from \"../slices/roles\";\r\n\r\nexport default function CreateRole() {\r\n    const{register,handleSubmit} = useForm();\r\n    const history = useHistory()\r\n    const onSubmit = data => {\r\n        console.log(data)\r\n        roleApi.createRole(data).then(()=>{\r\n            alert('Create Role Success')\r\n            history.goBack()\r\n        }).catch(err => alert(err))\r\n    }\r\n  \r\n\r\n\r\n    return (\r\n      <div className=\"w-full h-full pt-16\">\r\n        <div className=\"max-w-xl px-8 py-8 border-0 shadow-lg rounded-xl h-auto bg-white mx-auto\">\r\n          <h1 className=\"text-2xl font-bold pb-8\">Create Project Role</h1>\r\n          <hr className=\"mb-5\" />\r\n          <div className=\"px-6\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <FormInput\r\n                r={register}\r\n                name=\"rolename\"\r\n                label=\"Role Name\"\r\n                required\r\n                placeholder=\"Admin\"\r\n              />\r\n              <FormInput\r\n                r={register}\r\n                name=\"roledescription\"\r\n                label=\"Description\"\r\n                placeholder=\"Type ...\"\r\n              />\r\n              <div className=\"w-full mt-10 mb-5 px-10\">\r\n                <input\r\n                  type=\"submit\"\r\n                  value=\"Create Role\"\r\n                  className=\"bg-purple-600 rounded-md py-2 \r\n            text-white text-xl w-full\"\r\n                />\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useAppDispatch } from '../store'\r\nimport {\r\n  fetchProjectUserRole,\r\n  projectUserRolesSelector,\r\n  setState\r\n} from '../slices/pro-user-role'\r\nimport { useSelector } from 'react-redux'\r\nimport ProjectUserItems from '../components/ProjectUser/ProjectUserItems'\r\nimport AddUserToProject from '../components/ProjectUser/AddUserToProject'\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableBody,\r\n  TableRow,\r\n  TableFooter,\r\n  TableContainer,\r\n  Button,\r\n  Pagination,\r\n} from '@windmill/react-ui'\r\nimport { useToasts } from 'react-toast-notifications'\r\n\r\nexport default function ProjectUserRole() {\r\n  const { addToast } = useToasts()\r\n\r\n  let temp = window.location.pathname.split(/[/,-]/)\r\n  let projectkey = temp[temp.length - 2]\r\n  let projectname = temp[temp.length - 1]\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { updateMess, updateSuccess, projectUserRoles, loading, hasErrors } =\r\n    useSelector(projectUserRolesSelector)\r\n  useEffect(() => {\r\n    dispatch(fetchProjectUserRole(projectkey))\r\n  }, [dispatch])\r\n  //notification delete,update\r\n  useEffect(() => {\r\n    if (updateSuccess) {\r\n      addToast(updateMess, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setState())\r\n    }\r\n  }, [updateSuccess])\r\n  //render UserRole\r\n  const renderUserRole = () => {\r\n    return projectUserRoles.map((projectUserRole) => (\r\n      <ProjectUserItems\r\n        key={projectUserRole.UserId}\r\n        dataItem={projectUserRole}\r\n        projectkey={projectkey}\r\n      ></ProjectUserItems>\r\n    ))\r\n  }\r\n  const [openAddUser, setopenAddUser] = useState(false)\r\n  const handleAddUser = (e) => {\r\n    e.preventDefault()\r\n    setopenAddUser(true)\r\n  }\r\n  const handleCloseAdd = () => {\r\n    setopenAddUser(false)\r\n  }\r\n  const modalUpdate = {\r\n    open: openAddUser,\r\n    handleOpen: handleAddUser,\r\n    handleClose: handleCloseAdd,\r\n    projectkey: projectkey,\r\n    listUser: projectUserRoles,\r\n  }\r\n  return (\r\n    <>\r\n      <AddUserToProject modalDialog={modalUpdate}></AddUserToProject>\r\n      <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n        <div className=\"py-8\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-semibold leading-tight\">\r\n              Access Project\r\n            </h1>\r\n            <h2 className=\"text-2xl font-semibold leading-tight\">\r\n              {projectname}\r\n            </h2>\r\n          </div>\r\n          <div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n            <div className=\"flex flex-row mb-1 sm:mb-0\"></div>\r\n\r\n            <div className=\"flex\">\r\n              <a onClick={(e) => handleAddUser(e)}>\r\n                <Button>Add User</Button>\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\r\n            <div className=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\r\n              <TableContainer className=\"mb-8\">\r\n                <Table className=\"min-w-full leading-normal\">\r\n                  <TableHeader>\r\n                    <tr>\r\n                      <TableCell className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                        Name\r\n                      </TableCell>\r\n                      <TableCell className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                        Email\r\n                      </TableCell>\r\n                      <TableCell className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                        Role\r\n                      </TableCell>\r\n                      <TableCell className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                        Action\r\n                      </TableCell>\r\n                    </tr>\r\n                  </TableHeader>\r\n                  <TableBody>{renderUserRole()}</TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import FormInput from \"../components/Form/FormInputNew\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport TransitionApi from \"../api/transitionApi\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { fetchStatuss, statussSelector,setState  } from '../slices/statuss'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from '../store'\r\nimport Select1 from 'react-select'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport { Button, Select } from \"@windmill/react-ui\";\r\n// import { useAppDispatch } from '../store'\r\n// import { createTransition } from \"../slices/Transitions\";\r\n\r\nexport default function CreateTransition(modalDialog) {\r\n    const { addToast } = useToasts()\r\n    const dispatch = useAppDispatch()\r\n    const { updateMess, updateSuccess,statuss, loading, hasErrors } = useSelector(statussSelector)\r\n  useEffect(() => {\r\n    dispatch(fetchStatuss())\r\n  }, [dispatch])\r\n  console.log(statuss)\r\n    const {fulldata} = modalDialog\r\n    let temp = JSON.parse(localStorage.getItem('Status') || '[]' )\r\n    let temp1 = JSON.parse(localStorage.getItem('Workflow') || '[]' )\r\n    let temp2 = JSON.parse(localStorage.getItem('TransitionAll') || '[]' )\r\n    console.log(temp)\r\n    const{register,handleSubmit} = useForm();\r\n    const history = useHistory()\r\n    const onSubmit = data => {\r\n        console.log(data)\r\n        if(data.Status1Id == data.Status2Id){\r\n          // alert(\"Not Success\")\r\n          // alert(\"STATUS1 must be different from STATUS2\")\r\n          addToast(\"STATUS1 must be different from STATUS2\", {\r\n                      appearance: 'error',\r\n                      autoDismiss: true,\r\n                    })\r\n        }\r\n        else{\r\n        let bool = 0\r\n        \r\n        temp2.map((temp) =>{\r\n            if(temp.Status1Id == data.Status1Id && temp.Status2Id == data.Status2Id){\r\n                bool =-5\r\n            }\r\n        })\r\n        if(bool != -5)\r\n        {\r\n          let statusname1\r\n          let statusname2\r\n          statuss.map((temp) => {\r\n              console.log(temp)\r\n            if (temp.StatusId == data.Status1Id) {\r\n              statusname1 = temp.StatusName\r\n            }\r\n          })\r\n          statuss.map((temp) => {\r\n            console.log(temp)\r\n          if (temp.StatusId == data.Status2Id) {\r\n            statusname2 = temp.StatusName\r\n          }\r\n        })\r\n          console.log(statusname1)\r\n          console.log('kkkkk')\r\n          const postData = {\r\n              Status1Id: data.Status1Id,\r\n              Status2Id: data.Status2Id,\r\n              Status1Name: statusname1,\r\n              Status2Name: statusname2,\r\n              TransitionName: data.TransitionName,\r\n              WorkflowId: data.WorkflowId,\r\n          }\r\n          console.log(postData)\r\n          TransitionApi.createTransition(postData).then(()=>{\r\n              //alert('Create Transition Success')\r\n              addToast(\"Create Transition Success\", {\r\n                appearance: 'success',\r\n                autoDismiss: true,\r\n              })\r\n              history.goBack()\r\n          }).catch(err => alert(err))\r\n        }\r\n        else{\r\n          addToast(\"Transition is existed\", {\r\n            appearance: 'error',\r\n            autoDismiss: true,\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    var option1s = statuss.map((option) => {\r\n        return (\r\n          <option key={option.Status1Id} value={option.StatusId}>\r\n            {option.StatusName}\r\n          </option>\r\n        )\r\n      })\r\n      console.log(option1s)\r\n      const fil = statuss.filter(\r\n        (item1) => !statuss.some((item2) => item1.Status1Id === item2.StatusId)\r\n      )\r\n      console.log(fil)\r\n      var option2s = fil.map((option) => {\r\n        return (\r\n          <option key={option.Status2Id} value={option.StatusId}>\r\n            {option.StatusName}\r\n          </option>\r\n        )\r\n      })\r\n    \r\n       \r\n    \r\n  \r\n    // const history = useHistory()\r\n    //  const dispatch = useAppDispatch()\r\n    //  const{register,handleSubmit} = useForm();\r\n    //  const onSubmit = data => {\r\n    //     console.log(data)\r\n    //     dispatch(createTransition(data))\r\n    //     history.push('/Transitions-manager')\r\n    // }\r\n\r\n\r\n    return (\r\n       <div className=\"w-full h-full pt-16\">\r\n      <div className=\"max-w-xl px-8 py-8 border-0 shadow-lg rounded-xl h-auto bg-white mx-auto\">\r\n        <h1 className=\"text-2xl font-bold pb-8\">Create Transition</h1>\r\n        <hr className=\"mb-5\"/>\r\n        <div className=\"px-6\">\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n          <FormInput r={register} name=\"WorkflowId\" label='Workflow ID'  required  value= {temp1.WorkflowId} />\r\n          <FormInput r={register} name=\"TransitionName\" label='Transition Name' required />\r\n          {/* <FormInput r={register} name=\"Status1Id\" label='Status'  />  */}\r\n          {/* <Select option= {temp}/>  */}\r\n          Status 1           :\r\n          <Select\r\n                className=\"py-2 px-3 rounded-md border border-white-500 mt-2 focus:outline-none focus:ring-1 focus:ring-green-700 focus:border-transparent\"\r\n                {...register('Status1Id')}\r\n              >\r\n                {option1s}\r\n              </Select>\r\n\r\n              Status 2            :\r\n              <Select\r\n                className=\"py-2 px-3 rounded-md border border-white-500 mt-2 focus:outline-none focus:ring-1 focus:ring-green-700 focus:border-transparent\"\r\n                {...register('Status2Id')}\r\n              >\r\n                {option2s}\r\n              </Select>\r\n          <div className=\"w-full mt-10 mb-5 px-10\">\r\n          <Button layout=\"outline\" size=\"large\" type= \"submit\" className=\"rounded-md py-2 \r\n            text-white text-xl w-full \">\r\n            Create Transition\r\n          </Button>\r\n          </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n","import FormInput from \"../components/Form/FormInputNew\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport statusApi from \"../api/statusApi\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport React from 'react'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport {Button} from '@windmill/react-ui'\r\n// import { useAppDispatch } from '../store'\r\n// import { createStatus } from \"../slices/statuss\";  \r\n\r\nexport default function CreateStatus() {\r\n  const { addToast } = useToasts()\r\n    const{register,handleSubmit} = useForm();\r\n    const history = useHistory()\r\n    const onSubmit = data => {\r\n        console.log(data)\r\n        statusApi.createStatus(data).then(()=>{\r\n            //alert('Create Status Success')\r\n            addToast(\"Create Status Success\", {\r\n              appearance: 'success',\r\n              autoDismiss: true,\r\n            })\r\n            history.goBack()\r\n        }).catch(err => \r\n          //alert(err)\r\n          addToast(\"The Name Stastus is Existed\", {\r\n            appearance: 'error',\r\n            autoDismiss: true,\r\n          })\r\n          )\r\n    }\r\n    // const history = useHistory()\r\n    //  const dispatch = useAppDispatch()\r\n    //  const{register,handleSubmit} = useForm();\r\n    //  const onSubmit = data => {\r\n    //     console.log(data)\r\n    //     dispatch(createStatus(data))\r\n    //     history.push('/statuss-manager')\r\n    // }\r\n\r\n\r\n    return (\r\n       <div className=\"w-full h-full pt-16\">\r\n      <div className=\"max-w-xl px-8 py-8 border-0 shadow-lg rounded-xl h-auto bg-white mx-auto\">\r\n        <h1 className=\"text-2xl font-bold pb-8\">Create Project Status</h1>\r\n        <hr className=\"mb-5\"/>\r\n        <div className=\"px-6\">\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n          <FormInput r={register} name=\"StatusName\" label='Status Name' required />\r\n          <FormInput r={register} name=\"StatusDescription\" label='Description'  /> \r\n          <div className=\"w-full mt-10 mb-10 px-10\">\r\n            \r\n          <Button layout=\"outline\" size=\"large\" type= \"submit\" className=\"rounded-md py-2 \r\n            text-white text-xl w-full \">\r\n            Create Status\r\n          </Button>\r\n            \r\n          </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n","import FormInput from \"../components/Form/FormInputNew\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport WorkflowApi from \"../api/workflowApi\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport React from 'react'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport {Button} from '@windmill/react-ui'\r\n// import { useAppDispatch } from '../store'\r\n// import { createWorkflow } from \"../slices/Workflows\";\r\n\r\nexport default function CreateWorkflow() {\r\n    const {addToast} = useToasts()\r\n    const{register,handleSubmit} = useForm();\r\n    const history = useHistory()\r\n    const onSubmit = data => {\r\n        console.log(data)\r\n        WorkflowApi.createWorkflow(data).then(()=>{\r\n            //alert('Create Workflow Success')\r\n            addToast(\"Create Workflow Success\", {\r\n                        appearance: 'success',\r\n                        autoDismiss: true,\r\n                      })\r\n            \r\n            history.goBack()\r\n        }).catch(err => \r\n         //alert(err)\r\n         addToast(\"The name workflow is exsited!\", {\r\n          appearance: 'error',\r\n          autoDismiss: true,\r\n        })\r\n         )\r\n    }\r\n    // const history = useHistory()\r\n    //  const dispatch = useAppDispatch()\r\n    //  const{register,handleSubmit} = useForm();\r\n    //  const onSubmit = data => {\r\n    //     console.log(data)\r\n    //     dispatch(createWorkflow(data))\r\n    //     history.push('/Workflows-manager')\r\n    // }\r\n\r\n\r\n    return (\r\n       <div className=\"w-full h-full pt-16\">\r\n      <div className=\"max-w-xl px-8 py-8 border-0 shadow-lg rounded-xl h-auto bg-white mx-auto\">\r\n        <h1 className=\"text-2xl font-bold pb-8\">Create Workflow</h1>\r\n        <hr className=\"mb-5\"/>\r\n        <div className=\"px-6\">\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n          <FormInput r={register} name=\"WorkflowName\" label='Workflow Name' required />\r\n          <FormInput r={register} name=\"WorkflowDescription\" label='Description'  /> \r\n          <div className=\"w-full mt-10 mb-5 px-10\">\r\n            \r\n             <Button layout=\"outline\" size=\"large\" type= \"submit\" className=\"rounded-md py-2 \r\n            text-white text-xl w-full \">\r\n            Create Workflow\r\n          </Button>\r\n          </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { workflowsSelector } from '../slices/workflows'\r\nimport {\r\n  fetchWorkflowProjects,\r\n  workflowProjectsSelector,\r\n} from '../slices/wor-pro'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAppDispatch } from '../store'\r\nimport WorkflowProjectItem from '../components/Workflow/WorkflowProjectItem'\r\nimport UpdateProjectWorkflow from '../components/Workflow/UpdateWorkflowModal'\r\n\r\nexport default function DetailWorkflow() {\r\n  const { workflowUpdate } = useSelector(workflowsSelector)\r\n  //lưu vào localStorage\r\n  if (workflowUpdate.WorkflowId) {\r\n    localStorage.setItem('Workflow', JSON.stringify(workflowUpdate))\r\n  }\r\n  let temp = JSON.parse(localStorage.getItem('Workflow') || '[]')\r\n  const dispatch = useAppDispatch()\r\n  const { workflowprojects, loading, hasErrors } = useSelector(\r\n    workflowProjectsSelector\r\n  )\r\n  useEffect(() => {\r\n    dispatch(fetchWorkflowProjects(temp.WorkflowId))\r\n  }, [dispatch])\r\n \r\n  \r\n  const renderWorkflowProject = () => {\r\n    return workflowprojects.map((temp_project) => (\r\n      <WorkflowProjectItem\r\n        key={temp_project.ProjectKey}\r\n        workflow_project={temp_project}\r\n      ></WorkflowProjectItem>\r\n    ))\r\n  }\r\n  \r\n  const [openUpdate, setOpenUpdate] = React.useState(false)\r\n  const handleOpenUpdate = (e) => {\r\n    e.preventDefault()\r\n    // dispatch(setUserUpdate(user))\r\n    setOpenUpdate(true)\r\n  }\r\n  const handleCloseUpdate = () => {\r\n    setOpenUpdate(false)\r\n  }\r\n  const modalUpdate = {\r\n    open: openUpdate,\r\n    handleOpen: handleOpenUpdate,\r\n    handleClose: handleCloseUpdate,\r\n    data_workflow: temp,\r\n    fulldata:workflowprojects\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <UpdateProjectWorkflow modalDialog={modalUpdate}></UpdateProjectWorkflow>\r\n      <div className=\"container mx-auto px-4 mb-16 sm:px-8\">\r\n        <div className=\"py-8\">\r\n          <div>\r\n            <h2 className=\"text-2xl font-semibold leading-tight\">\r\n              {temp.WorkflowName}\r\n            </h2>\r\n            <p className=\" font-semibold leading-tight\">\r\n              {temp.WorkflowDescription}\r\n            </p>\r\n          </div>\r\n          <div className=\"my-2 flex justify-between sm:flex-row flex-col\">\r\n            <div className=\"flex\">\r\n              <a onClick={(e) => handleOpenUpdate(e)} >\r\n                <button className=\"bg-white border shadow-sm px-3 py-1.5 rounded-md hover:text-green-500 text-gray-700\">\r\n                  Add project\r\n                </button>\r\n              </a>\r\n              {/* <Link to=\"/invite-user\">\r\n              <button className=\"bg-white border shadow-sm px-3 py-1.5 rounded-md hover:text-green-500 text-gray-700 ml-1\">\r\n                Invite Users\r\n              </button>\r\n            </Link> */}\r\n            </div>\r\n          </div>\r\n          <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\r\n            <div className=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\r\n              <table className=\"min-w-full leading-normal\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Project Name\r\n                    </th>\r\n                    {/* <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    Description\r\n                  </th> */}\r\n                    {/* <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    Email\r\n                  </th> */}\r\n                    {/* <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                    Group name\r\n                  </th> */}\r\n                    <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                      Action\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>{renderWorkflowProject()}</tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport {  inforUserSelector } from '../slices/infouser'\r\nimport { useAppDispatch } from '../store'\r\nimport {\r\n  Box,\r\n  Container,\r\n  Grid,\r\n  Avatar,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Divider,\r\n  Typography,\r\n  TextField,\r\n  CardHeader,\r\n} from '@material-ui/core'\r\nimport FormInput from '../components/Form/FormInput'\r\nimport { useForm } from 'react-hook-form'\r\nimport { usersSelector, updateUser } from '../slices/users'\r\n\r\nexport default function Profile() {\r\n      const dispatch = useAppDispatch()\r\n      const { inforUser, success } = useSelector(inforUserSelector)\r\n     \r\n        const { register, handleSubmit } = useForm()\r\n     const onSubmit = (data) => {\r\n        dispatch(updateUser({ id: inforUser.User_Id, data }))\r\n     }\r\n    return (\r\n      <div>\r\n        <Box\r\n          sx={{\r\n            backgroundColor: 'background.default',\r\n            minHeight: '100%',\r\n            py: 3,\r\n          }}\r\n        >\r\n          <Container maxWidth=\"lg\">\r\n            <Grid container spacing={3}>\r\n              <Grid item lg={12} md={12} xs={12}>\r\n                <Card>\r\n                  <CardContent>\r\n                    <Box\r\n                      sx={{\r\n                        alignItems: 'center',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                      }}\r\n                    >\r\n                      <Avatar\r\n                        sx={{\r\n                          height: 100,\r\n                          width: 100,\r\n                        }}\r\n                      >\r\n                        A\r\n                      </Avatar>\r\n                      <Typography color=\"textPrimary\" gutterBottom variant=\"h3\">\r\n                        {inforUser.User_Full_Name}\r\n                      </Typography>\r\n                      <Typography color=\"textSecondary\" variant=\"body1\">\r\n                        Việt Nam\r\n                      </Typography>\r\n                    </Box>\r\n                  </CardContent>\r\n                  <Divider />\r\n                  {/* <CardActions>\r\n                    <Button color=\"primary\" fullWidth variant=\"text\">\r\n                      Upload picture\r\n                    </Button>\r\n                  </CardActions> */}\r\n                </Card>\r\n              </Grid>\r\n              <Grid item lg={12} md={12} xs={12}>\r\n                <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\r\n                  <Card>\r\n                    <CardHeader\r\n                      subheader=\"The information can be edited\"\r\n                      title=\"Profile\"\r\n                    />\r\n                    <Divider />\r\n                    <CardContent>\r\n                      <Grid container spacing={3}>\r\n                        <Grid item md={12} xs={12}>\r\n                          <FormInput\r\n                            r={register}\r\n                            fullWidth\r\n                            label=\"Full name\"\r\n                            name=\"User_Full_Name\"\r\n                            required\r\n                            value={inforUser.User_Full_Name}\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                          <FormInput\r\n                            r={register}\r\n                            fullWidth\r\n                            label=\"User name\"\r\n                            name=\"lastName\"\r\n                            // onChange={handleChange}\r\n                            // required\r\n                            value={inforUser.User_Name}\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                          <FormInput\r\n                            r={register}\r\n                            fullWidth\r\n                            label=\"Email Address\"\r\n                            name=\"email\"\r\n                            // onChange={handleChange}\r\n                            // required\r\n                            value={inforUser.User_Email}\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                          <FormInput\r\n                            r={register}\r\n                            fullWidth\r\n                            label=\"Phone Number\"\r\n                            name=\"phone\"\r\n                            // onChange={handleChange}\r\n                            // type=\"number\"\r\n                            value={'0852578535'}\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                          <FormInput\r\n                            r={register}\r\n                            fullWidth\r\n                            label=\"Country\"\r\n                            name=\"country\"\r\n                            // onChange={handleChange}\r\n                            // required\r\n                            value={'Viet Nam'}\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box\r\n                      sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'flex-end',\r\n                        p: 2,\r\n                      }}\r\n                    >\r\n                      <div className=\" mt-10 mb-5 px-10\">\r\n                        <input\r\n                          type=\"submit\"\r\n                          value=\"Update User\"\r\n                          className=\"bg-green-600 rounded-md py-2 \r\n            text-white text-xl \"\r\n                        />\r\n                      </div>\r\n                    </Box>\r\n                  </Card>\r\n                </form>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        </Box>\r\n      </div>\r\n    )\r\n}\r\n","/**\r\n * ⚠ These are used just to render the Sidebar!\r\n * You can include any link here, local or external.\r\n *\r\n * If you're looking to actual Router routes, go to\r\n * `routes/index.js`\r\n */\r\nconst routes = [\r\n  {\r\n    path: '/app/user-manager', // the url\r\n    icon: 'OutlinePersonIcon', // the component being exported from icons/index.js\r\n    name: 'User Manager', // name that appear in Sidebar\r\n    globalRole: 'Admin',\r\n  },\r\n  {\r\n    path: '/app/permission-manager',\r\n    icon: 'ForbiddenIcon',\r\n    name: 'Permission Project',\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/app/role-manager',\r\n    icon: 'UserIcon',\r\n    name: 'Role Manager',\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/app/workflows-manager',\r\n    icon: 'PeopleIcon',\r\n    name: 'Workflows Manager',\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/app/customFields',\r\n    icon: 'PagesIcon',\r\n    name: 'CustomFields',\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/app/issueTypes',\r\n    icon: 'MoneyIcon',\r\n    name: 'IssueTypes',\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/app/status-manager',\r\n    icon: 'PagesIcon',\r\n    name: 'Status',\r\n    globalRole: 'Trusted',\r\n  },\r\n  {\r\n    path: '/app/Screens',\r\n    icon: 'ModalsIcon',\r\n    name: 'Screens',\r\n    globalRole: 'Trusted',\r\n  },\r\n]\r\nexport default routes\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { DropdownIcon } from '../../icons'\r\nimport * as Icons from '../../icons'\r\nimport { Transition } from '@windmill/react-ui'\r\n\r\nfunction Icon({ icon, ...props }) {\r\n  const Icon = Icons[icon]\r\n  return <Icon {...props} />\r\n}\r\n\r\nfunction SidebarSubmenu({ route }) {\r\n  const [isDropdownMenuOpen, setIsDropdownMenuOpen] = useState(false)\r\n\r\n  function handleDropdownMenuClick() {\r\n    setIsDropdownMenuOpen(!isDropdownMenuOpen)\r\n  }\r\n\r\n  return (\r\n    <li className=\"relative px-6 py-3\" key={route.name}>\r\n      <button\r\n        className=\"inline-flex items-center justify-between w-full text-sm font-semibold transition-colors duration-150 hover:text-gray-800 dark:hover:text-gray-200\"\r\n        onClick={handleDropdownMenuClick}\r\n        aria-haspopup=\"true\"\r\n      >\r\n        <span className=\"inline-flex items-center\">\r\n          <Icon className=\"w-5 h-5\" aria-hidden=\"true\" icon={route.icon} />\r\n          <span className=\"ml-4\">{route.name}</span>\r\n        </span>\r\n        <DropdownIcon className=\"w-4 h-4\" aria-hidden=\"true\" />\r\n      </button>\r\n      <Transition\r\n        show={isDropdownMenuOpen}\r\n        enter=\"transition-all ease-in-out duration-300\"\r\n        enterFrom=\"opacity-25 max-h-0\"\r\n        enterTo=\"opacity-100 max-h-xl\"\r\n        leave=\"transition-all ease-in-out duration-300\"\r\n        leaveFrom=\"opacity-100 max-h-xl\"\r\n        leaveTo=\"opacity-0 max-h-0\"\r\n      >\r\n        <ul\r\n          className=\"p-2 mt-2 space-y-2 overflow-hidden text-sm font-medium text-gray-500 rounded-md shadow-inner bg-gray-50 dark:text-gray-400 dark:bg-gray-900\"\r\n          aria-label=\"submenu\"\r\n        >\r\n          {route.routes.map((r) => (\r\n            <li\r\n              className=\"px-2 py-1 transition-colors duration-150 hover:text-gray-800 dark:hover:text-gray-200\"\r\n              key={r.name}\r\n            >\r\n              <Link className=\"w-full\" to={r.path}>\r\n                {r.name}\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </Transition>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default SidebarSubmenu\r\n","import React from 'react'\r\nimport routesAdmin from '../../routes/sidebar'\r\n\r\nimport { NavLink, Route } from 'react-router-dom'\r\nimport * as Icons from '../../icons'\r\nimport SidebarSubmenu from './SidebarSubmenu'\r\nimport { Button } from '@windmill/react-ui'\r\nimport { inforUserSelector } from '../../slices/infouser'\r\nimport { useSelector } from 'react-redux'\r\n\r\nfunction Icon({ icon, ...props }) {\r\n  const Icon = Icons[icon]\r\n  return <Icon {...props} />\r\n}\r\n\r\nfunction SidebarContent() {\r\n  //check global role\r\n  const { inforUser, success } = useSelector(inforUserSelector)\r\n  let routes = []\r\n  if(success){\r\n    if(inforUser.Is_Admin == 1){\r\n      routesAdmin.map((route) => {\r\n        if(route.globalRole == 'Trusted'){\r\n          routes.push(route)\r\n        }\r\n      })\r\n    }\r\n    if(inforUser.Is_Admin == 0){\r\n      routes = routesAdmin\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"py-4 text-gray-500 dark:text-gray-400\">\r\n      <ul>\r\n        {routes.map((route) =>\r\n          route.routes ? (\r\n            <SidebarSubmenu route={route} key={route.name} />\r\n          ) : (\r\n            <li className=\"relative px-6 py-3\" key={route.name}>\r\n              <NavLink\r\n                exact\r\n                to={route.path}\r\n                className=\"inline-flex items-center w-full text-sm font-semibold transition-colors duration-150 hover:text-gray-800 dark:hover:text-gray-200\"\r\n                activeClassName=\"text-gray-800 dark:text-gray-100\"\r\n              >\r\n                <Route path={route.path} exact={route.exact}>\r\n                  <span\r\n                    className=\"absolute inset-y-0 left-0 w-1 bg-purple-600 rounded-tr-lg rounded-br-lg\"\r\n                    aria-hidden=\"true\"\r\n                  ></span>\r\n                </Route>\r\n                <Icon\r\n                  className=\"w-5 h-5\"\r\n                  aria-hidden=\"true\"\r\n                  icon={route.icon}\r\n                />\r\n                <span className=\"ml-4\">{route.name}</span>\r\n              </NavLink>\r\n            </li>\r\n          )\r\n        )}\r\n      </ul>\r\n      {/* <div className=\"px-6 my-6\">\r\n        <Button>\r\n          Create account\r\n          <span className=\"ml-2\" aria-hidden=\"true\">\r\n            +\r\n          </span>\r\n        </Button>\r\n      </div> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SidebarContent\r\n","import React from 'react'\r\n\r\nimport SidebarContent from './SidebarContent'\r\n\r\nfunction DesktopSidebar(props) {\r\n  return (\r\n    <aside className=\"z-30 flex-shrink-0 hidden w-64 overflow-y-auto bg-white dark:bg-gray-800 lg:block\">\r\n      <SidebarContent />\r\n    </aside>\r\n  )\r\n}\r\n\r\nexport default DesktopSidebar\r\n","import React, { useContext } from 'react'\r\n\r\nimport SidebarContent from './SidebarContent'\r\nimport { Transition, Backdrop } from '@windmill/react-ui'\r\n\r\nimport { SidebarContext } from '../../context/SidebarContext'\r\n\r\nfunction MobileSidebar() {\r\n  const { isSidebarOpen, closeSidebar } = useContext(SidebarContext)\r\n\r\n  return (\r\n    <Transition show={isSidebarOpen}>\r\n      <>\r\n        <Transition\r\n          enter=\"transition ease-in-out duration-150\"\r\n          enterFrom=\"opacity-0\"\r\n          enterTo=\"opacity-100\"\r\n          leave=\"transition ease-in-out duration-150\"\r\n          leaveFrom=\"opacity-100\"\r\n          leaveTo=\"opacity-0\"\r\n        >\r\n          <Backdrop onClick={closeSidebar} />\r\n        </Transition>\r\n\r\n        <Transition\r\n          enter=\"transition ease-in-out duration-150\"\r\n          enterFrom=\"opacity-0 transform -translate-x-20\"\r\n          enterTo=\"opacity-100\"\r\n          leave=\"transition ease-in-out duration-150\"\r\n          leaveFrom=\"opacity-100\"\r\n          leaveTo=\"opacity-0 transform -translate-x-20\"\r\n        >\r\n          <aside className=\"fixed inset-y-0 z-50 flex-shrink-0 w-64 mt-16 overflow-y-auto bg-white dark:bg-gray-800 lg:hidden\">\r\n            <SidebarContent />\r\n          </aside>\r\n        </Transition>\r\n      </>\r\n    </Transition>\r\n  )\r\n}\r\n\r\nexport default MobileSidebar\r\n","import React from 'react'\r\nimport DesktopSidebar from './DesktopSidebar'\r\nimport MobileSidebar from './MobileSidebar'\r\n\r\nfunction Sidebar() {\r\n  return (\r\n    <>\r\n      <DesktopSidebar />\r\n      <MobileSidebar />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\nimport { addNewIssue, fetchCustomFields } from '../../slices/issues'\r\nimport {\r\n  selectAllProjectIssueTypeScreens,\r\n  selectUserList,\r\n  fetchProjectIssueTypeScreens,\r\n  fetchUserList,\r\n  setErrorNull,\r\n  setSuccessNull,\r\n} from '../../slices/issues'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport {\r\n  Input,\r\n  Label,\r\n  Select,\r\n  Textarea,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n} from '@windmill/react-ui'\r\nimport ReactQuill from 'react-quill'\r\nimport 'react-quill/dist/quill.snow.css'\r\nimport 'react-quill/dist/quill.bubble.css'\r\n\r\n/*\r\n * Quill modules to attach to editor\r\n * See https://quilljs.com/docs/modules/ for complete options\r\n */\r\nconst modules = {\r\n  toolbar: [\r\n    [{ header: '1' }, { header: '2' }, { font: [] }, { size: [] }],\r\n    ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n    [\r\n      { color: [] },\r\n      { background: [] },\r\n      { align: [] },\r\n      { list: 'ordered' },\r\n      { list: 'bullet' },\r\n      { indent: '-1' },\r\n      { indent: '+1' },\r\n    ],\r\n    ['link'],\r\n    ['clean'],\r\n  ],\r\n  clipboard: {\r\n    // toggle to add extra line breaks when pasting HTML:\r\n    matchVisual: false,\r\n  },\r\n}\r\n/*\r\n * Quill editor formats\r\n * See https://quilljs.com/docs/formats/\r\n */\r\nconst formats = [\r\n  'header',\r\n  'font',\r\n  'size',\r\n  'bold',\r\n  'italic',\r\n  'underline',\r\n  'strike',\r\n  'blockquote',\r\n  'align',\r\n  'background',\r\n  'color',\r\n  'list',\r\n  'bullet',\r\n  'indent',\r\n  'link',\r\n]\r\n\r\nexport const AddIssueForm = () => {\r\n  const { addToast } = useToasts()\r\n  const { register, handleSubmit, reset } = useForm()\r\n  const [name, setName] = useState('')\r\n  const [key, setKey] = useState('')\r\n  const [projectName, setProjectName] = useState('')\r\n  const [issueTypeName, setIssueTypeName] = useState('')\r\n  const [description, setDescription] = useState('')\r\n  const [addRequestStatus, setAddRequestStatus] = useState('idle')\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const success = useSelector((state) => state.issues.success)\r\n  const error = useSelector((state) => state.issues.error)\r\n\r\n  const dispatch = useDispatch()\r\n  const projectIssueTypeScreens = useSelector(selectAllProjectIssueTypeScreens)\r\n  const userList = useSelector(selectUserList)\r\n\r\n  const filteredProjects = projectIssueTypeScreens\r\n    .map((item) => item.Project_Name)\r\n    .filter((value, index, self) => self.indexOf(value) === index)\r\n\r\n  const filteredIssueTypes = projectIssueTypeScreens.filter(\r\n    (item) => item.Project_Name === projectName\r\n  )\r\n\r\n  const projectsOptions = filteredProjects.map((item) => (\r\n    <option key={item} value={item}>\r\n      {item}\r\n    </option>\r\n  ))\r\n  const userOptions = userList.map((item) => (\r\n    <option key={item.User_Id} value={item.User_Full_Name}>\r\n      {item.User_Full_Name}\r\n    </option>\r\n  ))\r\n  const issueTypesOptions = filteredIssueTypes.map((item) => (\r\n    <option key={item.Issue_Type_Name} value={item.Issue_Type_Name}>\r\n      {item.Issue_Type_Name}\r\n    </option>\r\n  ))\r\n\r\n  const issueStatus = useSelector((state) => state.issues.statusAddIssue)\r\n  const customFields = useSelector((state) => state.issues.customFields)\r\n  useEffect(() => {\r\n    if (issueStatus === 'idle') {\r\n      dispatch(fetchProjectIssueTypeScreens())\r\n    }\r\n    if ([projectName, issueTypeName].every(Boolean)) {\r\n      const { Screen } = projectIssueTypeScreens.find(\r\n        (element) =>\r\n          element.Project_Name === projectName &&\r\n          element.Issue_Type_Name === issueTypeName\r\n      )\r\n      if (Screen) {\r\n        dispatch(fetchCustomFields({ Id: Screen }))\r\n      }\r\n      const { Project } = projectIssueTypeScreens.find(\r\n        (element) => element.Project_Name === projectName\r\n      )\r\n      if (Project) {\r\n        dispatch(fetchUserList({ project: Project }))\r\n      }\r\n    }\r\n    if (error) {\r\n      addToast(error, {\r\n        appearance: 'error',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setErrorNull({ error: null }))\r\n    }\r\n    if (success) {\r\n      addToast(success, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n      dispatch(setSuccessNull({ success: null }))\r\n    }\r\n  }, [issueStatus, dispatch, projectName, issueTypeName, error, success])\r\n\r\n  const onNameChanged = (e) => setName(e.target.value)\r\n  const onKeyChanged = (e) => setKey(e.target.value)\r\n  const onIssueTypeChanged = (e) => setIssueTypeName(e.target.value)\r\n  const onProjectChanged = (e) => {\r\n    setProjectName(e.target.value)\r\n    setIssueTypeName('')\r\n  }\r\n  const canSave =\r\n    [name, key, projectName, issueTypeName].every(Boolean) &&\r\n    addRequestStatus === 'idle'\r\n\r\n  const onSaveIssueClicked = async (data) => {\r\n    if (canSave) {\r\n      try {\r\n        setAddRequestStatus('pending')\r\n        setName('')\r\n        setKey('')\r\n        setDescription('')\r\n        const found = projectIssueTypeScreens.find(\r\n          (element) =>\r\n            element.Project_Name === projectName &&\r\n            element.Issue_Type_Name === issueTypeName\r\n        )\r\n        const result = customFields.map((item) => ({\r\n          ...item,\r\n          Value: data[item.Name],\r\n          Issue: key,\r\n        }))\r\n        reset()\r\n        const resultAction = await dispatch(\r\n          addNewIssue({\r\n            Key: key,\r\n            Name: name,\r\n            Project: found.Project,\r\n            Issue_Type: found.Issue_Type,\r\n            Icon: found.Issue_Type_Icon,\r\n            Description: description,\r\n            Fields: result,\r\n          })\r\n        )\r\n        unwrapResult(resultAction)\r\n      } catch (err) {\r\n        console.error('Failed to save the issue: ', err)\r\n      } finally {\r\n        setAddRequestStatus('idle')\r\n      }\r\n    }\r\n  }\r\n  function openModal() {\r\n    setIsModalOpen(true)\r\n  }\r\n  function closeModal() {\r\n    setIsModalOpen(false)\r\n  }\r\n  let inputFields\r\n  if (customFields && customFields.length !== 0) {\r\n    inputFields = customFields.map((item) => {\r\n      switch (item.Field_Type) {\r\n        case 'Text':\r\n          return (\r\n            <Label key={item.Custom_Field} className=\"m-2\">\r\n              <span>{item.Name}</span>\r\n              <Input className=\"mt-1\" {...register(item.Name)} />\r\n            </Label>\r\n          )\r\n        case 'Date':\r\n          return (\r\n            <Label key={item.Custom_Field} className=\"m-2\">\r\n              <span>{item.Name}</span>\r\n              <Input type=\"date\" className=\"mt-1\" {...register(item.Name)} />\r\n            </Label>\r\n          )\r\n        case 'Text area':\r\n          return (\r\n            <Label key={item.Custom_Field} className=\"m-2\">\r\n              <span>{item.Name}</span>\r\n              <Textarea className=\"mt-1\" rows=\"3\" {...register(item.Name)} />\r\n            </Label>\r\n          )\r\n        case 'People':\r\n          return (\r\n            <Label key={item.Custom_Field} className=\"m-2\">\r\n              <span>{item.Name}</span>\r\n              <Select className=\"mt-1\" {...register(item.Name)}>\r\n                <option value=\"\"></option>\r\n                {userOptions}\r\n              </Select>\r\n            </Label>\r\n          )\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Button onClick={openModal}>Create</Button>\r\n      </div>\r\n      <Modal\r\n        className=\"w-full px-6 py-4 overflow-hidden bg-white rounded-t-lg dark:bg-gray-800 sm:rounded-lg sm:m-4 sm:max-w-6xl\"\r\n        isOpen={isModalOpen}\r\n        onClose={closeModal}\r\n      >\r\n        <ModalHeader className=\"m-2\">Add a issue</ModalHeader>\r\n        <ModalBody class=\"overflow-auto h-80 flex\">\r\n          <div className=\"flex-auto\">\r\n            <Label className=\"m-2\">\r\n              <span>Name</span>\r\n              <Input className=\"mt-1\" value={name} onChange={onNameChanged} />\r\n            </Label>\r\n            <Label className=\"m-2\">\r\n              <span>Key</span>\r\n              <Input className=\"mt-1\" value={key} onChange={onKeyChanged} />\r\n            </Label>\r\n            <Label className=\"m-2\">\r\n              <span>Project</span>\r\n              <Select\r\n                className=\"mt-1\"\r\n                value={projectName}\r\n                onChange={onProjectChanged}\r\n              >\r\n                <option value=\"\"></option>\r\n                {projectsOptions}\r\n              </Select>\r\n            </Label>\r\n            <Label className=\"m-2\">\r\n              <span>Issue type</span>\r\n              <Select\r\n                className=\"mt-1\"\r\n                value={issueTypeName}\r\n                onChange={onIssueTypeChanged}\r\n              >\r\n                <option value=\"\"></option>\r\n                {issueTypesOptions}\r\n              </Select>\r\n            </Label>\r\n            {inputFields}\r\n          </div>\r\n          <div className=\"m-2 mr-4 flex-auto\">\r\n            <Label className=\"mb-1\">\r\n              <span>Description</span>\r\n            </Label>\r\n            <ReactQuill\r\n              theme=\"snow\"\r\n              value={description}\r\n              onChange={setDescription}\r\n              modules={modules}\r\n              formats={formats}\r\n              placeholder={'Write something...'}\r\n            />\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <div className=\"hidden sm:block\">\r\n            <Button layout=\"outline\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"hidden sm:block\">\r\n            <Button\r\n              onClick={handleSubmit(onSaveIssueClicked)}\r\n              disabled={!canSave}\r\n            >\r\n              Accept\r\n            </Button>\r\n          </div>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect,useContext, useState } from 'react'\r\nimport { SidebarContext } from '../context/SidebarContext'\r\nimport {\r\n  SearchIcon,\r\n  MoonIcon,\r\n  SunIcon,\r\n  BellIcon,\r\n  MenuIcon,\r\n  OutlinePersonIcon,\r\n  OutlineCogIcon,\r\n  OutlineLogoutIcon,\r\n  LayersIcon,\r\n} from '../icons'\r\nimport {\r\n  Avatar,\r\n  Badge,\r\n  Input,\r\n  Dropdown,\r\n  DropdownItem,\r\n  WindmillContext,\r\n} from '@windmill/react-ui'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { AddIssueForm } from '../components/Issue/AddIssueForm'\r\nimport { logout, inforUserSelector } from '../slices/infouser'\r\nimport userApi from '../api/userApi'\r\nimport { useAppDispatch } from '../store'\r\n\r\nfunction Header() {\r\n  const { mode, toggleMode } = useContext(WindmillContext)\r\n  const { toggleSidebar } = useContext(SidebarContext)\r\n\r\n  const [isNotificationsMenuOpen, setIsNotificationsMenuOpen] = useState(false)\r\n  const [isProfileMenuOpen, setIsProfileMenuOpen] = useState(false)\r\n\r\n  function handleNotificationsClick() {\r\n    setIsNotificationsMenuOpen(!isNotificationsMenuOpen)\r\n  }\r\n\r\n  function handleProfileClick() {\r\n    setIsProfileMenuOpen(!isProfileMenuOpen)\r\n  }\r\n  const [isLogged, setIsLogged] = useState(false)\r\n  useEffect(() => {\r\n    setIsLogged(!!localStorage.getItem('accessToken'))\r\n  })\r\n  //logout\r\n  const history = useHistory()\r\n  const Logout = async ()=> {\r\n   await userApi.logout().then(() => {\r\n      localStorage.removeItem('accessToken')\r\n      localStorage.removeItem('refreshToken')\r\n      dispatch(logout())\r\n    })\r\n    await history.push('/login')\r\n  }\r\n  const dispatch = useAppDispatch()\r\n\r\n  return (\r\n    <header className=\"z-40 py-4 bg-white shadow-bottom dark:bg-gray-800\">\r\n      <div className=\"container flex items-center justify-between h-full px-6 mx-auto text-purple-600 dark:text-purple-300\">\r\n        {/* <!-- Mobile hamburger --> */}\r\n        <button\r\n          className=\"p-1 mr-5 -ml-1 rounded-md lg:hidden focus:outline-none focus:shadow-outline-purple\"\r\n          onClick={toggleSidebar}\r\n          aria-label=\"Menu\"\r\n        >\r\n          <MenuIcon className=\"w-6 h-6\" aria-hidden=\"true\" />\r\n        </button>\r\n        {/* <!-- Search input --> */}\r\n        <LayersIcon className=\"w-10 h-10\" aria-hidden=\"true\" />\r\n        <a\r\n          className=\"ml-6 text-lg font-bold text-gray-800 dark:text-gray-200\"\r\n          href=\"#\"\r\n        >\r\n          Jira \r\n        </a>\r\n        \r\n        <Link to=\"/app/projects\">\r\n          <a\r\n            href\r\n            className=\"ml-6 text-lg font-bold text-gray-800 dark:text-gray-200\"\r\n          >\r\n            Projects\r\n          </a>\r\n        </Link>\r\n        <Link to=\"/app/issues\">\r\n          <a\r\n            href\r\n            className=\"ml-6 text-lg font-bold text-gray-800 dark:text-gray-200\"\r\n          >\r\n            Issues\r\n          </a>\r\n        </Link>\r\n        <a className=\"ml-4\">{isLogged && <AddIssueForm />}</a>\r\n        <div className=\"flex justify-center flex-1 lg:mr-32\">\r\n          <div className=\"relative w-full max-w-xl mr-6 focus-within:text-purple-500\">\r\n            <div className=\"absolute inset-y-0 flex items-center pl-2\">\r\n              <SearchIcon className=\"w-4 h-4\" aria-hidden=\"true\" />\r\n            </div>\r\n            <Input\r\n              className=\"pl-8 text-gray-700\"\r\n              placeholder=\"Search for projects\"\r\n              aria-label=\"Search\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <ul className=\"flex items-center flex-shrink-0 space-x-6\">\r\n          {/* <!-- Theme toggler --> */}\r\n          <li className=\"flex\">\r\n            <button\r\n              className=\"rounded-md focus:outline-none focus:shadow-outline-purple\"\r\n              onClick={toggleMode}\r\n              aria-label=\"Toggle color mode\"\r\n            >\r\n              {mode === 'dark' ? (\r\n                <SunIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\r\n              ) : (\r\n                <MoonIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\r\n              )}\r\n            </button>\r\n          </li>\r\n          {/* <!-- Notifications menu --> */}\r\n          <li className=\"relative\">\r\n            <button\r\n              className=\"relative align-middle rounded-md focus:outline-none focus:shadow-outline-purple\"\r\n              onClick={handleNotificationsClick}\r\n              aria-label=\"Notifications\"\r\n              aria-haspopup=\"true\"\r\n            >\r\n              <BellIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\r\n              {/* <!-- Notification badge --> */}\r\n              <span\r\n                aria-hidden=\"true\"\r\n                className=\"absolute top-0 right-0 inline-block w-3 h-3 transform translate-x-1 -translate-y-1 bg-red-600 border-2 border-white rounded-full dark:border-gray-800\"\r\n              ></span>\r\n            </button>\r\n\r\n            <Dropdown\r\n              align=\"right\"\r\n              isOpen={isNotificationsMenuOpen}\r\n              onClose={() => setIsNotificationsMenuOpen(false)}\r\n            >\r\n              <DropdownItem tag=\"a\" href=\"#\" className=\"justify-between\">\r\n                <span>Messages</span>\r\n                <Badge type=\"danger\">13</Badge>\r\n              </DropdownItem>\r\n              <DropdownItem tag=\"a\" href=\"#\" className=\"justify-between\">\r\n                <span>Sales</span>\r\n                <Badge type=\"danger\">2</Badge>\r\n              </DropdownItem>\r\n              <DropdownItem onClick={() => alert('Alerts!')}>\r\n                <span>Alerts</span>\r\n              </DropdownItem>\r\n            </Dropdown>\r\n          </li>\r\n          {/* <!-- Profile menu --> */}\r\n          <li className=\"relative\">\r\n            <button\r\n              className=\"rounded-full focus:shadow-outline-purple focus:outline-none\"\r\n              onClick={handleProfileClick}\r\n              aria-label=\"Account\"\r\n              aria-haspopup=\"true\"\r\n            >\r\n              <Avatar\r\n                className=\"align-middle\"\r\n                src=\"https://images.unsplash.com/photo-1502378735452-bc7d86632805?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=aa3a807e1bbdfd4364d1f449eaa96d82\"\r\n                alt=\"\"\r\n                aria-hidden=\"true\"\r\n              />\r\n            </button>\r\n            <Dropdown\r\n              align=\"right\"\r\n              isOpen={isProfileMenuOpen}\r\n              onClose={() => setIsProfileMenuOpen(false)}\r\n            >\r\n              <Link to=\"/app/profile\">\r\n                <DropdownItem tag=\"a\" href=\"#\">\r\n                  <OutlinePersonIcon\r\n                    className=\"w-4 h-4 mr-3\"\r\n                    aria-hidden=\"true\"\r\n                  />\r\n\r\n                  <span>Profile</span>\r\n                </DropdownItem>\r\n              </Link>\r\n              <DropdownItem tag=\"a\" href=\"#\">\r\n                <OutlineCogIcon className=\"w-4 h-4 mr-3\" aria-hidden=\"true\" />\r\n                <span>Settings</span>\r\n              </DropdownItem>\r\n              <DropdownItem onClick={Logout}>\r\n                <OutlineLogoutIcon\r\n                  className=\"w-4 h-4 mr-3\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n                <span>Log out</span>\r\n              </DropdownItem>\r\n            </Dropdown>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { useContext, Suspense, useEffect, lazy } from 'react'\r\nimport { Switch, Route, Redirect, useLocation } from 'react-router-dom'\r\nimport routes from '../routes'\r\n\r\nimport Sidebar from '../components/Sidebar'\r\nimport Header2 from '../components/Header2'\r\nimport { useSelector } from 'react-redux'\r\nimport ThemedSuspense from '../components/ThemedSuspense'\r\nimport { SidebarContext } from '../context/SidebarContext'\r\nimport { getMe } from '../slices/infouser'\r\nimport { useAppDispatch } from '../store'\r\nimport { inforUserSelector } from '../slices/infouser'\r\n\r\nconst Page404 = lazy(() => import('../pages/404'))\r\n\r\nfunction Layout() {\r\n  //WHY: get info user by\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    dispatch(getMe())\r\n  }, [])\r\n  const { inforUser, success } = useSelector(inforUserSelector)\r\n  let sidebar\r\n  let router_temp = []\r\n  // Admin or trusted has sidebar to edit\r\n  if (success) {\r\n    if (inforUser.Is_Admin == 0 || inforUser.Is_Admin == 1) {\r\n      sidebar = <Sidebar />\r\n    }\r\n    if (inforUser.Is_Admin == 2) {\r\n      routes.map((route, i) => {\r\n        if (route.globalRole == 'Member') {\r\n          router_temp.push(route)\r\n        }\r\n      })\r\n    }\r\n    if (inforUser.Is_Admin == 0) {\r\n      router_temp = routes\r\n    }\r\n    if (inforUser.Is_Admin == 1) {\r\n      routes.map((route, i) => {\r\n        if (route.globalRole == 'Member' || route.globalRole == 'Trusted') {\r\n          router_temp.push(route)\r\n        }\r\n      })\r\n    }\r\n  }\r\n  //Sidebar\r\n  const { isSidebarOpen, closeSidebar } = useContext(SidebarContext)\r\n  let location = useLocation()\r\n\r\n  useEffect(() => {\r\n    closeSidebar()\r\n  }, [location])\r\n\r\n  return (\r\n    <div\r\n      className={`flex h-screen bg-gray-50 dark:bg-gray-900 ${\r\n        isSidebarOpen && 'overflow-hidden'\r\n      }`}\r\n    >\r\n      <div className=\"flex flex-col flex-1 w-full\">\r\n        <Header2 />\r\n        <div className=\"flex\">\r\n          {sidebar}\r\n          <div className=\"w-full\">\r\n            <Suspense fallback={<ThemedSuspense />}>\r\n              <Switch>\r\n                {router_temp.map((route, i) => {\r\n                  return route.component ? (\r\n                    <Route\r\n                      key={i}\r\n                      exact={true}\r\n                      path={`/app${route.path}`}\r\n                      render={(props) => <route.component {...props} />}\r\n                    />\r\n                  ) : null\r\n                })}\r\n                <Redirect exact from=\"/app\" to=\"/app/projects\" />\r\n                <Route component={Page404} />\r\n              </Switch>\r\n            </Suspense>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n"],"sourceRoot":""}